(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{412:function(t,s,a){"use strict";a.r(s);var e=a(41),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber01.png",alt:"Inside Fiber: in-depth overview of the new reconciliation algorithm in React"}})]),t._v(" "),a("h2",{attrs:{id:"声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[t._v("#")]),t._v(" 声明")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://indepth.dev/author/maxkoretskyi/",target:"_blank",rel:"noopener noreferrer"}},[t._v("作者：Max Koretskyi"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://indepth.dev/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react/",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/dendoink",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dendoink 译"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("作 React学习指北中，幸得此文，受益匪浅。")]),t._v(" "),a("p",[t._v("虽已有中译版，然细读之，察屡有误，故与作者通后更译，此新译之文，与诸君享。")]),t._v(" "),a("h2",{attrs:{id:"正文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[t._v("#")]),t._v(" 正文")]),t._v(" "),a("p",[t._v("深入研究 React 称为 Fiber 的新架构，了解新 reconciliation 算法的两个主要阶段。")]),t._v(" "),a("p",[t._v("我们将详细介绍 React如何更新 state，props 和处理 children。")]),t._v(" "),a("p",[t._v("React 是一个用于构建用户交互界面的 JavaScript 库，其核心 "),a("a",{attrs:{href:"https://indepth.dev/what-every-front-end-developer-should-know-about-change-detection-in-angular-and-react/",target:"_blank",rel:"noopener noreferrer"}},[t._v("机制"),a("OutboundLink")],1),t._v(" 就是跟踪组件的状态变化，并将更新的状态映射到到新的界面。")]),t._v(" "),a("p",[t._v("这就是我们在 React 中熟知的 "),a("code",[t._v("协调")]),t._v(" 。我们调用 "),a("code",[t._v("setState")]),t._v(" ，而框架会检查 "),a("code",[t._v("state")]),t._v(" 或 "),a("code",[t._v("props")]),t._v(" 是否更新，以及是否在 UI 界面重新渲染组件。")]),t._v(" "),a("p",[t._v("React 文档提供了对该机制的"),a("a",{attrs:{href:"https://reactjs.org/docs/reconciliation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("高级概述"),a("OutboundLink")],1),t._v(" ：")]),t._v(" "),a("p",[t._v("“React元素，生命周期方法和 "),a("code",[t._v("render")]),t._v(" 方法的作用以及对组件的children所应用的 "),a("code",[t._v("diffing")]),t._v(" 算法。从 "),a("code"),t._v("render"),a("code"),t._v(" 方法返回的不可变 React 元素树，通常称为"),a("em",[t._v("虚拟DOM")]),t._v("。")]),t._v(" "),a("p",[t._v("在早期，这个术语有助于帮助人们理解 React，但也引起了混乱，并且在React文档中不再使用。”")]),t._v(" "),a("p",[t._v("在本文中，我将坚持将其称为: React元素树。")]),t._v(" "),a("p",[t._v("除了 React 元素树之外，该框架还有一个内部实例树（组件，DOM节点等）用于保持状态。")]),t._v(" "),a("p",[t._v("从版本16开始，React 推出了该内部实例树的新实现，以及对其进行管理的算法，代号为 "),a("strong",[t._v("Fiber")]),t._v("。要了解 "),a("strong",[t._v("Fiber")]),t._v(" 架构带来的优势，请查看 "),a("a",{attrs:{href:"https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 为何以及如何在 Fiber 中使用链表"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("这是该系列的第一篇文章，目的是为了让你了解 React 的内部体系结构。")]),t._v(" "),a("p",[t._v("在本文中，我会提供与算法有关的重要概念和数据结构的深入概述。 当我们拥有足够的背景知识之后，将开始探索用于遍历和处理 "),a("strong",[t._v("fiber")]),t._v(" 树的算法和主要函数。")]),t._v(" "),a("p",[t._v("该系列的下一篇文章将演示React如何使用该算法执行初始渲染和处理 state 和 props 的更新。")]),t._v(" "),a("p",[t._v("从那里开始，我们将继续讨论 scheduler 的细节， child reconciliation 过程以及构建 effects list 机制的细节。")]),t._v(" "),a("p",[t._v("在这里我会提供一些非常 “高级” 的知识给你，我鼓励你阅读它，以了解Concurrent（并发） React 内部运作背后的魔法。")]),t._v(" "),a("p",[t._v("如果有开始为 React 做贡献的打算，那么这一系列文章也会为你提供很好的指导。")]),t._v(" "),a("p",[t._v("我是一个 "),a("a",{attrs:{href:"https://indepth.dev/level-up-your-reverse-engineering-skills/",target:"_blank",rel:"noopener noreferrer"}},[t._v("逆向工程死忠粉"),a("OutboundLink")],1),t._v("，因此在最新版本中将有很多链接到源 16.6.0。")]),t._v(" "),a("p",[t._v("肯定要花很多心思，所以如果你没有立刻领会某些内容，不要感到压力。 付出都是值得的。")]),t._v(" "),a("blockquote",[a("p",[t._v("请注意，你不需要了解任何使用 React 的内容。 本文是关于 React 的内部工作。")])]),t._v(" "),a("h2",{attrs:{id:"setting-the-background"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-the-background"}},[t._v("#")]),t._v(" Setting the background")]),t._v(" "),a("p",[t._v("我将在整个系列中使用这个简单的应用程序：有一个按钮，点击可以增加屏幕上呈现的数字：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber02.gif",alt:"img"}})]),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClickCounter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleClick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("\n            button key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n            onClick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleClick\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Update counter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("\n            span key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])]),a("p",[t._v("可以在"),a("a",{attrs:{href:"https://stackblitz.com/edit/react-t4rdmh",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("把玩这段代码，如你所见，这是一个简单组件，从 "),a("code",[t._v("render()")]),t._v(" 方法中返回两个子元素 "),a("code",[t._v("button")]),t._v(" 和 "),a("code",[t._v("span")]),t._v(" 。")]),t._v(" "),a("p",[t._v("当你单击按钮时，组件的状态将被内部的 handler 更新，顺带的，这会导致 "),a("code",[t._v("span")]),t._v(" 元素的文本更新。")]),t._v(" "),a("p",[t._v("React 在 "),a("strong",[t._v("协调（reconciliation）")]),t._v(" 期间执行各种活动。")]),t._v(" "),a("p",[t._v("例如，下面是 React 在简单组件的首次渲染中，以及 state 更新之后，执行的高级操作：")]),t._v(" "),a("ul",[a("li",[t._v("更新 "),a("code",[t._v("ClickCounter")]),t._v(" 组件中 "),a("code",[t._v("state")]),t._v(" 的 "),a("code",[t._v("count")]),t._v(" 属性。")]),t._v(" "),a("li",[t._v("检索并比较 "),a("code",[t._v("ClickCounter")]),t._v(" 的子组件和 "),a("code",[t._v("props")]),t._v(" 。")]),t._v(" "),a("li",[t._v("更新 "),a("code",[t._v("span")]),t._v(" 的 "),a("code",[t._v("props")]),t._v(" 。")])]),t._v(" "),a("p",[a("strong",[t._v("协调（reconciliation）")]),t._v(" 期间也进行了其他活动，包括调用"),a("a",{attrs:{href:"https://reactjs.org/docs/react-component.html#updating",target:"_blank",rel:"noopener noreferrer"}},[t._v("生命周期方法"),a("OutboundLink")],1),t._v("或更新 "),a("a",{attrs:{href:"https://reactjs.org/docs/refs-and-the-dom.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("refs"),a("OutboundLink")],1),t._v("。"),a("strong",[t._v("这些活动在 Fiber 架构中被统称为 work。")]),t._v(" "),a("code",[t._v("work")]),t._v(" 的 "),a("code",[t._v("type")]),t._v(" 通常取决于 React 元素的类型。")]),t._v(" "),a("p",[t._v("例如，对一个类组件而言，React 需要创建一个实例，而函数组件则无需执行此操作。")]),t._v(" "),a("p",[t._v("React 的有许多类型的 elements，例如类组件和函数组件， "),a("code",[t._v("host")]),t._v(" 组件（DOM节点）等。")]),t._v(" "),a("p",[t._v("React 元素的类型由传入到 "),a("code",[t._v("createElement")]),t._v(" 的第一个参数决定，通常在 "),a("code",[t._v("render")]),t._v(" 方法中使用此函数来创建元素。")]),t._v(" "),a("p",[t._v("在我们开始探索活动细节和主要的 "),a("code",[t._v("fiber")]),t._v(" 算法之前，让我们先熟悉 React 内部使用的数据结构。")]),t._v(" "),a("h2",{attrs:{id:"从-react-元素到-fiber-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从-react-元素到-fiber-节点"}},[t._v("#")]),t._v(" 从 React 元素到 Fiber 节点")]),t._v(" "),a("p",[t._v("React 中的每个组件都有一个 "),a("code",[t._v("UI")]),t._v(" 表示，我们可以称之为从 "),a("code",[t._v("render")]),t._v(" 方法返回的一个视图或模板。")]),t._v(" "),a("p",[t._v("这是 "),a("code",[t._v("ClickCounter")]),t._v(" 组件的模板：")]),t._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onClick")]),a("span",{pre:!0,attrs:{class:"token script language-javascript"}},[a("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onClick"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("Update counter")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"react-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-元素"}},[t._v("#")]),t._v(" React 元素")]),t._v(" "),a("p",[t._v("模板通过JSX编译器后，将得到一堆React元素。下面是真正从 React 组件的 render 方法返回的结果（并不是 HTML）。")]),t._v(" "),a("p",[t._v("由于我们不需要使用JSX，因此可以将 "),a("code",[t._v("ClickCounter")]),t._v(" 组件的 "),a("code",[t._v("render")]),t._v(" 方法重写：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClickCounter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    onClick"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onClick\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Update counter'")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[a("code",[t._v("render")]),t._v(" 方法调用的 "),a("code",[t._v("React.createElement")]),t._v(" 会产生两个数据结构。")]),t._v(" "),a("p",[t._v("像这样：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Update counter'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onClick")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        $$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("可以看到 React 将属性 "),a("code",[t._v("$$typeof")]),t._v(" 添加到这些对象中，作为 React 元素的唯一标识。")]),t._v(" "),a("p",[t._v("而且有 "),a("code",[t._v("type")]),t._v(" 、 "),a("code",[t._v("key")]),t._v(" 、和 "),a("code",[t._v("props")]),t._v(" 这些属性对 React 元素进行描述。")]),t._v(" "),a("p",[t._v("它们的值来源于传递给 "),a("code",[t._v("react.createElement")]),t._v(" 函数的参数。")]),t._v(" "),a("p",[t._v("请关注 React 是如何将文本内容表示为 "),a("code",[t._v("span")]),t._v(" 和 "),a("code",[t._v("button")]),t._v(" 的子节点的。")]),t._v(" "),a("p",[t._v("以及如何把 click 的 handler 描述为 button 里 "),a("code",[t._v("props")]),t._v(" 的一部分。")]),t._v(" "),a("p",[t._v("React 元素还有其他的很多字段，比如 "),a("code",[t._v("ref")]),t._v(" ，但是超出本文范围不作展开。")]),t._v(" "),a("p",[a("code",[t._v("ClickCounter")]),t._v(" 对应的 React 元素不存在任何 "),a("code",[t._v("props")]),t._v(" 或 "),a("code",[t._v("key")]),t._v(" ：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("react"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    props"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ClickCounter\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"fiber-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-nodes"}},[t._v("#")]),t._v(" Fiber nodes")]),t._v(" "),a("p",[t._v("在"),a("strong",[t._v("协调（reconciliation）")]),t._v(" 过程中，从 "),a("code",[t._v("render")]),t._v(" 方法返回的每个 React element 的数据将被合并到 "),a("code",[t._v("Fiber")]),t._v(" 节点树中，每个 React element 都有一个对应的 "),a("code",[t._v("Fiber")]),t._v(" 节点。")]),t._v(" "),a("p",[t._v("与 React 元素不同， "),a("code",[t._v("Fiber")]),t._v(" 并不是每次渲染都会重新创建，它们是用来保存组件 state 和 "),a("code",[t._v("DOM")]),t._v(" 的可变数据结构。")]),t._v(" "),a("p",[t._v("之前聊到过，框架执行的活动，取决于 React 元素的类型。")]),t._v(" "),a("p",[t._v("在我们的示例中，对于类组件 "),a("code",[t._v("ClickCounter")]),t._v(" 而言，它调用生命周期方法和 "),a("code",[t._v("render")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("而对于 "),a("code",[t._v("span")]),t._v(" host 组件（dom节点），执行 DOM 更新。")]),t._v(" "),a("p",[t._v("因此，每个 React 元素都被转换成 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("相应类型"),a("OutboundLink")],1),t._v("的 "),a("code",[t._v("Fiber")]),t._v(" 节点，描述需要完成的工作。")]),t._v(" "),a("p",[t._v("[译者注：这里的类型是 WorkTag 每个类型是一个固定的数字，例如函数式组件对应的是 0 而类组件对应的是 1]")]),t._v(" "),a("p",[a("strong",[t._v("你可以将 "),a("code",[t._v("Fiber")]),t._v(" 想象成一种数据结构，用来表示一些要做的工作，或者换句话说，一个工作单元。 "),a("code",[t._v("Fiber")]),t._v(" 的架构还提供了一种方便的方式来跟踪、调度、暂停和中止工作。")])]),t._v(" "),a("p",[t._v("当 React 元素第一次转换为 fiber 节点时，React在 "),a("code",[t._v("createFiberFromTypeAndProps")]),t._v(" 函数中使用元素的数据来创建一个 "),a("code",[t._v("Fiber")]),t._v(" 。")]),t._v(" "),a("p",[t._v("在后续更新中，React 复用了fiber节点，这意味着它只会根据数据发生改变的部分来更新对应的 fiber 节点中的属性。")]),t._v(" "),a("p",[t._v("如果从 "),a("code",[t._v("render")]),t._v(" 方法不再返回相应的 React 元素，React 可能还需要根据 "),a("code",[t._v("key")]),t._v(" 属性来移动或删除层级结构中的 fiber 节点。")]),t._v(" "),a("blockquote",[a("p",[t._v("深入 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239",target:"_blank",rel:"noopener noreferrer"}},[t._v("ChildReconciler"),a("OutboundLink")],1),t._v(" 函数，了解所有活动的列表以及 React 为现有 fiber 节点执行的相应函数。")])]),t._v(" "),a("p",[t._v("因为 React 为每个 React 元素创建一个 fiber 节点，并且我们已经有一个这些元素组成的树，所以我们将会得到一个fiber 节点树。这样的情况下，我们简单的示例看起来就像这样：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber03.png",alt:"img"}})]),t._v(" "),a("p",[t._v("所有 "),a("code",[t._v("fiber")]),t._v(" 节点使用这些属性： "),a("code",[t._v("child")]),t._v(" 、 "),a("code",[t._v("sibling")]),t._v(" 和 "),a("code",[t._v("return")]),t._v(" 通过链接列表的形式连接在一起。")]),t._v(" "),a("p",[t._v("如果你想知道更多关于为什么要这样的更多信息，可以阅读这篇文章 "),a("a",{attrs:{href:"https://medium.com/dailyjs/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7",target:"_blank",rel:"noopener noreferrer"}},[t._v("The how and why on React’s usage of linked list in Fiber"),a("OutboundLink")],1),t._v(" (如果你还没读过的话)")]),t._v(" "),a("h3",{attrs:{id:"current-树和-workinprogress-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-树和-workinprogress-树"}},[t._v("#")]),t._v(" Current 树和 workInProgress 树")]),t._v(" "),a("p",[t._v("在第一次渲染之后，React 最终得到了一棵反映渲染出 UI 的应用程序 state 的 fiber 树。")]),t._v(" "),a("p",[t._v("这棵树通常被称为 "),a("code",[t._v("current")]),t._v(" 树。当 React 开始处理更新时，它会构建一棵所谓的 "),a("code",[t._v("workInProgress")]),t._v(" 树，反映将来要刷新到屏幕的 state。")]),t._v(" "),a("p",[t._v("所有的 work 都是在 "),a("code",[t._v("workInProgress")]),t._v(" 树的 fibler 上进行的。当 React 遍历 "),a("code",[t._v("current")]),t._v(" 树时，它为每个现有的光纤节点创建一个替代节点。")]),t._v(" "),a("p",[t._v("这些节点构成了 "),a("code",[t._v("workInProgress")]),t._v(" 树。 它们用 render 方法返回的 React 元素的数据创建。")]),t._v(" "),a("p",[t._v("一旦处理完所有 update 并完成所有相关 work，React 将一棵准备好的备用树刷新到屏幕。")]),t._v(" "),a("p",[t._v("一旦在屏幕上渲染 "),a("code",[t._v("workInProgress")]),t._v(" 树，它就成为了 "),a("code",[t._v("current")]),t._v(" 树。")]),t._v(" "),a("p",[a("strong",[t._v("React 的核心原则之一 consistency （一致性）。")])]),t._v(" "),a("p",[t._v("React总是一次性更新 "),a("code",[t._v("DOM")]),t._v(" （它不会显示部分结果）。 "),a("code",[t._v("workInProgress")]),t._v(" 树作为用户看不到的 “草稿”，以便 React 可以在处理所有组件之后，再将它们的更新刷新到屏幕上。")]),t._v(" "),a("p",[t._v("在源代码中，你会看到许多函数从 "),a("code",[t._v("current")]),t._v(" 树和 "),a("code",[t._v("workInProgress")]),t._v(" 树中获取 "),a("code",[t._v("fiber")]),t._v(" 节点。下面是一个这样的函数的示例：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostComponent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" renderExpirationTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("每个 fiber 节点都在 "),a("strong",[t._v("alternate")]),t._v(" 字段中保留了在另一棵树上其对应节点的引用。 "),a("code",[t._v("current")]),t._v(" 树中的一个节点指向 "),a("code",[t._v("workInProgress")]),t._v(" 树中的节点，反之亦然。")]),t._v(" "),a("h3",{attrs:{id:"side-effects-副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#side-effects-副作用"}},[t._v("#")]),t._v(" Side-effects 副作用")]),t._v(" "),a("p",[t._v("我们可以将 React 中的组件视为使用 state 和 props 来计算 UI如何呈现的函数。")]),t._v(" "),a("p",[t._v("除此之外的所有活动，例如，改变DOM 或调用生命周期方法，都应被视为 Side-effects ，或者简单地视为一种 effect。")]),t._v(" "),a("p",[t._v("在 "),a("a",{attrs:{href:"https://reactjs.org/docs/hooks-overview.html#%EF%B8%8F-effect-hook",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),a("OutboundLink")],1),t._v("里也有提及。")]),t._v(" "),a("blockquote",[a("p",[t._v("你之前可能已经在 React 组件中执行过获取数据、订阅或者 "),a("strong",[t._v("手动修改 DOM")]),t._v("。我们统一把这些操作称为 “Side-effects”，或者简称为 “effect”。（因为它们会影响其他组件，并且在渲染期间无法完成。） ”")])]),t._v(" "),a("p",[t._v("你可以看到大多数 state 和 props 的更新将如何导致 side-effects 。")]),t._v(" "),a("p",[t._v("而且，由于执行 effect 是一种 work，fiber 节点是一种跟踪更新效果的便捷机制。")]),t._v(" "),a("p",[t._v("每个fiber 节点都可以包含与其相关的 effect，在 "),a("code",[t._v("effectTag")]),t._v(" 字段中。")]),t._v(" "),a("p",[t._v("因此，Fiber中的 effect 基本上定义了实例在处理更新后需要完成的 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("work"),a("OutboundLink")],1),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("对于 host 组件（dom元素），包括添加、更新或删除元素。")]),t._v(" "),a("li",[t._v("对于类组件，React 可能需要更新 "),a("code",[t._v("refs")]),t._v(" 并调用 "),a("code",[t._v("componentDidMount")]),t._v(" 和 "),a("code",[t._v("componentDiddUpdate")]),t._v(" 生命周期方法。")]),t._v(" "),a("li",[t._v("还有其他 effect 对应于其他类型的 fiber。")])]),t._v(" "),a("h3",{attrs:{id:"effects-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#effects-链表"}},[t._v("#")]),t._v(" Effects 链表")]),t._v(" "),a("p",[t._v("React 执行 update 非常快，它采用了一些有趣的技术来达到这种性能水平：")]),t._v(" "),a("p",[a("strong",[t._v("建立具有 effect 的 fiber 节点的线性链表以实现快速迭代是其中之一")]),t._v("。")]),t._v(" "),a("p",[t._v("迭代线性链表比树快得多，不需要花时间在没有 side-effects 的节点上。")]),t._v(" "),a("p",[t._v("该链表的目的是，标记具有 DOM 更新或与其他 effect 关联的的节点。")]),t._v(" "),a("p",[t._v("它是 "),a("code",[t._v("finishedWork")]),t._v(" 树的子集，并且使用 "),a("code",[t._v("nextEffect")]),t._v(" 属性而不是 "),a("code",[t._v("current")]),t._v(" 树和 "),a("code",[t._v("workInProgress")]),t._v(" 树中的 "),a("code",[t._v("child")]),t._v(" 属性进行链接。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://medium.com/u/a3a8af6addc1?source=post_page---------------------------",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dan Abramov"),a("OutboundLink")],1),t._v(' 提出了一个 effect 链表的类比，把它想象成一棵圣诞树，"圣诞灯"把所有有效的节点绑在一起。')]),t._v(" "),a("p",[t._v("为了将其可视化，让我们想象下面的 "),a("code",[t._v("fiber")]),t._v(" 节点树：")]),t._v(" "),a("p",[t._v("其中，高亮的节点有一些 work 要做，例如，我们的更新导致 "),a("code",[t._v("c2")]),t._v(" 插入到 DOM 中。")]),t._v(" "),a("p",[a("code",[t._v("d2")]),t._v(" 和 "),a("code",[t._v("c1")]),t._v(" 更改属性， "),a("code",[t._v("B2")]),t._v(" 触发生命周期方法。")]),t._v(" "),a("p",[t._v("effect 链表将它们链接在一起，以便 React 可以稍后跳过其他节点：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber04.png",alt:"img"}}),t._v(")")]),t._v(" "),a("p",[t._v("可以看到，具有 effect 的节点是如何链接在一起的。")]),t._v(" "),a("p",[t._v("当遍历节点时，React 使用 "),a("code",[t._v("firstEffect")]),t._v(" 指针来确定列表的起始位置。所以上面的图表可以表示为这样的线性链表：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber05.png",alt:"img"}}),t._v(")")]),t._v(" "),a("h3",{attrs:{id:"fiber-树的根节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-树的根节点"}},[t._v("#")]),t._v(" Fiber 树的根节点")]),t._v(" "),a("p",[t._v("每个 React 应用程序都有一个或多个充当容器 DOM 元素。在我们的例子中它是 ID 为 "),a("code",[t._v("container")]),t._v(" 的 "),a("code",[t._v("div")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" domContainer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#container'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ClickCounter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" domContainer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("React为每个容器创建一个 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31",target:"_blank",rel:"noopener noreferrer"}},[t._v("fiber root "),a("OutboundLink")],1),t._v(" 对象。你可以使用 DOM 元素的引用来访问它：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fiberRoot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#container'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_reactRootContainer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_internalRoot\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这个 fiber root 是 React 保存对 fiber 树的引用的地方。存储在 fiber root 的 "),a("code",[t._v("currrent")]),t._v(" 属性中：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hostRootFiberNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiberRoot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Fiber 树以 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34",target:"_blank",rel:"noopener noreferrer"}},[t._v("特殊类型"),a("OutboundLink")],1),t._v(" 的 fiber 节点 "),a("code",[t._v("HostRoot")]),t._v(" 开始。")]),t._v(" "),a("p",[t._v("它是在内部创建的，并充当最顶层组件的父级。")]),t._v(" "),a("p",[a("code",[t._v("HostRoot")]),t._v(" fiber 节点通过 "),a("code",[t._v("stateNode")]),t._v(" 属性链接到 "),a("code",[t._v("FiberRoot")]),t._v(" ：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("fiberRoot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" fiberRoot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("你可以通过 fiber root 访问最顶层的 "),a("code",[t._v("HostRoot")]),t._v(" fiber 节点来探索 fiber tree。")]),t._v(" "),a("p",[t._v("或者，你可以从组件实例中获取单个 fiber 节点，像这样：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("compInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_reactInternalFiber\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"fiber-节点结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-节点结构"}},[t._v("#")]),t._v(" Fiber 节点结构")]),t._v(" "),a("p",[t._v("来看看为 "),a("code",[t._v("ClickCounter")]),t._v(" 组件创建的 fiber 节点的结构：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stateNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClickCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ClickCounter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    alternate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    updateQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    memoizedState"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    pendingProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    memoizedProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    effectTag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    nextEffect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("以及 "),a("code",[t._v("span")]),t._v(" DOM 元素：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stateNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HTMLSpanElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"span"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    alternate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    updateQueue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    memoizedState"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    pendingProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    memoizedProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    effectTag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    nextEffect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("fiber 节点上有很多字段。在前面已经描述过字段 "),a("code",[t._v("alternate")]),t._v(" 、 "),a("code",[t._v("effectTag")]),t._v(" 和 "),a("code",[t._v("nextEfect")]),t._v(" 的用途。现在看看其他的字段的用途。")]),t._v(" "),a("h3",{attrs:{id:"statenode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statenode"}},[t._v("#")]),t._v(" stateNode")]),t._v(" "),a("p",[t._v("保存对类组件实例，DOM 节点或与 fiber 节点关联的其他 React 元素类型的引用。 一般来说，此属性用于保存与 fiber 关联的 local state。")]),t._v(" "),a("h3",{attrs:{id:"type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" type")]),t._v(" "),a("p",[t._v("定义与此 fiber 关联的函数或类。 对于类组件，它指向构造函数，对于 DOM 元素，它指定 HTML 标记。")]),t._v(" "),a("p",[t._v("我把这个字段理解为 fiber 节点与哪些元素相关。")]),t._v(" "),a("h3",{attrs:{id:"tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),a("p",[t._v("定义 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("fiber类型"),a("OutboundLink")],1),t._v("，在 reconciliation 算法中使用它来确定需要完成的工作。")]),t._v(" "),a("p",[t._v("就像前面提到的，work 取决于 React 元素的类型。 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L414",target:"_blank",rel:"noopener noreferrer"}},[t._v("createFiberFromTypeAndProps函数 "),a("OutboundLink")],1),t._v("将 React 元素映射到相应的 fiber 节点类型。")]),t._v(" "),a("p",[t._v("在我们的应用中， "),a("code",[t._v("ClickCounter")]),t._v(" 组件的 tag 属性是 1 ，它表示 "),a("code",[t._v("类组件")]),t._v(" ；")]),t._v(" "),a("p",[t._v("而 "),a("code",[t._v("span")]),t._v(" 元素的 tag 属性是 5 表示 "),a("code",[t._v("HostComponent(宿主组件)")]),t._v(" 。")]),t._v(" "),a("h3",{attrs:{id:"updatequeue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updatequeue"}},[t._v("#")]),t._v(" updateQueue")]),t._v(" "),a("p",[t._v("state 更新，回调以及 DOM 更新的队列。")]),t._v(" "),a("h3",{attrs:{id:"memoizedstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memoizedstate"}},[t._v("#")]),t._v(" memoizedState")]),t._v(" "),a("p",[t._v("用于创建输出的 fiber 的状态。 处理更新时，它反映了当前渲染在屏幕上的内容的 state。")]),t._v(" "),a("h3",{attrs:{id:"memoizedprops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memoizedprops"}},[t._v("#")]),t._v(" memoizedProps")]),t._v(" "),a("p",[t._v("在上一次渲染期间用于创建输出的 fiber 的 props 。")]),t._v(" "),a("h3",{attrs:{id:"pendingprops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pendingprops"}},[t._v("#")]),t._v(" pendingProps")]),t._v(" "),a("p",[t._v("在 React element 的新数据中更新并且需要应用于子组件或 DOM 元素的 props。(子组件或者 DOM 中将要改变的 props)")]),t._v(" "),a("h3",{attrs:{id:"key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[t._v("#")]),t._v(" key")]),t._v(" "),a("p",[t._v("唯一标识符，当具有一组 children 的时候，用来帮助 React 找出哪些项已更改，已添加或已从列表中删除。 与"),a("a",{attrs:{href:"https://reactjs.org/docs/lists-and-keys.html#keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("所说的React的 “列表和key” 功能有关")]),t._v(" "),a("p",[t._v("你可以在"),a("a",{attrs:{href:"https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("找到 fiber节点的完整结构。 在上面的说明中，省略了很多字段。")]),t._v(" "),a("p",[t._v("尤其是跳过了构成树结构的 "),a("code",[t._v("child")]),t._v(" 指针， "),a("code",[t._v("sibling")]),t._v(" 指针和 "),a("code",[t._v("return")]),t._v(" 指针。")]),t._v(" "),a("p",[t._v("[这些结构我在 "),a("a",{attrs:{href:"https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("上一篇文章 "),a("OutboundLink")],1),t._v("中有所描述。 ]")]),t._v(" "),a("p",[t._v("以及专门针对 "),a("code",[t._v("Scheduler")]),t._v(" 的 "),a("code",[t._v("expirationTime")]),t._v(" ， "),a("code",[t._v("childExpirationTime")]),t._v(" 和 "),a("code",[t._v("mode")]),t._v(" 等字段类别。")]),t._v(" "),a("h2",{attrs:{id:"通用算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用算法"}},[t._v("#")]),t._v(" 通用算法")]),t._v(" "),a("p",[t._v("React 执行工作分为两个主要阶段："),a("strong",[t._v("render")]),t._v(" 和 "),a("strong",[t._v("commit")]),t._v("。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("render")]),t._v(" 阶段，React 通过 "),a("code",[t._v("setState")]),t._v(" 或 "),a("code",[t._v("React.render")]),t._v(" 有计划的将更新应用于组件，并找出需要在 UI 中更新的内容。")]),t._v(" "),a("p",[t._v("如果是初始渲染，React 会为 "),a("code",[t._v("render")]),t._v(" 方法返回的每个元素创建一个新的 fiber 节点。在后续更新中，现有 React 元素的 fiber 节点将被复用和更新。")]),t._v(" "),a("p",[t._v("**该阶段的执行的结果是带有 effect 的 fiber 节点树。**effect 描述了在下一个 "),a("code",[t._v("commit")]),t._v(" 阶段需要完成的工作。")]),t._v(" "),a("p",[t._v("当前阶段，React 会绘制一棵标记有 effect 的 fiber 树，并将其应用于实例。它遍历 effect 链表并执行 DOM 更新和用户可见的其他更改。")]),t._v(" "),a("p",[a("strong",[t._v("理解 "),a("code",[t._v("render")]),t._v(" 阶段的工作可以异步执行，对我们而言非常重要")]),t._v("。React 可以根据可用时间来处理一个或多个 fiber 节点，然后中断并且暂存已完成的工作，转去处理某些事件，接着它再从它停止的地方继续执行。")]),t._v(" "),a("p",[t._v("但有时候，它可能需要丢弃完成的工作然后重新从头开始。")]),t._v(" "),a("p",[t._v("由于在此阶段执行的工作不会导致任何用户可见的更改（例如DOM更新），所以才可以实现这些暂停。")]),t._v(" "),a("p",[t._v("(译者注：因为 React 的一致性，所以不可能给用户呈现渲染到一半的组件，这样意味着这个阶段执行的所有 work 都是用户不可见的。)")]),t._v(" "),a("p",[a("strong",[t._v("与之相反的是，后续的 "),a("code",[t._v("commit")]),t._v(" 阶段始终是同步的")]),t._v("。这是因为在此阶段执行的工作会导致用户可见的更改，例如 DOM 更新。这就是为什么 React 需要一次性完成这些操作。")]),t._v(" "),a("p",[t._v("调用生命周期方法是 React 的工作之一。一些方法是在 "),a("code",[t._v("render")]),t._v(" 阶段调用的，而另一些方法则是在 "),a("code",[t._v("commit")]),t._v(" 阶段调用。")]),t._v(" "),a("p",[t._v("这是在第一个 "),a("code",[t._v("render")]),t._v(" 阶段工作时，调用的生命周期列表：")]),t._v(" "),a("ul",[a("li",[t._v("[UNSAFE_]componentWillMount (deprecated)")]),t._v(" "),a("li",[t._v("[UNSAFE_]componentWillReceiveProps (deprecated)")]),t._v(" "),a("li",[t._v("getDerivedStateFromProps")]),t._v(" "),a("li",[t._v("shouldComponentUpdate")]),t._v(" "),a("li",[t._v("[UNSAFE_]componentWillUpdate (deprecated)")]),t._v(" "),a("li",[t._v("render")])]),t._v(" "),a("p",[t._v("如你所见，在16.3版本中，在 "),a("code",[t._v("render")]),t._v(" 阶段执行的一些遗留的生命周期方法被标记为 "),a("code",[t._v("UNSAFE")]),t._v(" 。")]),t._v(" "),a("p",[t._v("（译者注：这里的 “unsafe” 不是指安全性，而是表示使用这些生命周期的代码在 React 的未来版本中更有可能出现 bug，尤其是在启用异步渲染之后。参考"),a("a",{attrs:{href:"https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1),t._v("）")]),t._v(" "),a("p",[t._v("现在在文档中它们被称为遗留 (legacy lifecycles) 生命周期。将在以后的 16.x 发行版中弃用，而没有 "),a("code",[t._v("UNSAFE")]),t._v(" 前缀的对应版本将在 17.0版本中移除。")]),t._v(" "),a("p",[t._v("你可以在"),a("a",{attrs:{href:"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("详细的了解这些更改，以及建议的迁移路径。")]),t._v(" "),a("p",[t._v("你是否对此感到好奇？")]),t._v(" "),a("p",[t._v("好吧，我们刚刚了解到，由于 "),a("code",[t._v("render")]),t._v(" 阶段不会产生诸如 DOM 更新之类的 effect，因此 React 可以异步处理组件的异步更新（甚至可能在多个线程中进行）。")]),t._v(" "),a("p",[t._v("但是，标有 "),a("code",[t._v("UNSAFE")]),t._v(" 的生命周期经常被误解和巧妙地滥用。开发人员倾向于将带有 effect 的代码放在这些方法中，这可能会导致新的异步渲染方法出现问题。")]),t._v(" "),a("p",[t._v("Although only their counterparts without the "),a("code",[t._v("UNSAFE")]),t._v(" prefix will be removed, they are still likely to cause issues in the upcoming Concurrent Mode (which you can opt out of).")]),t._v(" "),a("p",[t._v("(译者注：这一段并不是忘记翻译，我对作者描述的内容还有疑问，已经在沟通中，后续会同步到 frontendwingman 的章节中)")]),t._v(" "),a("p",[t._v("接下来罗列的生命周期方法是在第二个 "),a("code",[t._v("commit")]),t._v(" 阶段执行的：")]),t._v(" "),a("ul",[a("li",[t._v("getSnapshotBeforeUpdate")]),t._v(" "),a("li",[t._v("componentDidMount")]),t._v(" "),a("li",[t._v("componentDidUpdate")]),t._v(" "),a("li",[t._v("componentWillUnmount")])]),t._v(" "),a("p",[t._v("因为这些方法都在同步的 "),a("code",[t._v("commit")]),t._v(" 阶段执行，他们可能会包含 side-effects ，并且操作DOM。")]),t._v(" "),a("p",[t._v("好的，现在我们拥有了背景之后，让我们继续深入研究，用于遍历树和执行 work 的通用算法 。")]),t._v(" "),a("h3",{attrs:{id:"render-阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#render-阶段"}},[t._v("#")]),t._v(" Render 阶段")]),t._v(" "),a("p",[t._v("协调算法始终使 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132",target:"_blank",rel:"noopener noreferrer"}},[t._v("renderRoot"),a("OutboundLink")],1),t._v(" 函数从最顶层的 "),a("code",[t._v("HostRoot")]),t._v(" fiber 节点开始。 但是，React 会退出（跳过）已经处理的 fiber 节点，直到找到工作未完成的节点。")]),t._v(" "),a("p",[t._v("例如，如果你在组件树的深处调用 "),a("code",[t._v("setState")]),t._v(" ，React将从顶部开始，但会快速跳过父级，直到它到达调用了 "),a("code",[t._v("setState")]),t._v(" 方法的组件。")]),t._v(" "),a("h3",{attrs:{id:"workloop-的主要步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workloop-的主要步骤"}},[t._v("#")]),t._v(" WorkLoop 的主要步骤")]),t._v(" "),a("p",[t._v("所有的 fiber 节点都会在 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136",target:"_blank",rel:"noopener noreferrer"}},[t._v("work loop"),a("OutboundLink")],1),t._v(". 中进行处理。如下是该循环的同步部分的实现：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("isYieldy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isYieldy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            nextUnitOfWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("在上面的代码中， "),a("code",[t._v("nextUnitOfWork")]),t._v(" 持有对 "),a("code",[t._v("workInProgress")]),t._v(" 树中 fiber 节点的引用。")]),t._v(" "),a("p",[t._v("该节点需要完成一些工作。 当 React 遍历 Fibers 树时，它通过此变量来判断是否还有其他未完成的 fiber 节点。")]),t._v(" "),a("p",[t._v("处理完当前光纤后，该变量将包含对树中下一个光纤节点的引用或为“ null”。 在这种情况下，React退出工作循环并准备提交更改。")]),t._v(" "),a("p",[t._v("处理过当前 fiber 后，变量将持有树中下一个 fiber 节点的引用或 "),a("code",[t._v("null")]),t._v(" 。在为 "),a("code",[t._v("null")]),t._v(" 的情况下，React 退出工作循环并准备好提交更改。")]),t._v(" "),a("p",[a("strong",[t._v("有四个主要函数用于遍历树并初始化或完成工作：")])]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056",target:"_blank",rel:"noopener noreferrer"}},[t._v("performUnitOfWork"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489",target:"_blank",rel:"noopener noreferrer"}},[t._v("beginWork"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879",target:"_blank",rel:"noopener noreferrer"}},[t._v("completeUnitOfWork"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532",target:"_blank",rel:"noopener noreferrer"}},[t._v("completeWork"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("为了演示他们的使用方法，请看以下遍历 fiber 树的动画。我演示中使用了这些函数的简化实现。")]),t._v(" "),a("p",[t._v("每个函数都需要对一个 fiber 节点进行处理，当 React 顺着树往下遍历时，当前活动的 fiber 节点发生了变化。")]),t._v(" "),a("p",[t._v("图中可以清楚地看到，算法是如何从一个分支转到另一个分支。")]),t._v(" "),a("p",[t._v("在回溯到父节点之前，它首先完成子节点的 work，。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber06.gif",alt:"tmp2"}})]),t._v(" "),a("blockquote",[a("p",[t._v("注意，垂直方向连线表示同级（sibling 兄弟节点），而弯曲的连接表示子级，例如 "),a("code",[t._v("b1")]),t._v(" 没有孩子，而 "),a("code",[t._v("b2")]),t._v(" 有一个孩子 "),a("code",[t._v("c1")]),t._v(" 。")]),t._v(" "),a("p",[t._v("(译者注，图中的树结构，按照正常的从顶到根的顺序排列的话，应该是从左往右看)")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://vimeo.com/302222454",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里 "),a("OutboundLink")],1),t._v("是视频的链接，你可以暂停播放并检查当前节点和函数状态。")]),t._v(" "),a("p",[t._v("从概念上讲，你可以将 “开始 (begin)” 视为 “进入 (stepping into)” 组件，而将“完成 (complete)” 视为 “离开 (stepping out)” 组件。")]),t._v(" "),a("p",[t._v("当我解释这些功能时，你也可以在 "),a("a",{attrs:{href:"https://stackblitz.com/edit/js-ntqfil?file=index.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 体验示例和实现。")]),t._v(" "),a("p",[t._v("我们从 "),a("code",[t._v("performUnitOfWork")]),t._v(" 和 "),a("code",[t._v("beginWork")]),t._v(" 开始：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("workInProgress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("workInProgress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'work performed for '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[a("code",[t._v("performUnitOfWork")]),t._v(" 函数从 "),a("code",[t._v("workInProgress")]),t._v(" 树接收一个 fiber 节点，并通过调用 "),a("code",[t._v("beginWork")]),t._v(" 开始工作，此函数将启动 fiber 需要执行的所有活动。")]),t._v(" "),a("p",[t._v("出于演示的目的，我们只打印出 fiber 节点的名称表示 work 已经完成。")]),t._v(" "),a("p",[t._v("**函数 "),a("code",[t._v("beginWork")]),t._v(" 总是返回指向在循环中处理的下一个 child 的指针，或返回 "),a("code",[t._v("null")]),t._v(" **")]),t._v(" "),a("p",[t._v("如果下一个 child存在，它将被赋值给 "),a("code",[t._v("workLoop")]),t._v(" 函数中的变量 "),a("code",[t._v("nextUnitOfWork")]),t._v(" 。")]),t._v(" "),a("p",[t._v("然而，如果不存在，React 就知道自己到达了分支的末尾，因此它可以完成当前节点。")]),t._v(" "),a("p",[t._v("**一旦节点完成，它将需要为同层的其他节点( siblings )执行工作，并在完成后回溯到父节点。**这些都在 "),a("code",[t._v("completeUnitOfWork")]),t._v(" 函数中完成：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("workInProgress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" returnFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" siblingFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        nextUnitOfWork "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siblingFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If there is a sibling, return it")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to perform work for this sibling")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" siblingFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If there's no more work in this returnFiber,")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// continue the loop to complete the parent.")]),t._v("\n            workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We've reached the root.")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("workInProgress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'work completed for '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br")])]),a("p",[t._v("从实现中可以看出， "),a("code",[t._v("performUnitOfWork")]),t._v(" 和 "),a("code",[t._v("completeUnitOfWork")]),t._v(" 主要用于迭代目的，而主要活动则在 "),a("code",[t._v("beginWork")]),t._v(" 和 "),a("code",[t._v("completeWork")]),t._v(" 函数中进行。")]),t._v(" "),a("p",[t._v("该函数的核心是一个很大的 "),a("code",[t._v("while")]),t._v(" 循环。")]),t._v(" "),a("p",[t._v("当一个 "),a("code",[t._v("workInProgress")]),t._v(" 节点没有子节点时，React进入这个函数。完成当前 fiber 节点的工作后，它会检查是否存在同级。")]),t._v(" "),a("p",[t._v("如果找到，React 退出函数并返回指向同级的指针。返回的指针将被赋值给 "),a("code",[t._v("nextUnitOfWork")]),t._v(" 变量，React将从同级节点开始为分支执行工作。")]),t._v(" "),a("p",[t._v("需要重点理解的是，React 目前仅完成了之前的同级节点 ( siblings ) 的工作。尚未完成父节点的工作。")]),t._v(" "),a("p",[a("strong",[t._v("只有子节点的所有分支都完成后，它才能完成父节点和回溯的工作。")])]),t._v(" "),a("p",[t._v("实现中还可以看到， "),a("code",[t._v("performUnitOfWork")]),t._v(" 和 "),a("code",[t._v("completeUnitOfWork")]),t._v(" 两者的主要目的都是迭代，而活动主要发生在 "),a("code",[t._v("beginWork")]),t._v(" 和 "),a("code",[t._v("completeWork")]),t._v(" 函数中。")]),t._v(" "),a("p",[t._v("在本系列的后续的文章中，我们将了解React进入 "),a("code",[t._v("beginWork")]),t._v(" 和 "),a("code",[t._v("completeWork")]),t._v(" 函数后， "),a("code",[t._v("ClickCounter")]),t._v(" 组件和 "),a("code",[t._v("span")]),t._v(" 节点会发生什么。")]),t._v(" "),a("h2",{attrs:{id:"commit-阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-阶段"}},[t._v("#")]),t._v(" Commit 阶段")]),t._v(" "),a("p",[t._v("这一阶段从函数 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306",target:"_blank",rel:"noopener noreferrer"}},[t._v("completeRoot"),a("OutboundLink")],1),t._v(" 开始。这也是 React 更新 DOM 并调用预更新 (pre-mutation) / 更新生命周期方法的地方。")]),t._v(" "),a("p",[t._v("当 React 进入这一阶段时，它有 2 棵树和 effect 链表。 第一棵树表现当前在屏幕上呈现的状态。")]),t._v(" "),a("p",[t._v("然后在 "),a("code",[t._v("render")]),t._v(" 阶段构建另一棵备用树。")]),t._v(" "),a("p",[t._v("它在源代码中称为 "),a("code",[t._v("finishedWork")]),t._v(" 或 "),a("code",[t._v("workInProgress")]),t._v(" ，表示将要映射到屏幕上的状态。")]),t._v(" "),a("p",[t._v("此备用树会用类似的方法通过 "),a("code",[t._v("child")]),t._v(" 和 "),a("code",[t._v("sibling")]),t._v(" 指针链接到 current 树。")]),t._v(" "),a("p",[t._v("然后，有一个 effect 链表（它是 "),a("code",[t._v("finishedWork")]),t._v(" 树的节点子集），通过 "),a("code",[t._v("nextEffect")]),t._v(" 指针进行链接。")]),t._v(" "),a("p",[t._v("需要记住的是，effect 链表是 "),a("code",[t._v("render")]),t._v(" 阶段运行的"),a("strong",[t._v("结果")]),t._v("。")]),t._v(" "),a("p",[t._v("render 的最终目的就是确定那些需要插入、更新或删除的节点，以及哪些组件需要调用其生命周期方法。")]),t._v(" "),a("p",[t._v("这正是 effect 链表要告诉我们的，"),a("strong",[t._v("而且它就是在 commit 阶段迭代的节点集。")])]),t._v(" "),a("blockquote",[a("p",[t._v("为了调试，可以通过 fiber root 的 "),a("code",[t._v("current")]),t._v(" 属性访问 "),a("code",[t._v("current")]),t._v(" 树。 可以通过current 树中的 "),a("code",[t._v("HostFiber")]),t._v(" 节点的 "),a("code",[t._v("alternate")]),t._v(" 属性来访问 "),a("code",[t._v("finishedWork")]),t._v(" 树。")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("commit")]),t._v(" 阶段运行的主要函数是"),a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitRoot"),a("OutboundLink")],1),t._v("。基本上，它执行以下操作：")]),t._v(" "),a("ul",[a("li",[t._v("在标记 "),a("code",[t._v("Snapshot")]),t._v(" effect 的节点调用 "),a("code",[t._v("getSnapshotBeforeUpdate")]),t._v(" 生命周期。")]),t._v(" "),a("li",[t._v("在标记 "),a("code",[t._v("Deletion")]),t._v(" effect 的节点调用 "),a("code",[t._v("componentWillUnmount")]),t._v(" 生命周期。")]),t._v(" "),a("li",[t._v("执行 "),a("code",[t._v("DOM")]),t._v(" 的所有插入、更新、删除操作。")]),t._v(" "),a("li",[t._v("将 "),a("code",[t._v("finishedWork")]),t._v(" 树设置为 "),a("code",[t._v("current")]),t._v(" 。")]),t._v(" "),a("li",[t._v("在标记 "),a("code",[t._v("Placement")]),t._v(" effect 的节点调用 "),a("code",[t._v("componentDidMount")]),t._v(" 生命周期。")]),t._v(" "),a("li",[t._v("在标记 "),a("code",[t._v("Update")]),t._v(" effect 的节点调用 "),a("code",[t._v("componentDidUpdate")]),t._v(" 生命周期。")])]),t._v(" "),a("p",[t._v("在调用预更新 (pre-mutation) 方法 "),a("code",[t._v("getSnapshotBeforeUpdate")]),t._v(" 之后，React 提交了树中的所有 side-effect。")]),t._v(" "),a("p",[t._v("分两步走：")]),t._v(" "),a("p",[t._v("第一步，执行所有 DOM（宿主）的插入、更新、删除和 ref 卸载。")]),t._v(" "),a("p",[t._v("然后 React 将 "),a("code",[t._v("finishedWork")]),t._v(" 树赋值给 "),a("code",[t._v("FiberRoot")]),t._v(" 。")]),t._v(" "),a("p",[t._v("将 "),a("code",[t._v("workInProgress")]),t._v(" 树标记为 "),a("code",[t._v("current")]),t._v(" 树。")]),t._v(" "),a("p",[t._v("这些在 commit 阶段的第一波之后完成。")]),t._v(" "),a("p",[t._v("所以在 "),a("code",[t._v("componentWillUnmount")]),t._v(" 期间前一棵树仍然是 current 树。")]),t._v(" "),a("p",[t._v("但这些都发生在第二步之前，所以在 "),a("code",[t._v("componentDidMount/Update")]),t._v(" 期间 finished work 是 "),a("code",[t._v("current")]),t._v(" 。")]),t._v(" "),a("p",[t._v("第二步，React 调用所有其他生命周期方法和 ref 回调。这些方法作为一个单独的过程，使整个树中的所有插入，更新和删除操作均被执行。")]),t._v(" "),a("p",[t._v("这是运行上述步骤的函数的要点：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitRoot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" finishedWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationLifecycles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitAllHostEffects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" finishedWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitAllLifeCycles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("这些子函数中的每一个都实现了一个循环，该循环遍历 effect 链表 并检查 effect 类型。 当发现与函数目的有关的 effect 时，就会执行。")]),t._v(" "),a("h3",{attrs:{id:"预更新生命周期方法-pre-mutation-lifecycle-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#预更新生命周期方法-pre-mutation-lifecycle-methods"}},[t._v("#")]),t._v(" 预更新生命周期方法 Pre-mutation lifecycle methods")]),t._v(" "),a("p",[t._v("例如，下面是在 effect 树上迭代并检查节点是否具有 Snapshot effect 的代码：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationLifecycles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Snapshot"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitBeforeMutationLifeCycles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("对于类组件，这个 effect 意味着调用 "),a("code",[t._v("getSnapshotBeforeUpdate")]),t._v(" 生命周期方法。")]),t._v(" "),a("h3",{attrs:{id:"dom-更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-更新"}},[t._v("#")]),t._v(" DOM 更新")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L376",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitAllHostEffects"),a("OutboundLink")],1),t._v(" 是 React 执行 DOM 更新的函数。该函数基本上定义了节点需要完成的操作类型，并执行这些操作：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitAllHostEffects")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("primaryEffectTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" Placement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitPlacement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" PlacementAndUpdate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitPlacement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" Update"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" Deletion"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitDeletion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("有意思的是，React 调用 "),a("code",[t._v("componentWillUnmount")]),t._v(" 方法作为 "),a("code",[t._v("commitDeletion")]),t._v(" 函数删除过程中的一部分。")]),t._v(" "),a("h3",{attrs:{id:"更新后的生命周期方法-post-mutation-lifecycle-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新后的生命周期方法-post-mutation-lifecycle-methods"}},[t._v("#")]),t._v(" 更新后的生命周期方法 Post-mutation lifecycle methods")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L465",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitAllLifecycles"),a("OutboundLink")],1),t._v(" 是 React 调用余下所有生命周期方法 "),a("code",[t._v("componentDidUpdate")]),t._v(" 和 "),a("code",[t._v("componentDidMount")]),t._v(" 的函数。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("终于完成了。 让我知道你对本文的看法或在评论中提出问题。 "),a("strong",[t._v("查看该系列的下一篇文章 [React中 state 和 props 更新的深入说明]（https://indepth.dev/in-depth-explanation-of-state-and-props-update-in-react/)。")])]),t._v(" "),a("p",[t._v("我还有更多文章，为调度程序，children 协调过程以及 effect 链表 的构建方式提供了深入的解释。 还计划做个视频，展示如何以本文为基础调试应用程序。")])])}),[],!1,null,null,null);s.default=n.exports}}]);