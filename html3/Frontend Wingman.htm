<!DOCTYPE html>
<!-- saved from url=(0087)https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#commit-%E9%98%B6%E6%AE%B5 -->
<html lang="en-US" class=" "><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    
    <title>Frontend Wingman</title>
    
    <link rel="apple-touch-icon" sizes="57x57" href="https://www.frontendwingman.com/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="https://www.frontendwingman.com/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="https://www.frontendwingman.com/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="https://www.frontendwingman.com/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="https://www.frontendwingman.com/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="https://www.frontendwingman.com/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="https://www.frontendwingman.com/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="https://www.frontendwingman.com/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="https://www.frontendwingman.com/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="https://www.frontendwingman.com/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="https://www.frontendwingman.com/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="https://www.frontendwingman.com/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="https://www.frontendwingman.com/favicon-16x16.png">
    
    
    
    
    <link rel="preload" href="./Frontend Wingman_files/0.styles.fdb2afa1.css" as="style"><link rel="preload" href="./Frontend Wingman_files/app.dc619f9d.js" as="script"><link rel="preload" href="./Frontend Wingman_files/3.40763446.js" as="script"><link rel="preload" href="./Frontend Wingman_files/2.482aa177.js" as="script"><link rel="preload" href="./Frontend Wingman_files/39.441210ab.js" as="script"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/10.b4333a85.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/11.7bb5f879.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/12.aa2170ff.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/13.7477b7d4.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/14.b57b4ef4.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/15.22401478.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/16.c7dbe1a6.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/17.445d4b02.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/18.6417b7d7.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/19.9882e8e8.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/20.5d84487d.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/21.a9a8532e.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/22.1c5ff769.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/23.b4d7b2f3.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/24.c806b4ba.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/25.4ab8b6c5.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/26.67556aa7.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/27.f1135049.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/28.25f5e1d8.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/29.a7eb448a.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/30.876b304e.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/31.ad53ff50.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/32.2a3018de.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/33.4715f316.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/34.7a5da642.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/35.1dd25f4b.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/36.caebb2b1.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/37.93c35be5.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/38.ca7f877e.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/4.8df4ed4a.js"><link rel="prefetch" href="./Frontend Wingman_files/40.b5d33382.js"><link rel="prefetch" href="./Frontend Wingman_files/41.b9a9e194.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/42.a9d01364.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/43.69109617.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/5.ef85c977.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/6.ba8d4d2f.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/7.a4ef51aa.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/8.7ea953f7.js"><link rel="prefetch" href="https://www.frontendwingman.com/assets/js/9.12953c1a.js">
    <link rel="stylesheet" href="./Frontend Wingman_files/0.styles.fdb2afa1.css">
  <style type="text/css">.medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}</style><script charset="utf-8" src="./Frontend Wingman_files/39.441210ab.js"></script><script charset="utf-8" src="./Frontend Wingman_files/41.b9a9e194.js"></script><script charset="utf-8" src="./Frontend Wingman_files/40.b5d33382.js"></script><meta name="description" content="Frontend-Wingman JavaScript frontend CSS Vue Chrome React"><meta name="google-site-verification" content="wGpQn9Ds1HDPN5w7sIZ1IqIhpHXZkVTpBwDpKYKL2zM"><meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"><meta name="referrer" content="never"></head>
  <body>
    <div id="app"><div class="theme-container"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="https://www.frontendwingman.com/" class="home-link router-link-active"><!----> <span class="site-name can-hide">Frontend Wingman</span></a> <div class="links" style="max-width: 1381px;"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value="" class="" placeholder=""> <!----></div> <nav class="nav-links can-hide"><div class="nav-item"><a href="https://www.frontendwingman.com/" class="nav-link">
  主页
</a></div><div class="nav-item"><a href="https://www.frontendwingman.com/WhatIsWingman/" class="nav-link">
  什么是 Wingman？
</a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="专题系列" class="dropdown-title"><span class="title">专题系列</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><!----> <a href="https://www.frontendwingman.com/Chrome/" class="nav-link">
  Chrome 调试技巧
</a></li><li class="dropdown-item"><!----> <a href="https://www.frontendwingman.com/React/" class="nav-link router-link-active">
  React 学习指北
</a></li></ul></div></div><div class="nav-item"><a href="https://github.com/dendoink/FrontendWingman" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Github
  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <!----></nav></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><nav class="nav-links"><div class="nav-item"><a href="https://www.frontendwingman.com/" class="nav-link">
  主页
</a></div><div class="nav-item"><a href="https://www.frontendwingman.com/WhatIsWingman/" class="nav-link">
  什么是 Wingman？
</a></div><div class="nav-item"><div class="dropdown-wrapper"><button type="button" aria-label="专题系列" class="dropdown-title"><span class="title">专题系列</span> <span class="arrow right"></span></button> <ul class="nav-dropdown" style="display:none;"><li class="dropdown-item"><!----> <a href="https://www.frontendwingman.com/Chrome/" class="nav-link">
  Chrome 调试技巧
</a></li><li class="dropdown-item"><!----> <a href="https://www.frontendwingman.com/React/" class="nav-link router-link-active">
  React 学习指北
</a></li></ul></div></div><div class="nav-item"><a href="https://github.com/dendoink/FrontendWingman" target="_blank" rel="noopener noreferrer" class="nav-link external">
  Github
  <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></div> <!----></nav>  <ul class="sidebar-links"><li><section class="sidebar-group depth-0"><p class="sidebar-heading open"><span>准备篇</span> <!----></p> <ul class="sidebar-links sidebar-group-items"><li><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html" class="active sidebar-link" aria-current="page">React 核心：深入 Fiber 架构，协调算法概览</a><ul class="sidebar-sub-headers"><li class="sidebar-sub-header"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E5%A3%B0%E6%98%8E" class="sidebar-link">声明</a></li><li class="sidebar-sub-header"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E6%AD%A3%E6%96%87" class="sidebar-link">正文</a></li><li class="sidebar-sub-header"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#setting-the-background" class="sidebar-link">Setting the background</a></li><li class="sidebar-sub-header"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E4%BB%8E-react-%E5%85%83%E7%B4%A0%E5%88%B0-fiber-%E8%8A%82%E7%82%B9" class="sidebar-link">从 React 元素到 Fiber 节点</a></li><li class="sidebar-sub-header"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95" class="sidebar-link">通用算法</a></li><li class="sidebar-sub-header"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#commit-%E9%98%B6%E6%AE%B5" class="active sidebar-link" aria-current="page">Commit 阶段</a></li></ul></li></ul></section></li></ul> </aside> <main data-v-6be89bc8="" class="page"> <div data-v-6be89bc8="" class="theme-default-content content__default"><p><img src="./Frontend Wingman_files/fiber01.png" alt="Inside Fiber: in-depth overview of the new reconciliation algorithm in React" class="medium-zoom-image"></p> <h2 id="声明"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E5%A3%B0%E6%98%8E" class="header-anchor">#</a> 声明</h2> <ul><li><a href="https://indepth.dev/author/maxkoretskyi/" target="_blank" rel="noopener noreferrer">作者：Max Koretskyi<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li><a href="https://indepth.dev/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react/" target="_blank" rel="noopener noreferrer">原文<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li><a href="https://github.com/dendoink" target="_blank" rel="noopener noreferrer">Dendoink 译<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <p>作 React学习指北中，幸得此文，受益匪浅。</p> <p>虽已有中译版，然细读之，察屡有误，故与作者通后更译，此新译之文，与诸君享。</p> <h2 id="正文"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E6%AD%A3%E6%96%87" class="header-anchor">#</a> 正文</h2> <p>深入研究 React 称为 Fiber 的新架构，了解新 reconciliation 算法的两个主要阶段。</p> <p>我们将详细介绍 React如何更新 state，props 和处理 children。</p> <p>React 是一个用于构建用户交互界面的 JavaScript 库，其核心 <a href="https://indepth.dev/what-every-front-end-developer-should-know-about-change-detection-in-angular-and-react/" target="_blank" rel="noopener noreferrer">机制<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 就是跟踪组件的状态变化，并将更新的状态映射到到新的界面。</p> <p>这就是我们在 React 中熟知的 <code>协调</code> 。我们调用 <code>setState</code> ，而框架会检查 <code>state</code> 或 <code>props</code> 是否更新，以及是否在 UI 界面重新渲染组件。</p> <p>React 文档提供了对该机制的<a href="https://reactjs.org/docs/reconciliation.html" target="_blank" rel="noopener noreferrer">高级概述<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> ：</p> <p>“React元素，生命周期方法和 <code>render</code> 方法的作用以及对组件的children所应用的 <code>diffing</code> 算法。从 <code></code>render<code></code> 方法返回的不可变 React 元素树，通常称为<em>虚拟DOM</em>。</p> <p>在早期，这个术语有助于帮助人们理解 React，但也引起了混乱，并且在React文档中不再使用。”</p> <p>在本文中，我将坚持将其称为: React元素树。</p> <p>除了 React 元素树之外，该框架还有一个内部实例树（组件，DOM节点等）用于保持状态。</p> <p>从版本16开始，React 推出了该内部实例树的新实现，以及对其进行管理的算法，代号为 <strong>Fiber</strong>。要了解 <strong>Fiber</strong> 架构带来的优势，请查看 <a href="https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/" target="_blank" rel="noopener noreferrer">React 为何以及如何在 Fiber 中使用链表<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>。</p> <p>这是该系列的第一篇文章，目的是为了让你了解 React 的内部体系结构。</p> <p>在本文中，我会提供与算法有关的重要概念和数据结构的深入概述。 当我们拥有足够的背景知识之后，将开始探索用于遍历和处理 <strong>fiber</strong> 树的算法和主要函数。</p> <p>该系列的下一篇文章将演示React如何使用该算法执行初始渲染和处理 state 和 props 的更新。</p> <p>从那里开始，我们将继续讨论 scheduler 的细节， child reconciliation 过程以及构建 effects list 机制的细节。</p> <p>在这里我会提供一些非常 “高级” 的知识给你，我鼓励你阅读它，以了解Concurrent（并发） React 内部运作背后的魔法。</p> <p>如果有开始为 React 做贡献的打算，那么这一系列文章也会为你提供很好的指导。</p> <p>我是一个 <a href="https://indepth.dev/level-up-your-reverse-engineering-skills/" target="_blank" rel="noopener noreferrer">逆向工程死忠粉<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>，因此在最新版本中将有很多链接到源 16.6.0。</p> <p>肯定要花很多心思，所以如果你没有立刻领会某些内容，不要感到压力。 付出都是值得的。</p> <blockquote><p>请注意，你不需要了解任何使用 React 的内容。 本文是关于 React 的内部工作。</p></blockquote> <h2 id="setting-the-background"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#setting-the-background" class="header-anchor">#</a> Setting the background</h2> <p>我将在整个系列中使用这个简单的应用程序：有一个按钮，点击可以增加屏幕上呈现的数字：</p> <p><img src="./Frontend Wingman_files/fiber02.gif" alt="img" class="medium-zoom-image"></p> <p>代码实现：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ClickCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
            count<span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>
            button key <span class="token operator">=</span> <span class="token string">"1"</span>
            onClick <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick
            <span class="token punctuation">}</span> <span class="token operator">&gt;</span> Update counter <span class="token operator">&lt;</span> <span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>
            span key <span class="token operator">=</span> <span class="token string">"2"</span> <span class="token operator">&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
            <span class="token punctuation">}</span> <span class="token operator">&lt;</span> <span class="token operator">/</span>span<span class="token operator">&gt;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>可以在<a href="https://stackblitz.com/edit/react-t4rdmh" target="_blank" rel="noopener noreferrer">这里<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>把玩这段代码，如你所见，这是一个简单组件，从 <code>render()</code> 方法中返回两个子元素 <code>button</code> 和 <code>span</code> 。</p> <p>当你单击按钮时，组件的状态将被内部的 handler 更新，顺带的，这会导致 <code>span</code> 元素的文本更新。</p> <p>React 在 <strong>协调（reconciliation）</strong> 期间执行各种活动。</p> <p>例如，下面是 React 在简单组件的首次渲染中，以及 state 更新之后，执行的高级操作：</p> <ul><li>更新 <code>ClickCounter</code> 组件中 <code>state</code> 的 <code>count</code> 属性。</li> <li>检索并比较 <code>ClickCounter</code> 的子组件和 <code>props</code> 。</li> <li>更新 <code>span</code> 的 <code>props</code> 。</li></ul> <p><strong>协调（reconciliation）</strong> 期间也进行了其他活动，包括调用<a href="https://reactjs.org/docs/react-component.html#updating" target="_blank" rel="noopener noreferrer">生命周期方法<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>或更新 <a href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener noreferrer">refs<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>。<strong>这些活动在 Fiber 架构中被统称为 work。</strong> <code>work</code> 的 <code>type</code> 通常取决于 React 元素的类型。</p> <p>例如，对一个类组件而言，React 需要创建一个实例，而函数组件则无需执行此操作。</p> <p>React 的有许多类型的 elements，例如类组件和函数组件， <code>host</code> 组件（DOM节点）等。</p> <p>React 元素的类型由传入到 <code>createElement</code> 的第一个参数决定，通常在 <code>render</code> 方法中使用此函数来创建元素。</p> <p>在我们开始探索活动细节和主要的 <code>fiber</code> 算法之前，让我们先熟悉 React 内部使用的数据结构。</p> <h2 id="从-react-元素到-fiber-节点"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E4%BB%8E-react-%E5%85%83%E7%B4%A0%E5%88%B0-fiber-%E8%8A%82%E7%82%B9" class="header-anchor">#</a> 从 React 元素到 Fiber 节点</h2> <p>React 中的每个组件都有一个 <code>UI</code> 表示，我们可以称之为从 <code>render</code> 方法返回的一个视图或模板。</p> <p>这是 <code>ClickCounter</code> 组件的模板：</p> <div class="language-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Update counter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="react-元素"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#react-%E5%85%83%E7%B4%A0" class="header-anchor">#</a> React 元素</h3> <p>模板通过JSX编译器后，将得到一堆React元素。下面是真正从 React 组件的 render 方法返回的结果（并不是 HTML）。</p> <p>由于我们不需要使用JSX，因此可以将 <code>ClickCounter</code> 组件的 <code>render</code> 方法重写：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">ClickCounter</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
                <span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    key<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
                    onClick<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClick
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token string">'Update counter'</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
            React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
                <span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    key<span class="token operator">:</span> <span class="token string">'2'</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
            <span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>render</code> 方法调用的 <code>React.createElement</code> 会产生两个数据结构。</p> <p>像这样：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">{</span>
        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'button'</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">{</span>
            children<span class="token operator">:</span> <span class="token string">'Update counter'</span><span class="token punctuation">,</span>
            <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token operator">...</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">'span'</span><span class="token punctuation">,</span>
        key<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>
        props<span class="token operator">:</span> <span class="token punctuation">{</span>
            children<span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>可以看到 React 将属性 <code>$$typeof</code> 添加到这些对象中，作为 React 元素的唯一标识。</p> <p>而且有 <code>type</code> 、 <code>key</code> 、和 <code>props</code> 这些属性对 React 元素进行描述。</p> <p>它们的值来源于传递给 <code>react.createElement</code> 函数的参数。</p> <p>请关注 React 是如何将文本内容表示为 <code>span</code> 和 <code>button</code> 的子节点的。</p> <p>以及如何把 click 的 handler 描述为 button 里 <code>props</code> 的一部分。</p> <p>React 元素还有其他的很多字段，比如 <code>ref</code> ，但是超出本文范围不作展开。</p> <p><code>ClickCounter</code> 对应的 React 元素不存在任何 <code>props</code> 或 <code>key</code> ：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>
    key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    ref<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> ClickCounter
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="fiber-nodes"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#fiber-nodes" class="header-anchor">#</a> Fiber nodes</h3> <p>在<strong>协调（reconciliation）</strong> 过程中，从 <code>render</code> 方法返回的每个 React element 的数据将被合并到 <code>Fiber</code> 节点树中，每个 React element 都有一个对应的 <code>Fiber</code> 节点。</p> <p>与 React 元素不同， <code>Fiber</code> 并不是每次渲染都会重新创建，它们是用来保存组件 state 和 <code>DOM</code> 的可变数据结构。</p> <p>之前聊到过，框架执行的活动，取决于 React 元素的类型。</p> <p>在我们的示例中，对于类组件 <code>ClickCounter</code> 而言，它调用生命周期方法和 <code>render</code> 方法。</p> <p>而对于 <code>span</code> host 组件（dom节点），执行 DOM 更新。</p> <p>因此，每个 React 元素都被转换成 <a href="https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js" target="_blank" rel="noopener noreferrer">相应类型<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>的 <code>Fiber</code> 节点，描述需要完成的工作。</p> <p>[译者注：这里的类型是 WorkTag 每个类型是一个固定的数字，例如函数式组件对应的是 0 而类组件对应的是 1]</p> <p><strong>你可以将 <code>Fiber</code> 想象成一种数据结构，用来表示一些要做的工作，或者换句话说，一个工作单元。 <code>Fiber</code> 的架构还提供了一种方便的方式来跟踪、调度、暂停和中止工作。</strong></p> <p>当 React 元素第一次转换为 fiber 节点时，React在 <code>createFiberFromTypeAndProps</code> 函数中使用元素的数据来创建一个 <code>Fiber</code> 。</p> <p>在后续更新中，React 复用了fiber节点，这意味着它只会根据数据发生改变的部分来更新对应的 fiber 节点中的属性。</p> <p>如果从 <code>render</code> 方法不再返回相应的 React 元素，React 可能还需要根据 <code>key</code> 属性来移动或删除层级结构中的 fiber 节点。</p> <blockquote><p>深入 <a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239" target="_blank" rel="noopener noreferrer">ChildReconciler<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 函数，了解所有活动的列表以及 React 为现有 fiber 节点执行的相应函数。</p></blockquote> <p>因为 React 为每个 React 元素创建一个 fiber 节点，并且我们已经有一个这些元素组成的树，所以我们将会得到一个fiber 节点树。这样的情况下，我们简单的示例看起来就像这样：</p> <p><img src="./Frontend Wingman_files/fiber03.png" alt="img" class="medium-zoom-image"></p> <p>所有 <code>fiber</code> 节点使用这些属性： <code>child</code> 、 <code>sibling</code> 和 <code>return</code> 通过链接列表的形式连接在一起。</p> <p>如果你想知道更多关于为什么要这样的更多信息，可以阅读这篇文章 <a href="https://medium.com/dailyjs/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7" target="_blank" rel="noopener noreferrer">The how and why on React’s usage of linked list in Fiber<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> (如果你还没读过的话)</p> <h3 id="current-树和-workinprogress-树"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#current-%E6%A0%91%E5%92%8C-workinprogress-%E6%A0%91" class="header-anchor">#</a> Current 树和 workInProgress 树</h3> <p>在第一次渲染之后，React 最终得到了一棵反映渲染出 UI 的应用程序 state 的 fiber 树。</p> <p>这棵树通常被称为 <code>current</code> 树。当 React 开始处理更新时，它会构建一棵所谓的 <code>workInProgress</code> 树，反映将来要刷新到屏幕的 state。</p> <p>所有的 work 都是在 <code>workInProgress</code> 树的 fibler 上进行的。当 React 遍历 <code>current</code> 树时，它为每个现有的光纤节点创建一个替代节点。</p> <p>这些节点构成了 <code>workInProgress</code> 树。 它们用 render 方法返回的 React 元素的数据创建。</p> <p>一旦处理完所有 update 并完成所有相关 work，React 将一棵准备好的备用树刷新到屏幕。</p> <p>一旦在屏幕上渲染 <code>workInProgress</code> 树，它就成为了 <code>current</code> 树。</p> <p><strong>React 的核心原则之一 consistency （一致性）。</strong></p> <p>React总是一次性更新 <code>DOM</code> （它不会显示部分结果）。 <code>workInProgress</code> 树作为用户看不到的 “草稿”，以便 React 可以在处理所有组件之后，再将它们的更新刷新到屏幕上。</p> <p>在源代码中，你会看到许多函数从 <code>current</code> 树和 <code>workInProgress</code> 树中获取 <code>fiber</code> 节点。下面是一个这样的函数的示例：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateHostComponent</span><span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> renderExpirationTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>每个 fiber 节点都在 <strong>alternate</strong> 字段中保留了在另一棵树上其对应节点的引用。 <code>current</code> 树中的一个节点指向 <code>workInProgress</code> 树中的节点，反之亦然。</p> <h3 id="side-effects-副作用"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#side-effects-%E5%89%AF%E4%BD%9C%E7%94%A8" class="header-anchor">#</a> Side-effects 副作用</h3> <p>我们可以将 React 中的组件视为使用 state 和 props 来计算 UI如何呈现的函数。</p> <p>除此之外的所有活动，例如，改变DOM 或调用生命周期方法，都应被视为 Side-effects ，或者简单地视为一种 effect。</p> <p>在 <a href="https://reactjs.org/docs/hooks-overview.html#%EF%B8%8F-effect-hook" target="_blank" rel="noopener noreferrer">文档<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>里也有提及。</p> <blockquote><p>你之前可能已经在 React 组件中执行过获取数据、订阅或者 <strong>手动修改 DOM</strong>。我们统一把这些操作称为 “Side-effects”，或者简称为 “effect”。（因为它们会影响其他组件，并且在渲染期间无法完成。） ”</p></blockquote> <p>你可以看到大多数 state 和 props 的更新将如何导致 side-effects 。</p> <p>而且，由于执行 effect 是一种 work，fiber 节点是一种跟踪更新效果的便捷机制。</p> <p>每个fiber 节点都可以包含与其相关的 effect，在 <code>effectTag</code> 字段中。</p> <p>因此，Fiber中的 effect 基本上定义了实例在处理更新后需要完成的 <a href="https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js" target="_blank" rel="noopener noreferrer">work<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>：</p> <ul><li>对于 host 组件（dom元素），包括添加、更新或删除元素。</li> <li>对于类组件，React 可能需要更新 <code>refs</code> 并调用 <code>componentDidMount</code> 和 <code>componentDiddUpdate</code> 生命周期方法。</li> <li>还有其他 effect 对应于其他类型的 fiber。</li></ul> <h3 id="effects-链表"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#effects-%E9%93%BE%E8%A1%A8" class="header-anchor">#</a> Effects 链表</h3> <p>React 执行 update 非常快，它采用了一些有趣的技术来达到这种性能水平：</p> <p><strong>建立具有 effect 的 fiber 节点的线性链表以实现快速迭代是其中之一</strong>。</p> <p>迭代线性链表比树快得多，不需要花时间在没有 side-effects 的节点上。</p> <p>该链表的目的是，标记具有 DOM 更新或与其他 effect 关联的的节点。</p> <p>它是 <code>finishedWork</code> 树的子集，并且使用 <code>nextEffect</code> 属性而不是 <code>current</code> 树和 <code>workInProgress</code> 树中的 <code>child</code> 属性进行链接。</p> <p><a href="https://medium.com/u/a3a8af6addc1?source=post_page---------------------------" target="_blank" rel="noopener noreferrer">Dan Abramov<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 提出了一个 effect 链表的类比，把它想象成一棵圣诞树，"圣诞灯"把所有有效的节点绑在一起。</p> <p>为了将其可视化，让我们想象下面的 <code>fiber</code> 节点树：</p> <p>其中，高亮的节点有一些 work 要做，例如，我们的更新导致 <code>c2</code> 插入到 DOM 中。</p> <p><code>d2</code> 和 <code>c1</code> 更改属性， <code>B2</code> 触发生命周期方法。</p> <p>effect 链表将它们链接在一起，以便 React 可以稍后跳过其他节点：</p> <p><img src="./Frontend Wingman_files/fiber04.png" alt="img" class="medium-zoom-image">)</p> <p>可以看到，具有 effect 的节点是如何链接在一起的。</p> <p>当遍历节点时，React 使用 <code>firstEffect</code> 指针来确定列表的起始位置。所以上面的图表可以表示为这样的线性链表：</p> <p><img src="./Frontend Wingman_files/fiber05.png" alt="img" class="medium-zoom-image">)</p> <h3 id="fiber-树的根节点"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#fiber-%E6%A0%91%E7%9A%84%E6%A0%B9%E8%8A%82%E7%82%B9" class="header-anchor">#</a> Fiber 树的根节点</h3> <p>每个 React 应用程序都有一个或多个充当容器 DOM 元素。在我们的例子中它是 ID 为 <code>container</code> 的 <code>div</code> 。</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> domContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>ClickCounter<span class="token punctuation">)</span><span class="token punctuation">,</span> domContainer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>React为每个容器创建一个 <a href="https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31" target="_blank" rel="noopener noreferrer">fiber root <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 对象。你可以使用 DOM 元素的引用来访问它：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fiberRoot <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'#container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>_reactRootContainer<span class="token punctuation">.</span>_internalRoot
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>这个 fiber root 是 React 保存对 fiber 树的引用的地方。存储在 fiber root 的 <code>currrent</code> 属性中：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hostRootFiberNode <span class="token operator">=</span> fiberRoot<span class="token punctuation">.</span>current
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Fiber 树以 <a href="https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34" target="_blank" rel="noopener noreferrer">特殊类型<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 的 fiber 节点 <code>HostRoot</code> 开始。</p> <p>它是在内部创建的，并充当最顶层组件的父级。</p> <p><code>HostRoot</code> fiber 节点通过 <code>stateNode</code> 属性链接到 <code>FiberRoot</code> ：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code>fiberRoot<span class="token punctuation">.</span>current<span class="token punctuation">.</span>stateNode <span class="token operator">===</span> fiberRoot<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>你可以通过 fiber root 访问最顶层的 <code>HostRoot</code> fiber 节点来探索 fiber tree。</p> <p>或者，你可以从组件实例中获取单个 fiber 节点，像这样：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code>compInstance<span class="token punctuation">.</span>_reactInternalFiber
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h3 id="fiber-节点结构"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#fiber-%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84" class="header-anchor">#</a> Fiber 节点结构</h3> <p>来看看为 <code>ClickCounter</code> 组件创建的 fiber 节点的结构：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    stateNode<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ClickCounter</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> ClickCounter<span class="token punctuation">,</span>
    alternate<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    key<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    updateQueue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    memoizedState<span class="token operator">:</span> <span class="token punctuation">{</span>
        count<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    pendingProps<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    memoizedProps<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    tag<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    effectTag<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    nextEffect<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>以及 <code>span</code> DOM 元素：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    stateNode<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HTMLSpanElement</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> <span class="token string">"span"</span><span class="token punctuation">,</span>
    alternate<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    key<span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>
    updateQueue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    memoizedState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    pendingProps<span class="token operator">:</span> <span class="token punctuation">{</span>
        children<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    memoizedProps<span class="token operator">:</span> <span class="token punctuation">{</span>
        children<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    tag<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    effectTag<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    nextEffect<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>fiber 节点上有很多字段。在前面已经描述过字段 <code>alternate</code> 、 <code>effectTag</code> 和 <code>nextEfect</code> 的用途。现在看看其他的字段的用途。</p> <h3 id="statenode"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#statenode" class="header-anchor">#</a> stateNode</h3> <p>保存对类组件实例，DOM 节点或与 fiber 节点关联的其他 React 元素类型的引用。 一般来说，此属性用于保存与 fiber 关联的 local state。</p> <h3 id="type"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#type" class="header-anchor">#</a> type</h3> <p>定义与此 fiber 关联的函数或类。 对于类组件，它指向构造函数，对于 DOM 元素，它指定 HTML 标记。</p> <p>我把这个字段理解为 fiber 节点与哪些元素相关。</p> <h3 id="tag"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#tag" class="header-anchor">#</a> tag</h3> <p>定义 <a href="https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js" target="_blank" rel="noopener noreferrer">fiber类型<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>，在 reconciliation 算法中使用它来确定需要完成的工作。</p> <p>就像前面提到的，work 取决于 React 元素的类型。 <a href="https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L414" target="_blank" rel="noopener noreferrer">createFiberFromTypeAndProps函数 <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>将 React 元素映射到相应的 fiber 节点类型。</p> <p>在我们的应用中， <code>ClickCounter</code> 组件的 tag 属性是 1 ，它表示 <code>类组件</code> ；</p> <p>而 <code>span</code> 元素的 tag 属性是 5 表示 <code>HostComponent(宿主组件)</code> 。</p> <h3 id="updatequeue"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#updatequeue" class="header-anchor">#</a> updateQueue</h3> <p>state 更新，回调以及 DOM 更新的队列。</p> <h3 id="memoizedstate"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#memoizedstate" class="header-anchor">#</a> memoizedState</h3> <p>用于创建输出的 fiber 的状态。 处理更新时，它反映了当前渲染在屏幕上的内容的 state。</p> <h3 id="memoizedprops"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#memoizedprops" class="header-anchor">#</a> memoizedProps</h3> <p>在上一次渲染期间用于创建输出的 fiber 的 props 。</p> <h3 id="pendingprops"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#pendingprops" class="header-anchor">#</a> pendingProps</h3> <p>在 React element 的新数据中更新并且需要应用于子组件或 DOM 元素的 props。(子组件或者 DOM 中将要改变的 props)</p> <h3 id="key"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#key" class="header-anchor">#</a> key</h3> <p>唯一标识符，当具有一组 children 的时候，用来帮助 React 找出哪些项已更改，已添加或已从列表中删除。 与<a href="https://reactjs.org/docs/lists-and-keys.html#keys" target="_blank" rel="noopener noreferrer">这里<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>所说的React的 “列表和key” 功能有关</p> <p>你可以在<a href="https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78" target="_blank" rel="noopener noreferrer">这里<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>找到 fiber节点的完整结构。 在上面的说明中，省略了很多字段。</p> <p>尤其是跳过了构成树结构的 <code>child</code> 指针， <code>sibling</code> 指针和 <code>return</code> 指针。</p> <p>[这些结构我在 <a href="https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/" target="_blank" rel="noopener noreferrer">上一篇文章 <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>中有所描述。 ]</p> <p>以及专门针对 <code>Scheduler</code> 的 <code>expirationTime</code> ， <code>childExpirationTime</code> 和 <code>mode</code> 等字段类别。</p> <h2 id="通用算法"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E9%80%9A%E7%94%A8%E7%AE%97%E6%B3%95" class="header-anchor">#</a> 通用算法</h2> <p>React 执行工作分为两个主要阶段：<strong>render</strong> 和 <strong>commit</strong>。</p> <p>在 <code>render</code> 阶段，React 通过 <code>setState</code> 或 <code>React.render</code> 有计划的将更新应用于组件，并找出需要在 UI 中更新的内容。</p> <p>如果是初始渲染，React 会为 <code>render</code> 方法返回的每个元素创建一个新的 fiber 节点。在后续更新中，现有 React 元素的 fiber 节点将被复用和更新。</p> <p>**该阶段的执行的结果是带有 effect 的 fiber 节点树。**effect 描述了在下一个 <code>commit</code> 阶段需要完成的工作。</p> <p>当前阶段，React 会绘制一棵标记有 effect 的 fiber 树，并将其应用于实例。它遍历 effect 链表并执行 DOM 更新和用户可见的其他更改。</p> <p><strong>理解 <code>render</code> 阶段的工作可以异步执行，对我们而言非常重要</strong>。React 可以根据可用时间来处理一个或多个 fiber 节点，然后中断并且暂存已完成的工作，转去处理某些事件，接着它再从它停止的地方继续执行。</p> <p>但有时候，它可能需要丢弃完成的工作然后重新从头开始。</p> <p>由于在此阶段执行的工作不会导致任何用户可见的更改（例如DOM更新），所以才可以实现这些暂停。</p> <p>(译者注：因为 React 的一致性，所以不可能给用户呈现渲染到一半的组件，这样意味着这个阶段执行的所有 work 都是用户不可见的。)</p> <p><strong>与之相反的是，后续的 <code>commit</code> 阶段始终是同步的</strong>。这是因为在此阶段执行的工作会导致用户可见的更改，例如 DOM 更新。这就是为什么 React 需要一次性完成这些操作。</p> <p>调用生命周期方法是 React 的工作之一。一些方法是在 <code>render</code> 阶段调用的，而另一些方法则是在 <code>commit</code> 阶段调用。</p> <p>这是在第一个 <code>render</code> 阶段工作时，调用的生命周期列表：</p> <ul><li>[UNSAFE_]componentWillMount (deprecated)</li> <li>[UNSAFE_]componentWillReceiveProps (deprecated)</li> <li>getDerivedStateFromProps</li> <li>shouldComponentUpdate</li> <li>[UNSAFE_]componentWillUpdate (deprecated)</li> <li>render</li></ul> <p>如你所见，在16.3版本中，在 <code>render</code> 阶段执行的一些遗留的生命周期方法被标记为 <code>UNSAFE</code> 。</p> <p>（译者注：这里的 “unsafe” 不是指安全性，而是表示使用这些生命周期的代码在 React 的未来版本中更有可能出现 bug，尤其是在启用异步渲染之后。参考<a href="https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html" target="_blank" rel="noopener noreferrer">官方文档<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>）</p> <p>现在在文档中它们被称为遗留 (legacy lifecycles) 生命周期。将在以后的 16.x 发行版中弃用，而没有 <code>UNSAFE</code> 前缀的对应版本将在 17.0版本中移除。</p> <p>你可以在<a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html" target="_blank" rel="noopener noreferrer">这里<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>详细的了解这些更改，以及建议的迁移路径。</p> <p>你是否对此感到好奇？</p> <p>好吧，我们刚刚了解到，由于 <code>render</code> 阶段不会产生诸如 DOM 更新之类的 effect，因此 React 可以异步处理组件的异步更新（甚至可能在多个线程中进行）。</p> <p>但是，标有 <code>UNSAFE</code> 的生命周期经常被误解和巧妙地滥用。开发人员倾向于将带有 effect 的代码放在这些方法中，这可能会导致新的异步渲染方法出现问题。</p> <p>Although only their counterparts without the <code>UNSAFE</code> prefix will be removed, they are still likely to cause issues in the upcoming Concurrent Mode (which you can opt out of).</p> <p>(译者注：这一段并不是忘记翻译，我对作者描述的内容还有疑问，已经在沟通中，后续会同步到 frontendwingman 的章节中)</p> <p>接下来罗列的生命周期方法是在第二个 <code>commit</code> 阶段执行的：</p> <ul><li>getSnapshotBeforeUpdate</li> <li>componentDidMount</li> <li>componentDidUpdate</li> <li>componentWillUnmount</li></ul> <p>因为这些方法都在同步的 <code>commit</code> 阶段执行，他们可能会包含 side-effects ，并且操作DOM。</p> <p>好的，现在我们拥有了背景之后，让我们继续深入研究，用于遍历树和执行 work 的通用算法 。</p> <h3 id="render-阶段"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#render-%E9%98%B6%E6%AE%B5" class="header-anchor">#</a> Render 阶段</h3> <p>协调算法始终使 <a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132" target="_blank" rel="noopener noreferrer">renderRoot<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 函数从最顶层的 <code>HostRoot</code> fiber 节点开始。 但是，React 会退出（跳过）已经处理的 fiber 节点，直到找到工作未完成的节点。</p> <p>例如，如果你在组件树的深处调用 <code>setState</code> ，React将从顶部开始，但会快速跳过父级，直到它到达调用了 <code>setState</code> 方法的组件。</p> <h3 id="workloop-的主要步骤"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#workloop-%E7%9A%84%E4%B8%BB%E8%A6%81%E6%AD%A5%E9%AA%A4" class="header-anchor">#</a> WorkLoop 的主要步骤</h3> <p>所有的 fiber 节点都会在 <a href="https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136" target="_blank" rel="noopener noreferrer">work loop<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>. 中进行处理。如下是该循环的同步部分的实现：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">workLoop</span><span class="token punctuation">(</span><span class="token parameter">isYieldy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isYieldy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>nextUnitOfWork <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nextUnitOfWork <span class="token operator">=</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>nextUnitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上面的代码中， <code>nextUnitOfWork</code> 持有对 <code>workInProgress</code> 树中 fiber 节点的引用。</p> <p>该节点需要完成一些工作。 当 React 遍历 Fibers 树时，它通过此变量来判断是否还有其他未完成的 fiber 节点。</p> <p>处理完当前光纤后，该变量将包含对树中下一个光纤节点的引用或为“ null”。 在这种情况下，React退出工作循环并准备提交更改。</p> <p>处理过当前 fiber 后，变量将持有树中下一个 fiber 节点的引用或 <code>null</code> 。在为 <code>null</code> 的情况下，React 退出工作循环并准备好提交更改。</p> <p><strong>有四个主要函数用于遍历树并初始化或完成工作：</strong></p> <ul><li><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056" target="_blank" rel="noopener noreferrer">performUnitOfWork<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li><a href="https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489" target="_blank" rel="noopener noreferrer">beginWork<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879" target="_blank" rel="noopener noreferrer">completeUnitOfWork<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li> <li><a href="https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532" target="_blank" rel="noopener noreferrer">completeWork<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <p>为了演示他们的使用方法，请看以下遍历 fiber 树的动画。我演示中使用了这些函数的简化实现。</p> <p>每个函数都需要对一个 fiber 节点进行处理，当 React 顺着树往下遍历时，当前活动的 fiber 节点发生了变化。</p> <p>图中可以清楚地看到，算法是如何从一个分支转到另一个分支。</p> <p>在回溯到父节点之前，它首先完成子节点的 work，。</p> <p><img src="./Frontend Wingman_files/fiber06.gif" alt="tmp2" class="medium-zoom-image"></p> <blockquote><p>注意，垂直方向连线表示同级（sibling 兄弟节点），而弯曲的连接表示子级，例如 <code>b1</code> 没有孩子，而 <code>b2</code> 有一个孩子 <code>c1</code> 。</p> <p>(译者注，图中的树结构，按照正常的从顶到根的顺序排列的话，应该是从左往右看)</p></blockquote> <p><a href="https://vimeo.com/302222454" target="_blank" rel="noopener noreferrer">这里 <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>是视频的链接，你可以暂停播放并检查当前节点和函数状态。</p> <p>从概念上讲，你可以将 “开始 (begin)” 视为 “进入 (stepping into)” 组件，而将“完成 (complete)” 视为 “离开 (stepping out)” 组件。</p> <p>当我解释这些功能时，你也可以在 <a href="https://stackblitz.com/edit/js-ntqfil?file=index.js" target="_blank" rel="noopener noreferrer">这里<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 体验示例和实现。</p> <p>我们从 <code>performUnitOfWork</code> 和 <code>beginWork</code> 开始：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">workInProgress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next <span class="token operator">=</span> <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span><span class="token parameter">workInProgress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work performed for '</span> <span class="token operator">+</span> workInProgress<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> workInProgress<span class="token punctuation">.</span>child<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>performUnitOfWork</code> 函数从 <code>workInProgress</code> 树接收一个 fiber 节点，并通过调用 <code>beginWork</code> 开始工作，此函数将启动 fiber 需要执行的所有活动。</p> <p>出于演示的目的，我们只打印出 fiber 节点的名称表示 work 已经完成。</p> <p>**函数 <code>beginWork</code> 总是返回指向在循环中处理的下一个 child 的指针，或返回 <code>null</code> **</p> <p>如果下一个 child存在，它将被赋值给 <code>workLoop</code> 函数中的变量 <code>nextUnitOfWork</code> 。</p> <p>然而，如果不存在，React 就知道自己到达了分支的末尾，因此它可以完成当前节点。</p> <p>**一旦节点完成，它将需要为同层的其他节点( siblings )执行工作，并在完成后回溯到父节点。**这些都在 <code>completeUnitOfWork</code> 函数中完成：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">workInProgress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> returnFiber <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>return<span class="token punctuation">;</span>
        <span class="token keyword">let</span> siblingFiber <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>

        nextUnitOfWork <span class="token operator">=</span> <span class="token function">completeWork</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>siblingFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// If there is a sibling, return it</span>
            <span class="token comment">// to perform work for this sibling</span>
            <span class="token keyword">return</span> siblingFiber<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// If there's no more work in this returnFiber,</span>
            <span class="token comment">// continue the loop to complete the parent.</span>
            workInProgress <span class="token operator">=</span> returnFiber<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// We've reached the root.</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">completeWork</span><span class="token punctuation">(</span><span class="token parameter">workInProgress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'work completed for '</span> <span class="token operator">+</span> workInProgress<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>从实现中可以看出， <code>performUnitOfWork</code> 和 <code>completeUnitOfWork</code> 主要用于迭代目的，而主要活动则在 <code>beginWork</code> 和 <code>completeWork</code> 函数中进行。</p> <p>该函数的核心是一个很大的 <code>while</code> 循环。</p> <p>当一个 <code>workInProgress</code> 节点没有子节点时，React进入这个函数。完成当前 fiber 节点的工作后，它会检查是否存在同级。</p> <p>如果找到，React 退出函数并返回指向同级的指针。返回的指针将被赋值给 <code>nextUnitOfWork</code> 变量，React将从同级节点开始为分支执行工作。</p> <p>需要重点理解的是，React 目前仅完成了之前的同级节点 ( siblings ) 的工作。尚未完成父节点的工作。</p> <p><strong>只有子节点的所有分支都完成后，它才能完成父节点和回溯的工作。</strong></p> <p>实现中还可以看到， <code>performUnitOfWork</code> 和 <code>completeUnitOfWork</code> 两者的主要目的都是迭代，而活动主要发生在 <code>beginWork</code> 和 <code>completeWork</code> 函数中。</p> <p>在本系列的后续的文章中，我们将了解React进入 <code>beginWork</code> 和 <code>completeWork</code> 函数后， <code>ClickCounter</code> 组件和 <code>span</code> 节点会发生什么。</p> <h2 id="commit-阶段"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#commit-%E9%98%B6%E6%AE%B5" class="header-anchor">#</a> Commit 阶段</h2> <p>这一阶段从函数 <a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306" target="_blank" rel="noopener noreferrer">completeRoot<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 开始。这也是 React 更新 DOM 并调用预更新 (pre-mutation) / 更新生命周期方法的地方。</p> <p>当 React 进入这一阶段时，它有 2 棵树和 effect 链表。 第一棵树表现当前在屏幕上呈现的状态。</p> <p>然后在 <code>render</code> 阶段构建另一棵备用树。</p> <p>它在源代码中称为 <code>finishedWork</code> 或 <code>workInProgress</code> ，表示将要映射到屏幕上的状态。</p> <p>此备用树会用类似的方法通过 <code>child</code> 和 <code>sibling</code> 指针链接到 current 树。</p> <p>然后，有一个 effect 链表（它是 <code>finishedWork</code> 树的节点子集），通过 <code>nextEffect</code> 指针进行链接。</p> <p>需要记住的是，effect 链表是 <code>render</code> 阶段运行的<strong>结果</strong>。</p> <p>render 的最终目的就是确定那些需要插入、更新或删除的节点，以及哪些组件需要调用其生命周期方法。</p> <p>这正是 effect 链表要告诉我们的，<strong>而且它就是在 commit 阶段迭代的节点集。</strong></p> <blockquote><p>为了调试，可以通过 fiber root 的 <code>current</code> 属性访问 <code>current</code> 树。 可以通过current 树中的 <code>HostFiber</code> 节点的 <code>alternate</code> 属性来访问 <code>finishedWork</code> 树。</p></blockquote> <p>在 <code>commit</code> 阶段运行的主要函数是<a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523" target="_blank" rel="noopener noreferrer">commitRoot<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>。基本上，它执行以下操作：</p> <ul><li>在标记 <code>Snapshot</code> effect 的节点调用 <code>getSnapshotBeforeUpdate</code> 生命周期。</li> <li>在标记 <code>Deletion</code> effect 的节点调用 <code>componentWillUnmount</code> 生命周期。</li> <li>执行 <code>DOM</code> 的所有插入、更新、删除操作。</li> <li>将 <code>finishedWork</code> 树设置为 <code>current</code> 。</li> <li>在标记 <code>Placement</code> effect 的节点调用 <code>componentDidMount</code> 生命周期。</li> <li>在标记 <code>Update</code> effect 的节点调用 <code>componentDidUpdate</code> 生命周期。</li></ul> <p>在调用预更新 (pre-mutation) 方法 <code>getSnapshotBeforeUpdate</code> 之后，React 提交了树中的所有 side-effect。</p> <p>分两步走：</p> <p>第一步，执行所有 DOM（宿主）的插入、更新、删除和 ref 卸载。</p> <p>然后 React 将 <code>finishedWork</code> 树赋值给 <code>FiberRoot</code> 。</p> <p>将 <code>workInProgress</code> 树标记为 <code>current</code> 树。</p> <p>这些在 commit 阶段的第一波之后完成。</p> <p>所以在 <code>componentWillUnmount</code> 期间前一棵树仍然是 current 树。</p> <p>但这些都发生在第二步之前，所以在 <code>componentDidMount/Update</code> 期间 finished work 是 <code>current</code> 。</p> <p>第二步，React 调用所有其他生命周期方法和 ref 回调。这些方法作为一个单独的过程，使整个树中的所有插入，更新和删除操作均被执行。</p> <p>这是运行上述步骤的函数的要点：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitRoot</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> finishedWork</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">commitBeforeMutationLifecycles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">commitAllHostEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>
    <span class="token function">commitAllLifeCycles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这些子函数中的每一个都实现了一个循环，该循环遍历 effect 链表 并检查 effect 类型。 当发现与函数目的有关的 effect 时，就会执行。</p> <h3 id="预更新生命周期方法-pre-mutation-lifecycle-methods"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E9%A2%84%E6%9B%B4%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95-pre-mutation-lifecycle-methods" class="header-anchor">#</a> 预更新生命周期方法 Pre-mutation lifecycle methods</h3> <p>例如，下面是在 effect 树上迭代并检查节点是否具有 Snapshot effect 的代码：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitBeforeMutationLifecycles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>
            <span class="token function">commitBeforeMutationLifeCycles</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>对于类组件，这个 effect 意味着调用 <code>getSnapshotBeforeUpdate</code> 生命周期方法。</p> <h3 id="dom-更新"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#dom-%E6%9B%B4%E6%96%B0" class="header-anchor">#</a> DOM 更新</h3> <p><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L376" target="_blank" rel="noopener noreferrer">commitAllHostEffects<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 是 React 执行 DOM 更新的函数。该函数基本上定义了节点需要完成的操作类型，并执行这些操作：</p> <div class="language-javascript line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitAllHostEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>primaryEffectTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> Placement<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">commitPlacement</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> PlacementAndUpdate<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">commitPlacement</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> Update<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">commitWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> Deletion<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">commitDeletion</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> <div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>有意思的是，React 调用 <code>componentWillUnmount</code> 方法作为 <code>commitDeletion</code> 函数删除过程中的一部分。</p> <h3 id="更新后的生命周期方法-post-mutation-lifecycle-methods"><a href="https://www.frontendwingman.com/React/C00/indepth_dev_cn.html#%E6%9B%B4%E6%96%B0%E5%90%8E%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95-post-mutation-lifecycle-methods" class="header-anchor">#</a> 更新后的生命周期方法 Post-mutation lifecycle methods</h3> <p><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L465" target="_blank" rel="noopener noreferrer">commitAllLifecycles<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 是 React 调用余下所有生命周期方法 <code>componentDidUpdate</code> 和 <code>componentDidMount</code> 的函数。</p> <hr> <p>终于完成了。 让我知道你对本文的看法或在评论中提出问题。 <strong>查看该系列的下一篇文章 [React中 state 和 props 更新的深入说明]（https://indepth.dev/in-depth-explanation-of-state-and-props-update-in-react/)。</strong></p> <p>我还有更多文章，为调度程序，children 协调过程以及 effect 链表 的构建方式提供了深入的解释。 还计划做个视频，展示如何以本文为基础调试应用程序。</p></div> <div data-v-6be89bc8="" class="right-group"><div data-v-6be89bc8="" class="item"><span data-v-6be89bc8="" class="title">加入读者交流群</span> <span data-v-6be89bc8="" class="desc">
        扫描二维码回复
        <span data-v-6be89bc8="" class="inner">Chrome</span></span> <img data-v-6be89bc8="" width="120" src="./Frontend Wingman_files/qrcode_white.png"></div></div> <footer data-v-6be89bc8="" class="page-edit"><!----> <div class="last-updated"><span class="prefix">Last Updated:</span> <span class="time">7/6/2020, 12:54:42 AM</span></div></footer> <!----> </main></div><div class="global-ui"></div></div>
    <script src="./Frontend Wingman_files/app.dc619f9d.js" defer=""></script><script src="./Frontend Wingman_files/3.40763446.js" defer=""></script><script src="./Frontend Wingman_files/2.482aa177.js" defer=""></script><script src="./Frontend Wingman_files/39.441210ab.js" defer=""></script>
  

</body></html>