<!DOCTYPE html>
<!-- saved from url=(0038)https://zhuanlan.zhihu.com/p/126342731 -->
<html lang="zh" data-hairline="true" data-theme="light" data-react-helmet="data-theme"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>类型即正义：TypeScript 从入门到实践（一） - 知乎</title><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"><meta name="renderer" content="webkit"><meta name="force-rendering" content="webkit"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="google-site-verification" content="FTeR0c8arOPKh8c5DYh_9uu98_zJbaWw53J-Sch9MTg"><meta data-react-helmet="true" name="keywords" content="TypeScript,React"><meta data-react-helmet="true" name="description" content="作者：一只图雀 仓库：Github 、Gitee 图雀社区主站（首发）：图雀社区 博客：掘金、知乎、慕课 公众号：图雀社区 联系我：关注公众号后可以加图雀酱微信哦 原创不易，❤️点赞+评论+收藏 ❤️三连，鼓励作者写出…"><meta data-react-helmet="true" property="og:title" content="类型即正义：TypeScript 从入门到实践（一）"><meta data-react-helmet="true" property="og:url" content="https://zhuanlan.zhihu.com/p/126342731"><meta data-react-helmet="true" property="og:description" content="作者：一只图雀 仓库：Github 、Gitee 图雀社区主站（首发）：图雀社区 博客：掘金、知乎、慕课 公众号：图雀社区 联系我：关注公众号后可以加图雀酱微信哦 原创不易，❤️点赞+评论+收藏 ❤️三连，鼓励作者写出…"><meta data-react-helmet="true" property="og:image" content="https://pic3.zhimg.com/v2-c5dcf069b7457e7176c618d4708de845_b.jpg"><meta data-react-helmet="true" property="og:type" content="article"><meta data-react-helmet="true" property="og:site_name" content="知乎专栏"><link data-react-helmet="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-152.67c7b278.png"><link data-react-helmet="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-152.67c7b278.png" sizes="152x152"><link data-react-helmet="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-120.b3e6278d.png" sizes="120x120"><link data-react-helmet="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-76.7a750095.png" sizes="76x76"><link data-react-helmet="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-60.a4a761d4.png" sizes="60x60"><link rel="shortcut icon" type="image/x-icon" href="https://static.zhihu.com/static/favicon.ico"><link rel="search" type="application/opensearchdescription+xml" href="https://static.zhihu.com/static/search.xml" title="知乎"><link rel="dns-prefetch" href="https://static.zhimg.com/"><link rel="dns-prefetch" href="https://pic1.zhimg.com/"><link rel="dns-prefetch" href="https://pic2.zhimg.com/"><link rel="dns-prefetch" href="https://pic3.zhimg.com/"><link rel="dns-prefetch" href="https://pic4.zhimg.com/"><style>
.u-safeAreaInset-top {
  height: constant(safe-area-inset-top) !important;
  height: env(safe-area-inset-top) !important;
  
}
.u-safeAreaInset-bottom {
  height: constant(safe-area-inset-bottom) !important;
  height: env(safe-area-inset-bottom) !important;
  
}
</style><link href="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.app.216a26f4.7fb254b40f2a88291193.css" rel="stylesheet"><script type="text/javascript" async="" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/analytics.js" nonce=""></script><script defer="" crossorigin="anonymous" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/init.js" data-sentry-config="{&quot;dsn&quot;:&quot;https://2d8d764432cc4f6fb3bc78ab9528299d@crash2.zhihu.com/1224&quot;,&quot;sampleRate&quot;:0.1,&quot;release&quot;:&quot;1136-c71a749e&quot;,&quot;ignoreErrorNames&quot;:[&quot;NetworkError&quot;,&quot;SecurityError&quot;],&quot;ignoreErrors&quot;:[&quot;origin message&quot;,&quot;Network request failed&quot;,&quot;Loading chunk&quot;,&quot;这个系统不支持该功能。&quot;,&quot;Can&#39;t find variable: webkit&quot;,&quot;Can&#39;t find variable: $&quot;,&quot;内存不足&quot;,&quot;out of memory&quot;,&quot;DOM Exception 18&quot;,&quot;The operation is insecure&quot;,&quot;[object Event]&quot;,&quot;[object FileError]&quot;,&quot;[object DOMError]&quot;,&quot;[object Object]&quot;,&quot;拒绝访问。&quot;,&quot;Maximum call stack size exceeded&quot;,&quot;UploadError&quot;,&quot;无法 fetch&quot;,&quot;draft-js&quot;,&quot;缺少 JavaScript 对象&quot;,&quot;componentWillEnter&quot;,&quot;componentWillLeave&quot;,&quot;componentWillAppear&quot;,&quot;getInlineStyleAt&quot;,&quot;getCharacterList&quot;],&quot;whitelistUrls&quot;:[&quot;static.zhihu.com&quot;]}"></script><style data-emotion-css="1cd9gw4">.css-1cd9gw4{margin-left:.3em;}</style><script charset="utf-8" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.zswsdid.e6ef2875e94da6d9bf95.js"></script><link rel="stylesheet" type="text/css" href="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.Labels.216a26f4.88c6789577f617bb74d0.css"><script charset="utf-8" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.Labels.168a5041aeefb44b6e3a.js"></script><link rel="stylesheet" type="text/css" href="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.modals.216a26f4.1d60b2d768e5363b00e5.css"><script charset="utf-8" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.modals.4b585787d9c2f4d2db67.js"></script><style data-emotion="css"></style><link rel="stylesheet" type="text/css" href="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.richinput.216a26f4.467b3dbcc5b843cbde4b.css"><script charset="utf-8" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.richinput.b724343a99f5fba35da3.js"></script></head><body class="WhiteBg-body Body--isAppleDevice" data-react-helmet="class"><div id="root"><div class="App"><div class="LoadingBar"></div><main role="main" class="App-main"><div class="Post-content" data-zop-usertoken="{&quot;userToken&quot;:&quot;&quot;}" data-zop="{&quot;authorName&quot;:&quot;一只图雀&quot;,&quot;itemId&quot;:126342731,&quot;title&quot;:&quot;类型即正义：TypeScript 从入门到实践（一）&quot;,&quot;type&quot;:&quot;article&quot;}" data-za-detail-view-path-module="PostItem" data-za-extra-module="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Post&quot;,&quot;token&quot;:&quot;126342731&quot;}}}"><div class="ColumnPageHeader-Wrapper"><div><div class="Sticky ColumnPageHeader is-fixed" style="width: 1680px; top: 0px; left: 0px;"><div class="ColumnPageHeader-content"><a href="https://www.zhihu.com/" aria-label="知乎"><svg viewBox="0 0 200 91" fill="#0084FF" width="64" height="30"><path d="M53.29 80.035l7.32.002 2.41 8.24 13.128-8.24h15.477v-67.98H53.29v67.978zm7.79-60.598h22.756v53.22h-8.73l-8.718 5.473-1.587-5.46-3.72-.012v-53.22zM46.818 43.162h-16.35c.545-8.467.687-16.12.687-22.955h15.987s.615-7.05-2.68-6.97H16.807c1.09-4.1 2.46-8.332 4.1-12.708 0 0-7.523 0-10.085 6.74-1.06 2.78-4.128 13.48-9.592 24.41 1.84-.2 7.927-.37 11.512-6.94.66-1.84.785-2.08 1.605-4.54h9.02c0 3.28-.374 20.9-.526 22.95H6.51c-3.67 0-4.863 7.38-4.863 7.38H22.14C20.765 66.11 13.385 79.24 0 89.62c6.403 1.828 12.784-.29 15.937-3.094 0 0 7.182-6.53 11.12-21.64L43.92 85.18s2.473-8.402-.388-12.496c-2.37-2.788-8.768-10.33-11.496-13.064l-4.57 3.627c1.363-4.368 2.183-8.61 2.46-12.71H49.19s-.027-7.38-2.372-7.38zm128.752-.502c6.51-8.013 14.054-18.302 14.054-18.302s-5.827-4.625-8.556-1.27c-1.874 2.548-11.51 15.063-11.51 15.063l6.012 4.51zm-46.903-18.462c-2.814-2.577-8.096.667-8.096.667s12.35 17.2 12.85 17.953l6.08-4.29s-8.02-11.752-10.83-14.33zM199.99 46.5c-6.18 0-40.908.292-40.953.292v-31.56c1.503 0 3.882-.124 7.14-.376 12.773-.753 21.914-1.25 27.427-1.504 0 0 3.817-8.496-.185-10.45-.96-.37-7.24 1.43-7.24 1.43s-51.63 5.153-72.61 5.64c.5 2.756 2.38 5.336 4.93 6.11 4.16 1.087 7.09.53 15.36.277 7.76-.5 13.65-.76 17.66-.76v31.19h-41.71s.88 6.97 7.97 7.14h33.73v22.16c0 4.364-3.498 6.87-7.65 6.6-4.4.034-8.15-.36-13.027-.566.623 1.24 1.977 4.496 6.035 6.824 3.087 1.502 5.054 2.053 8.13 2.053 9.237 0 14.27-5.4 14.027-14.16V53.93h38.235c3.026 0 2.72-7.432 2.72-7.432z" fill-rule="evenodd"></path></svg></a><i class="ColumnPageHeader-Line"></i><div class="ColumnPageHeader-Title"><div class="ColumnPageHeader-TitleName"><span class="ColumnPageHeader-TitleMeta">首发于</span><a class="ColumnLink ColumnPageHeader-TitleColumn" href="https://www.zhihu.com/column/tuture">图雀社区</a></div></div><div class="ColumnPageHeader-Button"><button type="button" class="Button ColumnPageHeader-WriteButton Button--blue"><svg class="Zi Zi--EditSurround" fill="currentColor" viewBox="0 0 24 24" width="24" height="24"><path d="M18.453 7.992l-1.833-1.65.964-.978a1.223 1.223 0 0 1 1.73-.012l.005.006a1.24 1.24 0 0 1 .007 1.748l-.873.886zm-1.178 1.194l-5.578 5.66-1.935.697a.393.393 0 0 1-.504-.504l.697-1.935 5.488-5.567 1.832 1.65zM7.58 5.848l5.654.006-1.539 1.991-3.666.012A1.02 1.02 0 0 0 7 8.868v7.993c0 .558.46 1.01 1.029 1.01l7.941-.01c.568 0 1.03-.453 1.03-1.012v-4.061l2-1.442v6.002c0 1.397-1.2 2.501-2.62 2.501H7.574C6.153 19.85 5 18.717 5 17.32V8.35c0-1.397 1.16-2.502 2.58-2.502z"></path></svg>写文章</button></div></div></div><div class="Sticky--holder" style="position: relative; inset: 0px; display: block; float: none; margin: 0px; height: 52px;"></div></div></div><img class="TitleImage" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-c5dcf069b7457e7176c618d4708de845_1200x500.jpg" alt="类型即正义：TypeScript 从入门到实践（一）"><article class="Post-Main Post-NormalMain" tabindex="-1"><header class="Post-Header"><h1 class="Post-Title">类型即正义：TypeScript 从入门到实践（一）</h1><div class="Post-Author"><div class="AuthorInfo" itemprop="author" itemscope="" itemtype="http://schema.org/Person"><meta itemprop="name" content="一只图雀"><meta itemprop="image" content="https://pic2.zhimg.com/v2-dbef2effd22b98770e82fd26441775b6_l.jpg"><meta itemprop="url" content="https://www.zhihu.com/people/tuture-dev"><meta itemprop="zhihu:followerCount"><span class="UserLink AuthorInfo-avatarWrapper"><div class="Popover"><div id="Popover1-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover1-content"><a class="UserLink-link" data-za-detail-view-element_name="User" target="_blank" href="https://www.zhihu.com/people/tuture-dev"><img class="Avatar Avatar--round AuthorInfo-avatar" width="38" height="38" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-dbef2effd22b98770e82fd26441775b6_xs.jpg" srcset="https://pic2.zhimg.com/v2-dbef2effd22b98770e82fd26441775b6_l.jpg 2x" alt="一只图雀"></a></div></div></span><div class="AuthorInfo-content"><div class="AuthorInfo-head"><span class="UserLink AuthorInfo-name"><div class="Popover"><div id="Popover2-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover2-content"><a class="UserLink-link" data-za-detail-view-element_name="User" target="_blank" href="https://www.zhihu.com/people/tuture-dev">一只图雀</a></div></div></span></div><div class="AuthorInfo-detail"><div class="AuthorInfo-badge"><div class="ztext AuthorInfo-badgeText">汇聚精彩的免费实战教程，公众号「图雀社区」</div></div></div></div></div></div><div><span class="Voters"><button type="button" class="Button Button--plain">9 人<!-- -->赞同了该文章</button></span></div></header><div class="Post-RichTextContainer"><div class="RichText ztext Post-RichText"><blockquote> 作者：一只图雀<br> 仓库：<a href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Github</a> 、<a href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Gitee</a><br> 图雀社区主站（首发）：<a href="https://link.zhihu.com/?target=http%3A//tuture.co/" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">图雀社区</a> <br> 博客：<a href="https://link.zhihu.com/?target=https%3A//juejin.im/user/5b33414351882574b9694d28" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">掘金</a>、<a href="https://www.zhihu.com/people/tuture-dev" class="internal" data-za-detail-view-id="1043">知乎</a>、<a href="https://link.zhihu.com/?target=https%3A//www.imooc.com/u/8413857/articles" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">慕课</a><br> 公众号：<a href="https://link.zhihu.com/?target=https%3A//tuture.co/images/social/wechat.png" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">图雀社区</a> <br> 联系我：关注公众号后可以加图雀酱微信哦<br> 原创不易，❤️点赞+评论+收藏 ❤️三连，鼓励作者写出更好的教程。<br> </blockquote><h2>源起</h2><p>JavaScript 已经占领了世界上的每一个角落，能访问网页的地方，基本上就有 JavaScript 在运作，然而 JavaScript 因为其动态、弱类型、解释型语言的特性、出错的调用栈隐蔽，使得开发者不仅在调试错误上花费大把时间，在团队协作开发时理解队友编写代码也极其困难。TypeScript 的出现极大的解决了上面的问题，TypeScript -- 一个 JavaScript 的超集，它作为一门编译型语言，提供了对类型系统和最新 ES 语法的支持，使得我们可以在享受使用 ES 最新语法的编写代码的同时，还能在写代码的过程中就规避很多潜在的语法、语义错误；并且其提供的类型系统使得我们可以在团队协作编写代码时可以很容易的了解队友代码的含义：输入和输出，大大提高了团队协作编写大型业务应用的效率。在现代 JavaScript 世界中，已经有很多大型库在使用 TypeScript 重构，包括前端三大框架：React、Vue、Angular，还有知名的组件库 antd，material，在很多公司内部的大型业务应用也在用 TypeScript 开发甚至重写现有的应用，所以如果你想编写大型业务应用或库，或者想写出更利于团队协作的代码，那么 TypeScript 有十足的理由值得你学习！本文是 TypeScript 系列教程的第一篇，主要通过使用 antd 组件库实战演练一个 TypeScript 版本 React TodoList 应用来讲解 TypeScript 的语法，使得你能在学会语法的同时还能完成一个实际可运行的项目。<br></p><blockquote> 本文所涉及的源代码都放在了 <a href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Github</a>  或者 <a href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Gitee</a> 上，如果您觉得我们写得还不错，希望您能给<b>❤️这篇文章点赞<a href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Github</a> 或 <a href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Gitee</a> 仓库加星❤</b>️哦~</blockquote><a target="_blank" href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" data-draft-node="block" data-draft-type="link-card" class="LinkCard LinkCard--noImage" data-za-detail-view-id="172"><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">Github</span><span class="LinkCard-meta"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="17" height="17"><path d="M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z" fill-rule="evenodd"></path></svg></span>github.com</span></span><span class="LinkCard-imageCell"><div class="LinkCard-image LinkCard-image--default"><svg class="Zi Zi--Browser" fill="currentColor" viewBox="0 0 24 24" width="32" height="32"><path d="M11.991 3C7.023 3 3 7.032 3 12s4.023 9 8.991 9C16.968 21 21 16.968 21 12s-4.032-9-9.009-9zm6.237 5.4h-2.655a14.084 14.084 0 0 0-1.242-3.204A7.227 7.227 0 0 1 18.228 8.4zM12 4.836A12.678 12.678 0 0 1 13.719 8.4h-3.438A12.678 12.678 0 0 1 12 4.836zM5.034 13.8A7.418 7.418 0 0 1 4.8 12c0-.621.09-1.224.234-1.8h3.042A14.864 14.864 0 0 0 7.95 12c0 .612.054 1.206.126 1.8H5.034zm.738 1.8h2.655a14.084 14.084 0 0 0 1.242 3.204A7.188 7.188 0 0 1 5.772 15.6zm2.655-7.2H5.772a7.188 7.188 0 0 1 3.897-3.204c-.54.999-.954 2.079-1.242 3.204zM12 19.164a12.678 12.678 0 0 1-1.719-3.564h3.438A12.678 12.678 0 0 1 12 19.164zm2.106-5.364H9.894A13.242 13.242 0 0 1 9.75 12c0-.612.063-1.215.144-1.8h4.212c.081.585.144 1.188.144 1.8 0 .612-.063 1.206-.144 1.8zm.225 5.004c.54-.999.954-2.079 1.242-3.204h2.655a7.227 7.227 0 0 1-3.897 3.204zm1.593-5.004c.072-.594.126-1.188.126-1.8 0-.612-.054-1.206-.126-1.8h3.042c.144.576.234 1.179.234 1.8s-.09 1.224-.234 1.8h-3.042z"></path></svg></div></span></span></a><a target="_blank" href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg" data-image-width="248" data-image-height="248" class="LinkCard LinkCard--hasImage" data-za-detail-view-id="172"><span class="LinkCard-backdrop" style="background-image:url(https://pic1.zhimg.com/v2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg)"></span><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">图雀社区/typescript-tea</span><span class="LinkCard-meta"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="17" height="17"><path d="M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z" fill-rule="evenodd"></path></svg></span>gitee.com</span></span><span class="LinkCard-imageCell"><img class="LinkCard-image LinkCard-image--square" alt="图标" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg"></span></span></a><blockquote> 此教程属于 <a href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/react-roadmap" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">React 前端工程师学习路线</a>的一部分，欢迎来 Star 一波，鼓励我们继续创作出更好的教程，持续更新中~  </blockquote><a target="_blank" href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/react-roadmap" data-draft-node="block" data-draft-type="link-card" class="LinkCard LinkCard--noImage" data-za-detail-view-id="172"><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">React 前端工程师学习路线</span><span class="LinkCard-meta"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="17" height="17"><path d="M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z" fill-rule="evenodd"></path></svg></span>github.com</span></span><span class="LinkCard-imageCell"><div class="LinkCard-image LinkCard-image--default"><svg class="Zi Zi--Browser" fill="currentColor" viewBox="0 0 24 24" width="32" height="32"><path d="M11.991 3C7.023 3 3 7.032 3 12s4.023 9 8.991 9C16.968 21 21 16.968 21 12s-4.032-9-9.009-9zm6.237 5.4h-2.655a14.084 14.084 0 0 0-1.242-3.204A7.227 7.227 0 0 1 18.228 8.4zM12 4.836A12.678 12.678 0 0 1 13.719 8.4h-3.438A12.678 12.678 0 0 1 12 4.836zM5.034 13.8A7.418 7.418 0 0 1 4.8 12c0-.621.09-1.224.234-1.8h3.042A14.864 14.864 0 0 0 7.95 12c0 .612.054 1.206.126 1.8H5.034zm.738 1.8h2.655a14.084 14.084 0 0 0 1.242 3.204A7.188 7.188 0 0 1 5.772 15.6zm2.655-7.2H5.772a7.188 7.188 0 0 1 3.897-3.204c-.54.999-.954 2.079-1.242 3.204zM12 19.164a12.678 12.678 0 0 1-1.719-3.564h3.438A12.678 12.678 0 0 1 12 19.164zm2.106-5.364H9.894A13.242 13.242 0 0 1 9.75 12c0-.612.063-1.215.144-1.8h4.212c.081.585.144 1.188.144 1.8 0 .612-.063 1.206-.144 1.8zm.225 5.004c.54-.999.954-2.079 1.242-3.204h2.655a7.227 7.227 0 0 1-3.897 3.204zm1.593-5.004c.072-.594.126-1.188.126-1.8 0-.612-.054-1.206-.126-1.8h3.042c.144.576.234 1.179.234 1.8s-.09 1.224-.234 1.8h-3.042z"></path></svg></div></span></span></a><p class="ztext-empty-paragraph"><br></p><h2>代码准备</h2><p><br>我们接下来要讲解的整个 <b>类型即正义：TypeScript 从入门到实践 </b>系列是基于一个实战项目的，这个实战项目会贯穿整个系列教程的讲解周期，所以我们要尽可能全且精炼的讲解 TypeScript 语法知识的同时，还我们需要一个恰到好处的实战项目，因为准备项目代码的过程不是系列教程讲解的主线，所以如果你有兴趣学习如何搭建 TypeScript React 的开发环境，那么可以学习一下我们的序言教程：</p><p><b>类型即正义：TypeScript 从入门到实践（序章）</b><br>**<br>如果你已经对 TypeScript 如何搭建 React 开发环境，配置 Ant Design 组件库等很熟悉，或者不太感兴趣，那么你也可以直接克隆我们为你准备好的代码：</p><p>如果你偏爱 码云，那么你可以运行如下命令来获取初始代码：</p><div class="highlight"><pre><code class="language-bash">git clone -b initial-code https://gitee.com/tuture/typescript-tea.git
<span class="nb">cd</span> typescript-tea <span class="o">&amp;&amp;</span> npm install <span class="o">&amp;&amp;</span> npm start</code></pre></div><p>如果你偏爱 Github，那么你可以运行如下命令来获取初始代码：</p><div class="highlight"><pre><code class="language-bash">git clone -b initial-code git@github.com:tuture-dev/typescript-tea.git
<span class="nb">cd</span> typescript-tea <span class="o">&amp;&amp;</span> npm install <span class="o">&amp;&amp;</span> npm start</code></pre></div><p><br>通过上面的命令克隆初始代码之后，然后把项目跑起来，你应该可以看到如下效果：<br> <br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-a8b5f3f2b21583e1827217e3894f48d0_b.jpg" data-caption="" data-size="normal" data-rawwidth="2350" data-rawheight="1544" class="origin_image zh-lightbox-thumb" width="2350" data-original="https://pic1.zhimg.com/v2-a8b5f3f2b21583e1827217e3894f48d0_r.jpg"/></noscript><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-a8b5f3f2b21583e1827217e3894f48d0_1440w.jpg" data-caption="" data-size="normal" data-rawwidth="2350" data-rawheight="1544" class="origin_image zh-lightbox-thumb lazy" width="2350" data-original="https://pic1.zhimg.com/v2-a8b5f3f2b21583e1827217e3894f48d0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-a8b5f3f2b21583e1827217e3894f48d0_b.jpg" data-lazy-status="ok"></figure><p><br> <br>Boom！！！一个暗黑模式的 TodoList，心动了嘛？不管心不心动，你都可以愉快的开始接下来的 TypeScript 学习了✌️。<br></p><p class="ztext-empty-paragraph"><br></p><h2>TypeScript 初探</h2><p><br>正式 TS 时间☕️，TS 是一门静态编程语言，它是 JavaScript 的超集。首先我们先来解释一下什么是编程语言，然后我们再来引出 TypeScript 是什么。<br></p><p class="ztext-empty-paragraph"><br></p><h3>编程语言是什么？</h3><p><br>那么什么是编程语言了？编程语言是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。<br> <br>我们拿 JS 来举例，一门标准的编程语言一般包含如下几个部分：<br></p><ul><li>数据结构：如原始数据类型 string/number/void 等，非原始数据类型 array/object/enum 等</li><li>控制结构：如 if/else 、 switch 、while、for 循环等</li><li>组织结构：如 函数、类</li><li>特性：如 JS 的原型链</li><li>常用的 API：如 isNaN 判断是不是非数字，toFixed 将小数进行四舍五入操作</li><li>运行环境：如 浏览器端的 JavaScript、服务器端的 Node</li></ul><p><br>其中前五种又称为语言内核，也就是我们常常喊的 ECMAScript 2015，或者 ES6；最后一个运行环境在浏览器端结合 BOM/DOM 即成为 JavaScript，在服务器端结合一些文件/网络的操作即成为 Node。<br></p><p class="ztext-empty-paragraph"><br></p><h3>TypeScript 是什么？</h3><p><br>而 TS，作为 JavaScript 的超集，包含着两类属性：<br></p><ul><li>属于 JavaScript 端的编程语言特性，使得我们可以执行各种 JavaScript 相关的操作：变量声明、编写 if/else 控制流、使用循环处理重复任务、使用函数执行特定的任务块、使用类来组织和复用代码和模拟真实世界的操作等，还有新特性比如：装饰器、Iterator、Generator 这些。这类特性在此篇文章中，我们默认你已经很清楚了，不会做过多的讲解。</li><li>属于 TypeScript 端独有的特性：类型，它也具有一套编程语言的特性，比如标志一个变量是 string 类型，一个函数的参数有三个，它们的类型分别是 string/number/boolean，返回类型为 never等，这是基础类型，我们甚至可以基于类型进行编程，使用类型版本的控制、组织结构来完成高级类型的编写，进而将类型附着在 JavaScript 对应的编程语言特性上，将 JS 静态化，使得我们可以在编译期间就能发现类型上的错误，这一特性是我们本篇文章的重点。</li></ul><p><br>好的，读到这里，相比很多读者已经清楚了，其实 TS 没什么神秘的，主要就是设计了一套类似编程语言的类型语言，然后将这些类型附着在原 JavaScript 的语言之上，给其加上类型限制使得其静态化，进而可以快速的在编写时发现很多潜在的问题，帮助我们编写错误率更低，更适合团队协作的代码，这也是 TypeScript 适合编写大型的业务应用的原因。<br></p><p class="ztext-empty-paragraph"><br></p><h3>类型语言之数据结构</h3><p><br>其中 TS 数据结构又包含原始类型、非原始类型、特殊类型和高级类型等几类。我们将结合在 TS 类型侧的定义，以及附着在 JS 上进行实战来讲解。<br></p><p class="ztext-empty-paragraph"><br></p><h3>原始类型</h3><p class="ztext-empty-paragraph"><br></p><h3>TS 类型侧的定义</h3><p><br>和 JS 中的原始数据类型一样，TS 对应着一致的类型定义，包括下面八种：<br></p><ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>void</li><li>symbol</li><li>bigint</li></ul><blockquote><b>提示</b> 其中前六种是 ES5 中就有的，symbol 从 ES6 开始引入，bigint 是 ES2020 新引进的。<br> </blockquote><p><br>上面是 TS 的原始类型，我们之前提到 TS 就是将类型附着在 JS 上，将其类型化，那么我们来看看上面的原始类型如何附着在 JS 上，将其类型化。<br></p><p class="ztext-empty-paragraph"><br></p><h3>附着在 JS 上的实战</h3><p><br>TS 通过独特的<b>冒号语法</b>来将其类型侧定义的类型附着在 JS 上，我们来看几个例子：<br> <br>用 JS 语言来写图雀社区的 Slogan，我们一般会这么写：<br></p><div class="highlight"><pre><code class="language-js"><span class="k">const</span> <span class="nx">tutureSlogan</span> <span class="o">=</span> <span class="s1">'图雀社区，汇聚精彩的免费实战教程'</span><span class="p">;</span>
</code></pre></div><p><br>我们可以确定，这句 Slogan 是一个 string 类型的，所以我们用对应的 TS 类型附着在其变量定义上如下：<br></p><div class="highlight"><pre><code class="language-text">const tutureSlogan: string = '图雀社区，汇聚精彩的免费实战教程';</code></pre></div><p><br>这样我们就给原 JS 的 <code>tutureSlogan</code>  变量加上了类型定义，它是一个 <code>string</code>  类型的变量，通过这样的操作，原 JS 变量的类型就被静态化了，在初始化时，就不能再赋值其他的类型给这个 <code>tutureSlogan</code> 变量了，比如我们将 <code>number</code> 类型的字面量赋值给 <code>tutureSlogan</code> ，就会报错：<br></p><div class="highlight"><pre><code class="language-text">const tutureSlogan: string = 5201314 // 报错 Type '5201314' is not assignable to Type 'string'</code></pre></div><p><br>这就是 TS 的强大之处，当团队编码时事先约定好数据的类型，那么后续编写并调用这些设置好类型的变量时就会强制起约束作用，就像上面的代码一样，如果给 <code>tutureSlogan</code> 赋值  <code>5201314</code> 就会报错，其实你大可克制一点对吧 ，给 <code>5201314</code> 加个限制，两边带上引号 <code>'5201314&amp;</code>amp;#x27; 问题就迎刃而解了，爱也可以是克制 。<br></p><blockquote><b>提示</b> 有些细心的同学可能对上面的报错信息有点不能理解，对于报错信息的后半段类型 <code>string</code> 可能理解，因为我们给 <code>tutureSlogan</code> 限制了 <code>string</code> 类型，但是对于我们的赋值 <code>5201314</code> ，它原本是一个 JS 的 number 类型的字面量，为什么也成了 <code>Type</code> 了？ 那是因为，TS 引擎在对语句进行编译的时候，会对变量赋值两端做一个类型推理，比如对赋值语句的右侧 <code>5201314</code> ，会将其推理成 <code>5201314</code> 这个类型，它是一个属于 <code>number</code> 类型的一个特殊的 <code>number</code> 类型，可以被分配（<code>assignable</code> )给 <code>number</code> 类型的变量，这里的 <code>assignable</code> 是可分配的意思，就是一个子类型可以被分配给一个父类型，比如数字 1 可以被分配给 number 数字类型，但因为 number 类型和 string 类型是冲突的，所以这里报错了。 这里读者可能会有感觉了就是，你写的 JS 语句，加上类型定义之后，在 TS 编译器的世界里，一切皆类型了，它会以一种类型的视角去看待原 JS 语句，比如上面的语句，在 TS 编译器眼里，就是 <code>5201314</code> 类型和 <code>string</code> 类型的一个比较过程，如果比较一致，那么好的，我 TS 编译器今天就放你一马，让你逍遥快活。<br> </blockquote><p class="ztext-empty-paragraph"><br></p><h3>小结</h3><p><br>我们上面说到了 TS 的原始类型，一共有八个之多，并且通过其中的 <code>string</code> 类型来讲解了如何将 TS 类型附着在原 JS 语法上以静态化 JS 语言，剩下的 7 个原始类型的用法和 <code>string</code> 类型类似，我们将在之后的讲解中逐渐用到其中的类型。<br></p><p class="ztext-empty-paragraph"><br></p><h3>非原始类型</h3><p class="ztext-empty-paragraph"><br></p><h3>TS 类型侧的定义</h3><p><br>同样的 JS 中的非原始数据类型一样，TS 中也存在非原始类型，表示出了八种原始类型之外的类型，非原始类型也称为是 <code>object</code> 类型。<br> <br>实际上 TS 中还有几个常见的非原始类型，例举如下：<br></p><ul><li>array</li><li>tuple</li><li>enum</li></ul><p><br>且因为它们属于 <code>object</code> 类型，所以 <code>object</code> 类型实际上就代表了非原始类型。在上面的三个类型以及其父类型 <code>object</code> 中，<code>array</code> 和 <code>object</code> 其实我们应该有点熟悉，至于 <code>tuple</code> 和 <code>enum</code> 则是 TS 中新增的类型，JS 中正式提案中目前是没有的。讲完了类型侧定义，我们马上来实践一下上面的 <code>array</code> 和 <code>enum</code> 非原始类型。<br></p><p class="ztext-empty-paragraph"><br></p><h3>array 类型附着实战</h3><p><br>其中 <code>array</code> 类型我们比较熟悉，但这里有个不同就是之前我们的 JS 因为是动态语言，所以一个数组里面可以有各种不同的数据类型项，比如我们看如下 JS 语句：<br></p><div class="highlight"><pre><code class="language-js"><span class="k">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'1'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">'3'</span><span class="p">];</span>
</code></pre></div><p><br>可以看到，从 TS 的角度去看这个数组变量 <code>arr</code> 所包含的类型，存在字符串类型 <code>'1'</code> 和 <code>'3'</code> ，以及数字类型 <code>2</code> 。但 TS 总的数组类型要求数组中的元素都是同一个类型，不允许动态变化，比如我们为上面的数组变量 <code>arr</code> 声明类型应该如下：<br></p><div class="highlight"><pre><code class="language-text">const arr: string[] = ['1', '2', '3'];</code></pre></div><p><br>可以看到，我们给变量 <code>arr</code> 声明了 <code>string[]</code> 类型，即一个 <code>string</code> 类型后面跟着一个数组标志，表示是字符串数组类型，当声明了 <code>string[]</code> 类型之后，我们需要把之前的数组 <code>2</code> 改成字符串 <code>'2'</code> 。<br> <br>我们注意到 <code>array</code> 类型，它要求数组中每项的类型都一样，一般应用在数组的长度未知的情况，用特定的类型，比如 <code>string</code> 类型来约束数组的每一项。<br> <br>然而从 JS 转过来的同学大多数同学可能对这个 <code>array</code> 类型不适应了，我们 JS 的同学经常会遇到编写一个数组，其中的多项的类型不一样，就和我们上面的 JS <code>arr</code> 的项一样，既有 <code>string</code> 类型又有 <code>number</code> 类型，那这该怎么办了？还好！TS 的设计者也为我们考虑到了这一点，那就是我们下面要讲到的 <code>tuple</code>  （元组）类型。<br></p><p class="ztext-empty-paragraph"><br></p><h3>tuple 类型附着实战</h3><p><br>大家可能对 <code>tuple</code> （元组）类型很陌生了，其实元组是一种特殊的数组类型，它主要用于这样的场景：“一个数组的项数已知，其中每项的类型也已知”，这句话说起来可能比较绕，我们用上面讲数组的例子来讲元组：<br></p><div class="highlight"><pre><code class="language-text">const arr = ['1', 2, '3'];</code></pre></div><p><br>我们知道上面的数组第一项和第三项的类型为 <code>string</code> 类型，第二项的类型为 <code>number</code> 类型，现在我们要给这个 <code>arr</code> 附着一个类型，使得其静态化。<br> <br>这个条件满足我们上面说的元组的适用场景，我们通过给 <code>arr</code> 一个对应的元组类型，让我们可以保持上面的写法不变：<br></p><div class="highlight"><pre><code class="language-text">const arr: [string, number, string] = ['1', 2, '3'];</code></pre></div><p><br>可以看到，元组就是形如 <code>[type1, type2, type3, ...., typen]</code> 这样数组长度已知，且类型已知的情况，其中 <code>type1</code> 到 <code>typen</code> 中所有的类型都可以不一样。<br></p><p class="ztext-empty-paragraph"><br></p><h3>小结</h3><p><br>在这一小结中我们讲解了一下什么是非原始类型，然后说明了在 TS 中有四种非原始类型，其中有一种代表非原始类型 <code>object</code> ，然后剩下的三种属于 <code>object</code> 类型。<br> <br>接着我们通过实践讲解了 <code>array</code> 和 <code>tuple</code> 类型，对于 <code>enum</code> 类型和 <code>object</code> 类型本身，我们将留在之后的章节来讲，敬请期待✌️。<br></p><p class="ztext-empty-paragraph"><br></p><h3>特殊类型</h3><p><br>TS 中还有几个常用的特殊类型，它们是 <code>any</code> 、<code>unknown</code> 和 <code>never</code> ，其中 <code>never</code> 类型一般会伴随着和函数的类型声明一起使用，所以我们将 <code>never</code> 类型的时候会提到函数的类型如何进行声明。<br> <br>接下来我们来讲一讲这三个类型的含义和应用。<br></p><p class="ztext-empty-paragraph"><br></p><h3>any 类型定义与实战</h3><p><br><code>any</code> 的字面含义是 “任何”，主要用于在编码的时候不知道一个变量的类型，所以先给它加一个 <code>any</code> 类型定义，表示它可以是任何类型，一般留待后续确认此变量类型之后再将 <code>any</code> 改为具体的类型。<br> <br>我们来看一个例子，比如我们有下面一段 TS 变量定义语句：<br></p><div class="highlight"><pre><code class="language-js"><span class="kd">let</span> <span class="nx">demand</span><span class="o">:</span> <span class="nx">any</span><span class="p">;</span>
</code></pre></div><p><br>因为有时候产品给一个需求，要我们去开发一个新功能，给了设计稿，但是没交接清楚，对于设计稿有一些内容我们想提前做，但是因为不清楚具体的类型，比如这里的 <code>demand</code> ，所以我们这里给 <code>demand</code> 一个 <code>any</code> 类型，然后继续做其他的内容，这样既不会出错，也不会影响其他的开发进度。<br> <br>等到产品把具体的上下文交代清楚了，诶！我们清楚了知道这个 <code>demand</code> 的类型了，我们就可以回过头来给其附着一个严格的类型定义，比如我们知道它是 <code>string</code> 类型，那么我们再返回来对其修改如下：<br></p><div class="highlight"><pre><code class="language-text">let demand: string;</code></pre></div><p><br>就是这样，<code>any</code> 的应用场景大多是这样的。但是玩 TS 的朋友要小心哦，不要一碰到不确定的就写个 <code>any</code> 类型，然后写了之后还不改，那就把 TS 用成了 AnyScript 了，这就和 JS 一样了 。所以你看呀，TS 的优秀之处在于，你完全可以在 TS 的环境中写 JS 还能享受 TS 带来的各种静态语言的优势，所以这么受欢迎也是可以理解滴。<br></p><p class="ztext-empty-paragraph"><br></p><h3>unknown 类型定义与实战</h3><p><br><code>unknown</code> 类型和 <code>any</code> 都可以表示任何类型，应用场景也和上面类型，但是它更安全。那么具体安全在哪里了？我们通过一个例子来看一看：<br></p><div class="highlight"><pre><code class="language-text">let demandOne: any;
let demandTwo: unknown;</code></pre></div><p><br>我们拿到了开发需求，但是不清楚具体类型又打算继续开发时，上面两种情况都可以使用，但是当我们具体使用这两个变量的时候，<code>any</code> 类型的变量是可以进行任意进行赋值、实例化、函数执行等操作，但是 <code>unknown</code> 只允许赋值，不允许实例化、函数执行等操作，我们来看个例子：<br></p><div class="highlight"><pre><code class="language-text">demandOne = 'Hello, Tuture'; // 可以的
demandTwo = 'Hello, Ant Design'; // 可以的

demandOne.foo.bar() // 可以的
demandTwo.foo.bar() // 报错</code></pre></div><p><br>可以看到，<code>unknown</code> 类型只允许赋值操作，不允许对象取值（Getter)   、函数执行等操作，所以它更安全。<br></p><p class="ztext-empty-paragraph"><br></p><h3>never / 函数类型定义与实战</h3><p><br><code>never</code> 的字面意思是 “永不”，在 TS 中代表不存在的值类型，一般用于给函数进行类型声明，函数绝不会有返回值的时候使用，比如函数内抛出错误，我们首先看个例子将讲解一下如何给函数进行类型声明，然后接着我们讲  <code>never</code> 类型如何使用：<br></p><div class="highlight"><pre><code class="language-text">function responseError(message) {
  // ... 具体操作，接收信息，抛出错误
}</code></pre></div><p><br>对于上面的函数，我们可以使用箭头函数的形式把它抽象成为形如 <code>(args1, args2, ... , argsn) =&gt; returnValue</code> ，我们主要关注点在于函数的输入和输出，所以我们在类型声明的时候把函数的输入参数的类型和输出结果的类型定义好就可以了。<br> <br>我们注意到上面我们定义的函数有一个参数： <code>message</code>  ，并且函数体内根据 <code>message</code> 抛出对应的错误，那么我们来给它进行类型声明如下：<br></p><div class="highlight"><pre><code class="language-text">function responseError(message: string): never {
  // ... 具体操作，接收信息，抛出错误
}</code></pre></div><p><br>可以看到我们同样使用了 TS 的冒号语法来进行函数参数和返回值的类型定义，因为 <code>message</code>  一般是一个字符串 ID，所以我们给它 <code>string</code> 类型，而这个函数绝不会有返回值，只是单纯的抛出错误，所以我们给返回值一个 <code>never</code> 类型。<br></p><p class="ztext-empty-paragraph"><br></p><h3>动手实践</h3><p><br>基本了解了类型语言的数据结构之后，我们马上来写一点 React 代码来实践我们学到的知识。<br> <br>我们之前准备的代码中可以看到，有两个假数据数组 <code>todoListData</code> 和 <code>userList</code> ，我们使用之前学到的知识来给这两个数组进行类型定义，打开 <code>src/App.tsx</code> 对其中的内容作出对应的修改如下：<br></p><div class="highlight"><pre><code class="language-text">// ...
interface Todo {
  user: string;
  time: string;
  content: string;
  isCompleted: boolean;
}

interface User {
  id: string;
  name: string;
  avatar: string;
}

const todoListData: Todo[] = [
  {
    content: "图雀社区：汇聚精彩的免费实战教程",
    user: "mRcfps",
    time: "2020年3月2日 19:34",
    isCompleted: false
  },
  // ...
];

const userList: User[] = [
  // ...
];

// ...</code></pre></div><p><br>可以看到，上面我们定义了两个 <code>interface</code>  Todo 和 User，然后以数组类型的方式对 <code>todoListData</code> 和 <code>userList</code> 进行注解，表示 <code>todoListData</code> 是 <code>Todo[]</code> 类型，<code>userList</code> 是 <code>User</code> 类型。<br> <br>这里的 <code>interface</code> 我们还没用提到，我们将马上在后面讲到，可以理解它类似 JS 中的对象，用来组织一组类型，就比如我们这里  <code>todoList</code> 中单个元素实际上是包含四个属性的对象，其中前三个属性为 <code>string</code> 原始类型，最后一个属性为 <code>boolean</code> 类型，所以我们为了给 单个对象元素进行类型注解，我们使用了 <code>interface</code> 。<br></p><p class="ztext-empty-paragraph"><br></p><h2>枚举和接口</h2><p><br>在上一节中我们提到了 <code>interface</code> ，当时没有细讲，这一节我们就先来细细说一下 <code>interface</code> 是什么？<br></p><p class="ztext-empty-paragraph"><br></p><h3>Interface</h3><p><br>它相当于类型中的 JS 对象，用于对函数、类等进行结构类型检查，所谓的结构类型检查，就是两个类型的结构一样，那么它们的类型就是兼容的，这在计算机科学的世界里也被成为 “鸭子类型”。<br></p><blockquote><b>提示</b> <b>什么鸭子类型？</b> 当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。<br> </blockquote><p><br>我们马上来看一个例子了解一个 <code>Interface</code> 是怎么样的，比如我们之前对象 <code>Todo</code> ，一个 Todo 对象如下：<br></p><div class="highlight"><pre><code class="language-js"><span class="k">const</span> <span class="nx">todo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">content</span><span class="o">:</span> <span class="s1">'图雀社区，汇聚精彩的免费技术教程'</span><span class="p">;</span>
  <span class="nx">user</span><span class="o">:</span> <span class="s1">'mRcfps'</span><span class="p">,</span>
  <span class="nx">time</span><span class="o">:</span> <span class="s1">'2020年3月2日 19:34'</span><span class="p">,</span>
  <span class="nx">isCompleted</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div><p><br>现在我们要这个 todo 做一个类型注解，根据之前提到的 “鸭子类型” 的方式，我们可以定义一个 Interface 来为它做注解：<br></p><div class="highlight"><pre><code class="language-text">interface Todo {
  content: string;
  user: string;
  time: string;
  isCompleted: boolean;
}

const todo: Todo = {
 // ...
}</code></pre></div><p><br>可以看到我们的接口 <code>Todo</code> 内容有四个字段，并且标注了这四个字段的类型，比如 <code>content</code> 为 <code>string</code> ，这个接口的样子和 <code>todo</code> 对象是一样的，所以用 Interface  <code>Todo</code>  来注解 <code>todo</code> 是可行的，用 VSCode 的同学，应该可以看到我们这样写之后，编辑器里面没有抛出异常。<br></p><p class="ztext-empty-paragraph"><br></p><h3>可选属性</h3><p><br>上面我们讲到 Interface 是用来注解 对象，函数等，那么我们就有一个场景，一个对象里面的某些参数我们可能没有，比如一个待办事项 Todo，有时候没有设置 <code>time</code> 时间属性，那么修饰这样一个对象我们该怎么办了？幸好 TS 给我们提供了可选属性这样一个方便的属性，使得我们可以方便解决上面的问题，我们来看一下可选属性该怎么写，假如我们上面的那个例子，<code>time</code> 是可选的，那么我们可以写出如下这样：<br></p><div class="highlight"><pre><code class="language-text">interface Todo {
  content: string;
  user: string;
  time?: string;
  isCompleted: boolean;
}</code></pre></div><p><br>我们看到，只需要在属性类型修饰冒号左边加一个问号就可以了，这个时候我们就告诉 TS 编译器这个 <code>time</code> 属性是可选的一个类型，所以我们用上面的 Interface Todo 来注解一下没有 <code>time</code> 属性的 <code>todo</code> 对象如下：<br></p><div class="highlight"><pre><code class="language-text">const todo: Todo = {
  content: '予力内容创作，加速技术传播',
  user: 'pftom',
  isCompleted: false,
}</code></pre></div><p><br>可以看到，使用 VSCode 来跟着教程敲的同学应该发现上面的内容没有错误，类型检查通过了。<br></p><p class="ztext-empty-paragraph"><br></p><h3>只读属性</h3><p><br>TS 的 Interface 还有一些额外的属性比如只读属性（readonly），表示用相关带有只读属性的接口对某个 JS 元素做类型注解的时候，这个 JS 元素相关的属性被注解为只读属性时，我们之后不可以修改这个属性了，我们来看一个例子：<br></p><div class="highlight"><pre><code class="language-text">interface Todo {
  content: string;
  readonly user: string;
  time?: string;
  isCompleted: boolean;
}</code></pre></div><p><br>可以看到只读属性的添加就是在属性之前加上 <code>readonly</code> 关键字，就可以将 Interface 中的属性标志为已读的，我们来试验一下这个只读效果：<br></p><div class="highlight"><pre><code class="language-text">const todo: Todo = {
  content: '予力内容创作，加速技术传播',
  user: 'pftom',
  isCompleted: false,
}

todo.user = 'mRcfps'</code></pre></div><p><br>当我们进行上面的修改操作之后，编辑器内会报错：<br> <br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-426fe22658c8425c9698f76ca98569fc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1220" data-rawheight="458" class="origin_image zh-lightbox-thumb" width="1220" data-original="https://pic1.zhimg.com/v2-426fe22658c8425c9698f76ca98569fc_r.jpg"/></noscript><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-426fe22658c8425c9698f76ca98569fc_1440w.jpg" data-caption="" data-size="normal" data-rawwidth="1220" data-rawheight="458" class="origin_image zh-lightbox-thumb lazy" width="1220" data-original="https://pic1.zhimg.com/v2-426fe22658c8425c9698f76ca98569fc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-426fe22658c8425c9698f76ca98569fc_b.jpg" data-lazy-status="ok"></figure><p class="ztext-empty-paragraph"><br></p><p class="ztext-empty-paragraph"><br></p><h3>多余属性检查</h3><p><br>我在在 JS 中经常会遇到一个对象，一开始我们知道它有是哪个属性，但是它的属性却可以动态增加，比如我们的 <code>todo</code> 可能还存在 <code>priority</code> 优先级这样一个属性，那么我们如何定义一个可以注解动态增加属性对象的 Interface 了?<br> <br>所幸 TS 提供一个多余属性检查的写法，使得上面的问题我们也可以解决，我们来看一下一个多余属性教程该怎么定义：<br></p><div class="highlight"><pre><code class="language-text">interface Todo {
  isCompleted: boolean;
  [propName: string]: any;
}</code></pre></div><p><br>使用类似上面 JS 中的动态属性赋值的方式我们就可为 <code>Todo</code> 接口加上多余属性检查，这里我们将其注解为一定拥有  <code>isCompleted</code> 属性，其他的属性可以动态添加，因为动态添加的属性的值类型我们不清楚，所以我们用 <code>any</code> 来表示值类型，它可以是任意类型。我们马上来试验一下：<br></p><div class="highlight"><pre><code class="language-text">const todo: Todo = {
  content: '予力内容创作，加速技术传播',
  isCompleted: false,
}

todo.user = 'pftom';
todo.time = '2020-04-04';</code></pre></div><p><br>可以看到，上面我们我们的 todo 在定义的时候只有两个属性，后面我们额外添加了两个属性，发现编辑器里面也不会报错，这就是多余属性检查的魅力。<br></p><p class="ztext-empty-paragraph"><br></p><h3>Enum</h3><p><br>枚举是 TS 中独有的概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，比如我们应用中参与创建待办事项的用户只有五个人，那么在创建待办事项时，此事项的所属用户是五人中的某一人。<br> <br>我们马上来看一个例子，我们的将这五个用户放到枚举里面：<br></p><div class="highlight"><pre><code class="language-text">enum UserId {
  tuture,
  mRcfps,
  crxk,
  pftom,
  holy
}</code></pre></div><p><br>进而我们可以改进一下我们在上节  Interface 里面的 <code>Todo</code> 接口，给它的 <code>user</code> 字段一个更精确的类型注解：<br></p><div class="highlight"><pre><code class="language-text">interface Todo {
  content: string;
  user: UserId;
  time: string;
  isCompleted: boolean;
}</code></pre></div><p><br>通过上面的例子我们可以看到，<code>todo</code>  里面的 <code>user</code> 字段应该是五人之一，它有可能是 <code>tuture</code> ，也有可能是 <code>mRcfps</code> ，我们不知道，所以我们写了一个枚举 <code>UserId</code> ，并用它来注解 <code>Todo</code> 的 <code>user</code> 字段。<br></p><p class="ztext-empty-paragraph"><br></p><h3>数字枚举</h3><p><br>上面我们的 UserId 中几个枚举值其实都对应着相应的数字，比如 <code>UserId.tuture</code> 它的值是数字 <code>0</code> ，<code>UserId.mRcfps</code> 它的值是数字 <code>1</code> ，以此类推，后面的几个枚举值分别是数字 <code>2</code> ，<code>3</code> ，<code>4</code> 。<br> <br>当然我们也可以手动给其中某个枚举值赋值一个数字，这样这个枚举值后面的值会依次在这个赋值的数字上递增，我们来看个例子：<br></p><div class="highlight"><pre><code class="language-text">enum UserId {
  tuture,
  mRcfps = 6,
  crxk,
  pftom,
  holy,
}</code></pre></div><p><br>上面我们的每个枚举值对应的数字依次是：<code>0</code> ，<code>6</code> ，<code>7</code> ，<code>8</code> ，<code>9</code><br></p><p class="ztext-empty-paragraph"><br></p><h3>字符串枚举</h3><p><br>枚举的值除了是数字还可以是一系列字符串，比如：<br></p><div class="highlight"><pre><code class="language-text">enum UserId {
  tuture = '66666666',
  mRcfps = '23410977',
  crxk = '25455350',
  pftom = '23410976',
  holy = '58352313',
}</code></pre></div><p><br>可以看到，我们给每个枚举值赋值了对于的字符串。<br></p><p class="ztext-empty-paragraph"><br></p><h3>异构枚举</h3><p><br>当然在一个枚举里面既可以有字符串值也可以有数字：<br></p><div class="highlight"><pre><code class="language-text">enum UserId {
  tuture = '66666666',
  mRcfps = 6,
}</code></pre></div><p class="ztext-empty-paragraph"><br></p><h3>动手实践</h3><p><br>了解了 <code>Interface</code> 和 <code>Enum</code> 之后，我们马上运用在我们的项目中来完善我们的待办事项应用。<br> <br>随着内容越写越多，我们的 <code>src/App.tsx</code> 越来越复杂，所以我们打算把 <code>TodoInput</code> 组件拆到单独的页面，在 <code>src</code> 目录下新建 <code>TodoInput.tsx</code> ，并在里面编写如下的内容：<br></p><div class="highlight"><pre><code class="language-text">import React, { useState } from "react";
import { Input, Select, DatePicker } from "antd";
import { Moment } from "moment";

import { userList } from "./utils/data";

const { Option } = Select;

enum UserId {
  tuture = "666666666",
  mRcfps = "23410977",
  crxk = "25455350",
  pftom = "23410976",
  holy = "58352313"
}

export interface TodoValue {
  content?: string;
  user?: UserId;
  date?: string;
}

interface TodoInputProps {
  value?: TodoValue;
  onChange?: (value: TodoValue) =&gt; void;
}

const TodoInput = ({ value = {}, onChange }: TodoInputProps) =&gt; {
  const [content, setContent] = useState("");
  const [user, setUser] = useState(UserId.tuture);
  const [date, setDate] = useState("");

  const triggerChange = (changedValue: TodoValue) =&gt; {
    if (onChange) {
      onChange({ content, user, date, ...value, ...changedValue });
    }
  };

  const onContentChange = (e: any) =&gt; {
    if (!("content" in value)) {
      setContent(e.target.value);
    }

    triggerChange({ content: e.target.value });
  };

  const onUserChange = (selectValue: UserId) =&gt; {
    if (!("user" in value)) {
      setUser(selectValue);
    }

    triggerChange({ user: selectValue });
  };

  const onDateOk = (date: Moment) =&gt; {
    if (!("date" in value)) {
      setDate(date.format("YYYY-MM-DD HH:mm"));
    }

    triggerChange({ date: date.format("YYYY-MM-DD HH:mm") });
  };

  return (
    &lt;div className="todoInput"&gt;
      &lt;Input
        type="text"
        placeholder="输入待办事项内容"
        value={value.content || content}
        onChange={onContentChange}
      /&gt;
      &lt;Select
        style={{ width: 80 }}
        size="small"
        defaultValue={UserId.tuture}
        value={user}
        onChange={onUserChange}
      &gt;
        {userList.map(user =&gt; (
          &lt;Option value={user.id}&gt;{user.name}&lt;/Option&gt;
        ))}
      &lt;/Select&gt;
      &lt;DatePicker
        showTime
        size="small"
        onOk={onDateOk}
        style={{ marginLeft: "16px", marginRight: "16px" }}
      /&gt;
    &lt;/div&gt;
  );
};

export default TodoInput;</code></pre></div><p><br>可以看到上面的内容，主要有如下几个部分的修改：<br></p><ul><li>我们定义了新的 <code>Interface</code> ：<code>TodoInputProps</code> ，它主要用来注解 <code>TodoInput</code> 这个函数式组件的 <code>props</code> 类型，可看到这个接口主要有两个字段，一个是 <code>value</code> ，它是 <code>TodoValue</code> 类型，还有一个 <code>onChange</code> ，它是一个函数类型，表示父组件将会传递一个 <code>onChange</code> 函数，我们将在之后讲解 TS 怎么注解函数，。</li><li>接着我们新增了一个枚举 <code>UserId</code> ，用来概括我们应用的五个用户的 ID，并且人为的为这五个枚举常量赋了对应的值。</li><li>接着我们改进了定义了一个新 <code>TodoValue</code> 接口，它有三个字段，主要用于标志 <code>TodoInputProps</code> 中上层组件中可能传递下来的值，所以三个字段都是可选的</li><li>最后我们定义了三个响应 <code>Input</code> 、<code>Select</code> 、<code>DatePicker</code> 的函数，<code>onContentChange</code> ，<code>onUserChange</code> ，<code>onDateOk</code> ，当上层组件没有传递对应的属性时，使用 <code>setXXX</code> 来更新 React 状态，否则触发 <code>triggerChange</code> ，调用父组件传递下来的 <code>onChange</code> 方法来更新对应的状态</li></ul><blockquote><b>提示</b> 上面我们从 <code>./utils/data</code> 导入了 <code>userList</code> ，以及导入了 <code>Moment</code> 用来注解 <code>moment</code> 类型的 date ，我们将在接下来的来马上来创建对于的 <code>./utils/data</code> 文件以及安装对于的 <code>moment</code> 。<br> </blockquote><p><br>在 <code>src/TodoInput.tsx</code> 中我们导入了 <code>Moment</code> 用来注解 <code>onDateOk</code> 的函数参数 <code>date</code> ，接下来我们来安装它：<br></p><div class="highlight"><pre><code class="language-bash">npm install moment
// ...
    <span class="s2">"customize-cra"</span>: <span class="s2">"^0.9.1"</span>,
    <span class="s2">"less"</span>: <span class="s2">"^3.11.1"</span>,
    <span class="s2">"less-loader"</span>: <span class="s2">"^5.0.0"</span>,
    <span class="s2">"moment"</span>: <span class="s2">"^2.24.0"</span>,
    <span class="s2">"react"</span>: <span class="s2">"^16.13.0"</span>,
    <span class="s2">"react-app-rewired"</span>: <span class="s2">"^2.1.5"</span>,
    <span class="s2">"react-dom"</span>: <span class="s2">"^16.13.0"</span>,
    // ...</code></pre></div><p><br>接着我们来创建对应的 <code>src/utils/data.ts</code> 文件，把之前在 <code>src/App.tsx</code> 里面的假数据统一放在这个文件里面，然后导出：<br></p><div class="highlight"><pre><code class="language-text">interface Todo {
  user: string;
  time: string;
  content: string;
  isCompleted: boolean;
}

interface User {
  id: string;
  name: string;
  avatar: string;
}

export const todoListData: Todo[] = [
  {
    content: "图雀社区：汇聚精彩的免费实战教程",
    user: "mRcfps",
    time: "2020年3月2日 19:34",
    isCompleted: false
  },
  {
    content: "图雀社区：汇聚精彩的免费实战教程",
    user: "pftom",
    time: "2020年3月2日 19:34",
    isCompleted: false
  },
  {
    content: "图雀社区：汇聚精彩的免费实战教程",
    user: "Holy",
    time: "2020年3月2日 19:34",
    isCompleted: false
  },
  {
    content: "图雀社区：汇聚精彩的免费实战教程",
    user: "crxk",
    time: "2020年3月2日 19:34",
    isCompleted: false
  },
  {
    content: "图雀社区：汇聚精彩的免费实战教程",
    user: "Pony",
    time: "2020年3月2日 19:34",
    isCompleted: false
  }
];

export const userList: User[] = [
  {
    id: "666666666",
    name: "图雀社区",
    avatar: "https://avatars0.githubusercontent.com/u/39240800?s=60&amp;v=4"
  },
  {
    id: "23410977",
    name: "mRcfps",
    avatar: "https://avatars0.githubusercontent.com/u/23410977?s=96&amp;v=4"
  },
  {
    id: "25455350",
    name: "crxk",
    avatar: "https://avatars1.githubusercontent.com/u/25455350?s=96&amp;v=4"
  },
  {
    id: "23410976",
    name: "pftom",
    avatar: "https://avatars0.githubusercontent.com/u/23410977?s=96&amp;v=4"
  },
  {
    id: "58352313",
    name: "holy",
    avatar: "https://avatars0.githubusercontent.com/u/58352313?s=96&amp;v=4"
  }
];</code></pre></div><p><br>拆分了 <code>TodoInput</code> ，并把假数据移动到单独的文件之后，我们需要修改 <code>src/App.tsx</code> 对应的部分如下：<br></p><div class="highlight"><pre><code class="language-js"><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">"react"</span><span class="p">;</span>

<span class="c1">// ...中间一样
</span><span class="c1"></span>
<span class="k">import</span> <span class="nx">TodoInput</span> <span class="nx">from</span> <span class="s2">"./TodoInput"</span><span class="p">;</span>

<span class="c1">// ... 中间一样
</span><span class="c1"></span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">todoListData</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">"./utils/data"</span><span class="p">;</span>

<span class="k">const</span> <span class="p">{</span> <span class="nx">Title</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Typography</span><span class="p">;</span>
<span class="k">const</span> <span class="p">{</span> <span class="nx">TabPane</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Tabs</span><span class="p">;</span>

<span class="c1">// 中间一样
</span><span class="c1"></span>
<span class="c1">// ... 删除 TodoInput 部分
</span><span class="c1"></span>
<span class="c1">// ... TodoList 保持原样
</span><span class="c1"></span>
<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{};</span>

  <span class="k">const</span> <span class="nx">onFinish</span> <span class="o">=</span> <span class="p">(</span><span class="nx">values</span><span class="o">:</span> <span class="nx">any</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Received values from form: "</span><span class="p">,</span> <span class="nx">values</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">const</span> <span class="nx">ref</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">"App"</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref</span><span class="p">}</span><span class="o">&gt;</span>
    <span class="c1">// ... 中间一样
</span><span class="c1"></span>          <span class="o">&lt;</span><span class="nx">Form</span><span class="p">.</span><span class="nx">Item</span> <span class="nx">name</span><span class="o">=</span><span class="s2">"todo"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">TodoInput</span> <span class="o">/&gt;</span>
          <span class="o">&lt;</span><span class="err">/Form.Item&gt;</span>
          <span class="o">&lt;</span><span class="nx">Form</span><span class="p">.</span><span class="nx">Item</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"primary"</span> <span class="nx">htmlType</span><span class="o">=</span><span class="s2">"submit"</span><span class="o">&gt;</span>
              <span class="nx">提交</span>
            <span class="o">&lt;</span><span class="err">/Button&gt;</span>
          <span class="o">&lt;</span><span class="err">/Form.Item&gt;</span>
        <span class="o">&lt;</span><span class="err">/Form&gt;</span>
      <span class="o">&lt;</span><span class="err">/div&gt;</span>
    <span class="c1">// ... 中间一样
</span><span class="c1"></span>        <span class="o">&lt;</span><span class="err">/div&gt;</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div><p><br>可以看到，上面的内容主要做出了如下的修改：<br></p><ul><li>我们删除了对应的假数据 <code>userList</code> 和 <code>todoListData</code> 及其 Interface 定义 <code>Todo</code> 和 <code>User</code> ，转而从我们创建的 <code>src/utils/data.ts</code> 里面导入 <code>todoListData</code></li><li>接着我们删除了 <code>TodoInput</code> 组件，转而导入我们之前创建的  <code>TodoInput</code> 组件</li><li>接着我们给 <code>Form</code> 表单部分加上了一个提交按钮，以及扩展了 <code>onFinish</code> 函数</li><li>最后我们删除了一些不再需要的导包</li></ul><p class="ztext-empty-paragraph"><br></p><h3>小结</h3><p><br>大功告成，这一节中我们学习了接口（Interface）和枚举（Enum），接口主要是对对象等多属性元素进行类型注解，而枚举是 TS 中独有的一个概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，最后我们通过改进现有的 Todo 应用来实践了学到的这两个概念。</p><blockquote> 想要学习更多精彩的实战技术教程？来<a href="https://link.zhihu.com/?target=https%3A//tuture.co/%3Futm_source%3Dzhihu_zhuanlan" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">图雀社区</a>逛逛吧。</blockquote><a target="_blank" href="https://link.zhihu.com/?target=https%3A//tuture.co/%3Futm_source%3Dzhihu_zhuanlan" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/v2-28c1bf65613673da06dd7a318f8daf0a_180x120.jpg" data-image-width="802" data-image-height="357" class="LinkCard LinkCard--hasImage" data-za-detail-view-id="172"><span class="LinkCard-backdrop" style="background-image:url(https://pic3.zhimg.com/v2-28c1bf65613673da06dd7a318f8daf0a_180x120.jpg)"></span><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">图雀社区</span><span class="LinkCard-meta"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="17" height="17"><path d="M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z" fill-rule="evenodd"></path></svg></span>tuture.co</span></span><span class="LinkCard-imageCell"><img class="LinkCard-image LinkCard-image--horizontal" alt="图标" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-28c1bf65613673da06dd7a318f8daf0a_180x120.jpg"></span></span></a><blockquote> 本文所涉及的源代码都放在了 <a href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Github</a>  或者 <a href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Gitee</a> 上，如果您觉得我们写得还不错，希望您能给<b>❤️这篇文章点赞<a href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Github</a> 或 <a href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Gitee</a> 仓库加星❤</b>️哦~  </blockquote><a target="_blank" href="https://link.zhihu.com/?target=https%3A//github.com/tuture-dev/typescript-tea" data-draft-node="block" data-draft-type="link-card" class="LinkCard LinkCard--noImage" data-za-detail-view-id="172"><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">Github</span><span class="LinkCard-meta"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="17" height="17"><path d="M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z" fill-rule="evenodd"></path></svg></span>github.com</span></span><span class="LinkCard-imageCell"><div class="LinkCard-image LinkCard-image--default"><svg class="Zi Zi--Browser" fill="currentColor" viewBox="0 0 24 24" width="32" height="32"><path d="M11.991 3C7.023 3 3 7.032 3 12s4.023 9 8.991 9C16.968 21 21 16.968 21 12s-4.032-9-9.009-9zm6.237 5.4h-2.655a14.084 14.084 0 0 0-1.242-3.204A7.227 7.227 0 0 1 18.228 8.4zM12 4.836A12.678 12.678 0 0 1 13.719 8.4h-3.438A12.678 12.678 0 0 1 12 4.836zM5.034 13.8A7.418 7.418 0 0 1 4.8 12c0-.621.09-1.224.234-1.8h3.042A14.864 14.864 0 0 0 7.95 12c0 .612.054 1.206.126 1.8H5.034zm.738 1.8h2.655a14.084 14.084 0 0 0 1.242 3.204A7.188 7.188 0 0 1 5.772 15.6zm2.655-7.2H5.772a7.188 7.188 0 0 1 3.897-3.204c-.54.999-.954 2.079-1.242 3.204zM12 19.164a12.678 12.678 0 0 1-1.719-3.564h3.438A12.678 12.678 0 0 1 12 19.164zm2.106-5.364H9.894A13.242 13.242 0 0 1 9.75 12c0-.612.063-1.215.144-1.8h4.212c.081.585.144 1.188.144 1.8 0 .612-.063 1.206-.144 1.8zm.225 5.004c.54-.999.954-2.079 1.242-3.204h2.655a7.227 7.227 0 0 1-3.897 3.204zm1.593-5.004c.072-.594.126-1.188.126-1.8 0-.612-.054-1.206-.126-1.8h3.042c.144.576.234 1.179.234 1.8s-.09 1.224-.234 1.8h-3.042z"></path></svg></div></span></span></a><a target="_blank" href="https://link.zhihu.com/?target=https%3A//gitee.com/tuture/typescript-tea" data-draft-node="block" data-draft-type="link-card" data-image="https://pic1.zhimg.com/v2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg" data-image-width="248" data-image-height="248" class="LinkCard LinkCard--hasImage" data-za-detail-view-id="172"><span class="LinkCard-backdrop" style="background-image:url(https://pic1.zhimg.com/v2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg)"></span><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">图雀社区/typescript-tea</span><span class="LinkCard-meta"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--InsertLink" fill="currentColor" viewBox="0 0 24 24" width="17" height="17"><path d="M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z" fill-rule="evenodd"></path></svg></span>gitee.com</span></span><span class="LinkCard-imageCell"><img class="LinkCard-image LinkCard-image--square" alt="图标" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg"></span></span></a><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-e302897514a48f950b2ccbd7296baf57_b.jpg" data-caption="" data-size="normal" data-rawwidth="900" data-rawheight="500" class="origin_image zh-lightbox-thumb" width="900" data-original="https://pic4.zhimg.com/v2-e302897514a48f950b2ccbd7296baf57_r.jpg"/></noscript><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-e302897514a48f950b2ccbd7296baf57_1440w.jpg" data-caption="" data-size="normal" data-rawwidth="900" data-rawheight="500" class="origin_image zh-lightbox-thumb lazy" width="900" data-original="https://pic4.zhimg.com/v2-e302897514a48f950b2ccbd7296baf57_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-e302897514a48f950b2ccbd7296baf57_b.jpg" data-lazy-status="ok"></figure><p></p><p></p></div></div><div class="ContentItem-time">发布于 2020-04-07</div><div class="Post-topicsAndReviewer"><div class="TopicList Post-Topics"><div class="Tag Topic" data-za-detail-view-path-module="TopicItem" data-za-extra-module="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Topic&quot;,&quot;token&quot;:&quot;19766226&quot;}}}"><span class="Tag-content"><a class="TopicLink" href="https://www.zhihu.com/topic/19766226" target="_blank"><div class="Popover"><div id="Popover3-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover3-content">TypeScript</div></div></a></span></div><div class="Tag Topic" data-za-detail-view-path-module="TopicItem" data-za-extra-module="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Topic&quot;,&quot;token&quot;:&quot;20013159&quot;}}}"><span class="Tag-content"><a class="TopicLink" href="https://www.zhihu.com/topic/20013159" target="_blank"><div class="Popover"><div id="Popover4-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover4-content">React</div></div></a></span></div></div></div><div><div class="Sticky RichContent-actions is-bottom" style=""><div class="ContentItem-actions" data-za-detail-view-path-module="BottomBar" data-za-extra-module="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Post&quot;,&quot;id&quot;:&quot;126342731&quot;}}}"><span><button aria-label="赞同 9 " type="button" class="Button VoteButton VoteButton--up"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--TriangleUp VoteButton-TriangleUp" fill="currentColor" viewBox="0 0 24 24" width="10" height="10"><path d="M2 18.242c0-.326.088-.532.237-.896l7.98-13.203C10.572 3.57 11.086 3 12 3c.915 0 1.429.571 1.784 1.143l7.98 13.203c.15.364.236.57.236.896 0 1.386-.875 1.9-1.955 1.9H3.955c-1.08 0-1.955-.517-1.955-1.9z" fill-rule="evenodd"></path></svg></span>赞同 9</button><button aria-label="反对" type="button" class="Button VoteButton VoteButton--down"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--TriangleDown" fill="currentColor" viewBox="0 0 24 24" width="10" height="10"><path d="M20.044 3H3.956C2.876 3 2 3.517 2 4.9c0 .326.087.533.236.896L10.216 19c.355.571.87 1.143 1.784 1.143s1.429-.572 1.784-1.143l7.98-13.204c.149-.363.236-.57.236-.896 0-1.386-.876-1.9-1.956-1.9z" fill-rule="evenodd"></path></svg></span></button></span><button type="button" class="Button BottomActions-CommentBtn Button--plain Button--withIcon Button--withLabel"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--Comment Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path d="M10.241 19.313a.97.97 0 0 0-.77.2 7.908 7.908 0 0 1-3.772 1.482.409.409 0 0 1-.38-.637 5.825 5.825 0 0 0 1.11-2.237.605.605 0 0 0-.227-.59A7.935 7.935 0 0 1 3 11.25C3 6.7 7.03 3 12 3s9 3.7 9 8.25-4.373 9.108-10.759 8.063z" fill-rule="evenodd"></path></svg></span>添加评论</button><div class="Popover ShareMenu"><div class="ShareMenu-toggler" id="Popover5-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover5-content"><button type="button" class="Button Button--plain Button--withIcon Button--withLabel"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--Share Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path d="M2.931 7.89c-1.067.24-1.275 1.669-.318 2.207l5.277 2.908 8.168-4.776c.25-.127.477.198.273.39L9.05 14.66l.927 5.953c.18 1.084 1.593 1.376 2.182.456l9.644-15.242c.584-.892-.212-2.029-1.234-1.796L2.93 7.89z" fill-rule="evenodd"></path></svg></span>分享</button></div></div><button type="button" class="Button ContentItem-action Button--plain Button--withIcon Button--withLabel"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--Star Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path d="M5.515 19.64l.918-5.355-3.89-3.792c-.926-.902-.639-1.784.64-1.97L8.56 7.74l2.404-4.871c.572-1.16 1.5-1.16 2.072 0L15.44 7.74l5.377.782c1.28.186 1.566 1.068.64 1.97l-3.89 3.793.918 5.354c.219 1.274-.532 1.82-1.676 1.218L12 18.33l-4.808 2.528c-1.145.602-1.896.056-1.677-1.218z" fill-rule="evenodd"></path></svg></span>收藏</button><div class="Post-ActionMenuButton"><div class="Popover"><div id="Popover6-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover6-content"><button type="button" class="Button Button--plain Button--withIcon Button--iconOnly"><span style="display:inline-flex;align-items:center">​<svg class="Zi Zi--Dots Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path d="M5 14a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm7 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm7 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z" fill-rule="evenodd"></path></svg></span></button></div></div></div></div></div></div></article><div class="Post-Sub Post-NormalSub"><div class="PostIndex-Contributions" data-za-detail-view-path-module="ColumnList" data-za-detail-view-path-module_name="文章被以下专栏收录" data-za-extra-module="{}"><h3 class="BlockTitle">文章被以下专栏收录</h3><ul><div class="ContentItem Column-ColumnItem"><div class="ContentItem-main"><div class="ContentItem-image"><a class="ColumnLink" href="https://www.zhihu.com/column/tuture"><div class="Popover"><div id="Popover7-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover7-content"><img class="Avatar Avatar--medium Avatar--round" width="40" height="40" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-fb5558c931866637083e57f786945584_xs.jpg" srcset="https://pic1.zhimg.com/v2-fb5558c931866637083e57f786945584_l.jpg 2x" alt="图雀社区"></div></div></a></div><div class="ContentItem-head"><h2 class="ContentItem-title"><a class="ColumnLink ColumnItem-Title" href="https://www.zhihu.com/column/tuture"><div class="Popover"><div id="Popover8-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover8-content">图雀社区</div></div></a></h2><div class="ContentItem-meta">由 Tuture（https://github.com/tuture-dev/tuture） 工具写成，这里汇集了能够让你从头敲到尾并做出可运行项目的技术教程。
本专栏同步 https://tuture.co/ 上的文章，如果您想查看更多的实战教程，请访问我们的主站 https://tuture.co/。
如果您想投稿，请访问我们的主站 https://tuture.co/，我们有详细的投稿指南。
</div></div><div class="ContentItem-extra"><a href="https://www.zhihu.com/column/tuture" type="button" class="Button">进入专栏</a></div></div></div><div class="ContentItem Column-ColumnItem"><div class="ContentItem-main"><div class="ContentItem-image"><a class="ColumnLink" href="https://www.zhihu.com/column/zander"><div class="Popover"><div id="Popover9-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover9-content"><img class="Avatar Avatar--medium Avatar--round" width="40" height="40" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-e2e951be04861ad091a44f00272f4d55_xs.jpg" srcset="https://pic2.zhimg.com/v2-e2e951be04861ad091a44f00272f4d55_l.jpg 2x" alt="web前端开发"></div></div></a></div><div class="ContentItem-head"><h2 class="ContentItem-title"><a class="ColumnLink ColumnItem-Title" href="https://www.zhihu.com/column/zander"><div class="Popover"><div id="Popover10-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover10-content">web前端开发</div></div></a></h2><div class="ContentItem-meta">知乎编程专栏里更值得关注和学习的web前端开发专栏！专栏主要技术栈：JavaScript，HTML，CSS，nodejs，Vuejs，reactjs，linux，Java，不辣不辣等各种开发工具</div></div><div class="ContentItem-extra"><a href="https://www.zhihu.com/column/zander" type="button" class="Button">进入专栏</a></div></div></div></ul></div><div class="Recommendations-Main" style="width: 1680px;"><h3 class="BlockTitle Recommendations-BlockTitle">推荐阅读</h3><ul class="Recommendations-List"><button class="PagingButton PagingButton-Previous" disabled="" data-za-detail-view-path-module="Unknown" data-za-detail-view-path-module_name="推荐阅读" data-za-extra-module="{}"><svg class="Zi Zi--ArrowLeft" fill="#d3d3d3" viewBox="0 0 24 24" width="40" height="40"><path d="M14.782 16.78a.737.737 0 0 1-1.052 0L9.218 12.53a.758.758 0 0 1 0-1.063L13.73 7.22a.737.737 0 0 1 1.052 0c.29.294.29.77.001 1.063L11 12l3.782 3.716c.29.294.29.77 0 1.063z" fill-rule="evenodd"></path></svg></button><a href="https://zhuanlan.zhihu.com/p/75985369" class="PostItem"><div><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-07282cdd781fea304d30ee535fffdf4e_250x0.jpg" srcset="https://pic3.zhimg.com/v2-07282cdd781fea304d30ee535fffdf4e_qhd.jpg 2x" class="PostItem-TitleImage" alt="React+TypeScript开发Switch组件"><h1 class="PostItem-Title">React+TypeScript开发Switch组件</h1><div class="PostItem-Footer"><span>夏日</span><span class="PostItem-FooterTitle">发表于前端分享</span></div></div></a><a href="https://zhuanlan.zhihu.com/p/57958328" class="PostItem"><div><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-d1146a9a102977ffa4057627b92c4a36_250x0.jpg" srcset="https://pic4.zhimg.com/v2-d1146a9a102977ffa4057627b92c4a36_qhd.jpg 2x" class="PostItem-TitleImage" alt="TypeScript，初次见面，请多指教"><h1 class="PostItem-Title">TypeScript，初次见面，请多指教</h1><div class="PostItem-Footer"><span>徐祁</span><span class="PostItem-FooterTitle">发表于阿里 CC...</span></div></div></a><a href="https://zhuanlan.zhihu.com/p/42141179" class="PostItem"><div><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-96760597cba9aaa7a5869abe15d0a470_250x0.jpg" srcset="https://pic3.zhimg.com/v2-96760597cba9aaa7a5869abe15d0a470_qhd.jpg 2x" class="PostItem-TitleImage" alt="复杂 React 应用中的TypeScript 3.0实践"><h1 class="PostItem-Title">复杂 React 应用中的TypeScript 3.0实践</h1><div class="PostItem-Footer"><span>icepy</span><span class="PostItem-FooterTitle"></span></div></div></a><a href="https://zhuanlan.zhihu.com/p/74749048" class="PostItem"><div><img src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/v2-7f0b0efb2b5a0464d45474da80cfae05_250x0.jpg" srcset="https://pic3.zhimg.com/v2-7f0b0efb2b5a0464d45474da80cfae05_qhd.jpg 2x" class="PostItem-TitleImage" alt="TypeScript + React + Redux = ❤️"><h1 class="PostItem-Title">TypeScript + React + Redux = ❤️</h1><div class="PostItem-Footer"><span>不败花丶</span><span class="PostItem-FooterTitle"></span></div></div></a><button class="PagingButton PagingButton-Next" data-za-detail-view-path-module="Unknown" data-za-detail-view-path-module_name="推荐阅读" data-za-extra-module="{}"><svg class="Zi Zi--ArrowRight" fill="#d3d3d3" viewBox="0 0 24 24" width="40" height="40"><path d="M9.218 16.78a.737.737 0 0 0 1.052 0l4.512-4.249a.758.758 0 0 0 0-1.063L10.27 7.22a.737.737 0 0 0-1.052 0 .759.759 0 0 0-.001 1.063L13 12l-3.782 3.716a.758.758 0 0 0 0 1.063z" fill-rule="evenodd"></path></svg></button></ul></div><div class="Comments-container" data-za-detail-view-path-module="CommentList" data-za-extra-module="{}"><div class="CommentsV2 CommentsV2--withEditor CommentsV2-withPagination"><div class="Topbar CommentTopbar"><div class="Topbar-title"><h2 class="CommentTopbar-title">还没有评论</h2></div><div class="Topbar-options"></div></div><div><div class="CommentsV2-footer CommentEditorV2--normal"><div class="CommentEditorV2-inputWrap"><div class="InputLike CommentEditorV2-input Editable"><div class="Dropzone Editable-content RichText RichText--editable RichText--clearBoth ztext" style="min-height: 198px;"><div class="DraftEditor-root"><div class="public-DraftEditorPlaceholder-root"><div class="public-DraftEditorPlaceholder-inner" id="placeholder-ftnbt" style="white-space: pre-wrap;">写下你的评论...</div></div><div class="DraftEditor-editorContainer"><div aria-describedby="placeholder-ftnbt" class="notranslate public-DraftEditor-content" contenteditable="true" role="textbox" spellcheck="true" tabindex="0" style="outline: none; user-select: text; white-space: pre-wrap; overflow-wrap: break-word;"><div data-contents="true"><div class="Editable-unstyled" data-block="true" data-editor="ftnbt" data-offset-key="7s6is-0-0"><div data-offset-key="7s6is-0-0" class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span data-offset-key="7s6is-0-0"><br data-text="true"></span></div></div></div></div></div></div></div><input multiple="" type="file" accept="image/jpg,image/jpeg,image/png,image/gif" style="display: none;"><div></div></div><div class="CommentEditorV2-inputUpload"><div class="CommentEditorV2-popoverWrap"><div class="Popover CommentEditorV2-inputUpLoad-Icon"><button aria-label="插入表情" data-tooltip="插入表情" data-tooltip-position="bottom" data-tooltip-will-hide-on-click="true" id="Popover11-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="Popover11-content" type="button" class="Button Editable-control Button--plain"><svg class="Zi Zi--Emotion" fill="currentColor" viewBox="0 0 24 24" width="24" height="24"><path d="M7.523 13.5h8.954c-.228 2.47-2.145 4-4.477 4-2.332 0-4.25-1.53-4.477-4zM12 21a9 9 0 1 1 0-18 9 9 0 0 1 0 18zm0-1.5a7.5 7.5 0 1 0 0-15 7.5 7.5 0 0 0 0 15zm-3-8a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm6 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"></path></svg></button></div></div></div></div><button disabled="" type="button" class="Button CommentEditorV2-singleButton Button--primary Button--blue">发布</button></div></div><div><div class="CommentListV2"></div></div></div></div></div></div></main><div class="CornerButtons"><div class="CornerAnimayedFlex"><button data-tooltip="回到顶部" data-tooltip-position="left" data-tooltip-will-hide-on-click="true" aria-label="回到顶部" type="button" class="Button CornerButton Button--plain"><svg class="Zi Zi--BackToTop" aria-label="回到顶部" fill="currentColor" viewBox="0 0 24 24" width="24" height="24"><path d="M16.036 19.59a1 1 0 0 1-.997.995H9.032a.996.996 0 0 1-.997-.996v-7.005H5.03c-1.1 0-1.36-.633-.578-1.416L11.33 4.29a1.003 1.003 0 0 1 1.412 0l6.878 6.88c.782.78.523 1.415-.58 1.415h-3.004v7.005z"></path></svg></button></div></div></div></div><script nonce="" async="" src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/js"></script><script nonce="">function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag("js",new Date),gtag("config","UA-149949619-1");</script><script id="js-clientConfig" type="text/json">{"host":"zhihu.com","protocol":"https:","wwwHost":"www.zhihu.com","fetchRoot":{"www":"https:\u002F\u002Fwww.zhihu.com","api":"https:\u002F\u002Fapi.zhihu.com","zhuanlan":"https:\u002F\u002Fzhuanlan.zhihu.com"}}</script><script id="js-initialData" type="text/json">{"initialState":{"common":{"ask":{}},"loading":{"global":{"count":0},"local":{"env\u002FgetIpinfo\u002F":false,"article\u002Fget\u002F":false,"brand\u002FgetUrl\u002F":false}},"club":{"tags":{},"admins":{"data":[]},"members":{"data":[]},"explore":{},"profile":{},"checkin":{},"comments":{"paging":{},"loading":{},"ids":{}},"postList":{"paging":{},"loading":{},"ids":{}},"recommend":{"data":[]}},"entities":{"users":{"tuture-dev":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dbef2effd22b98770e82fd26441775b6_{size}.jpg","uid":"945606485112315904","userType":"people","isFollowing":false,"urlToken":"tuture-dev","id":"eb21a07c9757450cc5b871d4b4a68eb1","description":"开源实战教程写作工具 [Tuture](https:\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftuture) 的开发者，欢迎访问图雀社区官网：[图雀社区](https:\u002F\u002Ftuture.co)。","name":"一只图雀","isAdvertiser":false,"headline":"汇聚精彩的免费实战教程，公众号「图雀社区」","gender":1,"url":"\u002Fpeople\u002Feb21a07c9757450cc5b871d4b4a68eb1","avatarUrl":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dbef2effd22b98770e82fd26441775b6_l.jpg","isOrg":false,"type":"people","badge":[],"exposedMedal":{"medalId":"1124316222665379841","medalName":"我的知乎 2019","avatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-2592b0b52e1fac99f69b38e00252413b_r.png","miniAvatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ad363cc3088dc8de7544fd08b1c4987a_is.png","description":"参与「我的知乎 2019」即可获得"}}},"questions":{},"answers":{},"articles":{"126342731":{"trackUrl":["https:\u002F\u002Fsugar.zhihu.com\u002Fplutus_adreaper\u002Fpage_monitor_log?si=__SESSIONID__&ti=__ATOKEN__&at=view&pf=__OS__&ed=__MEMBERID__&idfa=__IDFA__&imei=__IMEI__&androidid=__ANDROIDID__&oaid=__OAID__&ci=__CREATIVEID__"],"id":126342731,"title":"类型即正义：TypeScript 从入门到实践（一）","type":"article","excerptTitle":"","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F126342731","imageUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-c5dcf069b7457e7176c618d4708de845_b.jpg","titleImage":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-c5dcf069b7457e7176c618d4708de845_b.jpg","excerpt":"\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-625450fff234fce8a5e21ab75adf5648_200x112.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2350\" data-rawheight=\"1544\" data-watermark=\"watermark\" data-original-src=\"v2-625450fff234fce8a5e21ab75adf5648\" data-watermark-src=\"v2-a8b5f3f2b21583e1827217e3894f48d0\" data-private-watermark-src=\"\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-625450fff234fce8a5e21ab75adf5648_r.png\"\u002F\u003E作者：一只图雀 仓库：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E 、\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGitee\u003C\u002Fa\u003E 图雀社区主站（首发）：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=http%3A\u002F\u002Ftuture.co\u002F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u003C\u002Fa\u003E 博客：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fjuejin.im\u002Fuser\u002F5b33414351882574b9694d28\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E掘金\u003C\u002Fa\u003E、\u003Ca href=\"https:\u002F\u002Fwww.zhihu.com\u002Fpeople\u002Ftuture-dev\" class=\"internal\"\u003E知乎\u003C\u002Fa\u003E、\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fwww.imooc.com\u002Fu\u002F8413857\u002Farticles\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E慕课\u003C\u002Fa\u003E 公众号：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Ftuture.co\u002Fimages\u002Fsocial\u002Fwechat.png\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u003C\u002Fa\u003E 联系我：关注公众号后可以加图雀酱微信哦 原创不易，❤️点赞+评论+收藏 ❤️三连，鼓励作者写出更好的教程。 源起JavaScript 已经占领了世…","created":1586245907,"updated":1586245907,"author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dbef2effd22b98770e82fd26441775b6_{size}.jpg","uid":"945606485112315904","userType":"people","isFollowing":false,"urlToken":"tuture-dev","id":"eb21a07c9757450cc5b871d4b4a68eb1","description":"开源实战教程写作工具 [Tuture](https:\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftuture) 的开发者，欢迎访问图雀社区官网：[图雀社区](https:\u002F\u002Ftuture.co)。","name":"一只图雀","isAdvertiser":false,"headline":"汇聚精彩的免费实战教程，公众号「图雀社区」","gender":1,"url":"\u002Fpeople\u002Feb21a07c9757450cc5b871d4b4a68eb1","avatarUrl":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dbef2effd22b98770e82fd26441775b6_l.jpg","isOrg":false,"type":"people","badge":[],"exposedMedal":{"medalId":"1124316222665379841","medalName":"我的知乎 2019","avatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-2592b0b52e1fac99f69b38e00252413b_r.png","miniAvatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ad363cc3088dc8de7544fd08b1c4987a_is.png","description":"参与「我的知乎 2019」即可获得"}},"commentPermission":"all","state":"published","imageWidth":800,"imageHeight":359,"content":"\u003Cblockquote\u003E 作者：一只图雀\u003Cbr\u002F\u003E 仓库：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E 、\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGitee\u003C\u002Fa\u003E\u003Cbr\u002F\u003E 图雀社区主站（首发）：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=http%3A\u002F\u002Ftuture.co\u002F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u003C\u002Fa\u003E \u003Cbr\u002F\u003E 博客：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fjuejin.im\u002Fuser\u002F5b33414351882574b9694d28\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E掘金\u003C\u002Fa\u003E、\u003Ca href=\"https:\u002F\u002Fwww.zhihu.com\u002Fpeople\u002Ftuture-dev\" class=\"internal\"\u003E知乎\u003C\u002Fa\u003E、\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fwww.imooc.com\u002Fu\u002F8413857\u002Farticles\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E慕课\u003C\u002Fa\u003E\u003Cbr\u002F\u003E 公众号：\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Ftuture.co\u002Fimages\u002Fsocial\u002Fwechat.png\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u003C\u002Fa\u003E \u003Cbr\u002F\u003E 联系我：关注公众号后可以加图雀酱微信哦\u003Cbr\u002F\u003E 原创不易，❤️点赞+评论+收藏 ❤️三连，鼓励作者写出更好的教程。\u003Cbr\u002F\u003E \u003C\u002Fblockquote\u003E\u003Ch2\u003E源起\u003C\u002Fh2\u003E\u003Cp\u003EJavaScript 已经占领了世界上的每一个角落，能访问网页的地方，基本上就有 JavaScript 在运作，然而 JavaScript 因为其动态、弱类型、解释型语言的特性、出错的调用栈隐蔽，使得开发者不仅在调试错误上花费大把时间，在团队协作开发时理解队友编写代码也极其困难。TypeScript 的出现极大的解决了上面的问题，TypeScript -- 一个 JavaScript 的超集，它作为一门编译型语言，提供了对类型系统和最新 ES 语法的支持，使得我们可以在享受使用 ES 最新语法的编写代码的同时，还能在写代码的过程中就规避很多潜在的语法、语义错误；并且其提供的类型系统使得我们可以在团队协作编写代码时可以很容易的了解队友代码的含义：输入和输出，大大提高了团队协作编写大型业务应用的效率。在现代 JavaScript 世界中，已经有很多大型库在使用 TypeScript 重构，包括前端三大框架：React、Vue、Angular，还有知名的组件库 antd，material，在很多公司内部的大型业务应用也在用 TypeScript 开发甚至重写现有的应用，所以如果你想编写大型业务应用或库，或者想写出更利于团队协作的代码，那么 TypeScript 有十足的理由值得你学习！本文是 TypeScript 系列教程的第一篇，主要通过使用 antd 组件库实战演练一个 TypeScript 版本 React TodoList 应用来讲解 TypeScript 的语法，使得你能在学会语法的同时还能完成一个实际可运行的项目。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cblockquote\u003E 本文所涉及的源代码都放在了 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E  或者 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGitee\u003C\u002Fa\u003E 上，如果您觉得我们写得还不错，希望您能给\u003Cb\u003E❤️这篇文章点赞\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E 或 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGitee\u003C\u002Fa\u003E 仓库加星❤\u003C\u002Fb\u003E️哦~\u003C\u002Fblockquote\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u002Ftypescript-tea\u003C\u002Fa\u003E\u003Cblockquote\u003E 此教程属于 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Freact-roadmap\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EReact 前端工程师学习路线\u003C\u002Fa\u003E的一部分，欢迎来 Star 一波，鼓励我们继续创作出更好的教程，持续更新中~  \u003C\u002Fblockquote\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Freact-roadmap\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EReact 前端工程师学习路线\u003C\u002Fa\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003E代码准备\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们接下来要讲解的整个 \u003Cb\u003E类型即正义：TypeScript 从入门到实践 \u003C\u002Fb\u003E系列是基于一个实战项目的，这个实战项目会贯穿整个系列教程的讲解周期，所以我们要尽可能全且精炼的讲解 TypeScript 语法知识的同时，还我们需要一个恰到好处的实战项目，因为准备项目代码的过程不是系列教程讲解的主线，所以如果你有兴趣学习如何搭建 TypeScript React 的开发环境，那么可以学习一下我们的序言教程：\u003C\u002Fp\u003E\u003Cp\u003E\u003Cb\u003E类型即正义：TypeScript 从入门到实践（序章）\u003C\u002Fb\u003E\u003Cbr\u002F\u003E**\u003Cbr\u002F\u003E如果你已经对 TypeScript 如何搭建 React 开发环境，配置 Ant Design 组件库等很熟悉，或者不太感兴趣，那么你也可以直接克隆我们为你准备好的代码：\u003C\u002Fp\u003E\u003Cp\u003E如果你偏爱 码云，那么你可以运行如下命令来获取初始代码：\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Egit clone -b initial-code https:\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea.git\n\u003Cspan class=\"nb\"\u003Ecd\u003C\u002Fspan\u003E typescript-tea \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm install \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm start\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E如果你偏爱 Github，那么你可以运行如下命令来获取初始代码：\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Egit clone -b initial-code git@github.com:tuture-dev\u002Ftypescript-tea.git\n\u003Cspan class=\"nb\"\u003Ecd\u003C\u002Fspan\u003E typescript-tea \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm install \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm start\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E通过上面的命令克隆初始代码之后，然后把项目跑起来，你应该可以看到如下效果：\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a8b5f3f2b21583e1827217e3894f48d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2350\" data-rawheight=\"1544\" class=\"origin_image zh-lightbox-thumb\" width=\"2350\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a8b5f3f2b21583e1827217e3894f48d0_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2350&#39; height=&#39;1544&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2350\" data-rawheight=\"1544\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2350\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a8b5f3f2b21583e1827217e3894f48d0_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a8b5f3f2b21583e1827217e3894f48d0_b.jpg\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003E\u003Cbr\u002F\u003E \u003Cbr\u002F\u003EBoom！！！一个暗黑模式的 TodoList，心动了嘛？不管心不心动，你都可以愉快的开始接下来的 TypeScript 学习了✌️。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003ETypeScript 初探\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cbr\u002F\u003E正式 TS 时间☕️，TS 是一门静态编程语言，它是 JavaScript 的超集。首先我们先来解释一下什么是编程语言，然后我们再来引出 TypeScript 是什么。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E编程语言是什么？\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E那么什么是编程语言了？编程语言是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E我们拿 JS 来举例，一门标准的编程语言一般包含如下几个部分：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E数据结构：如原始数据类型 string\u002Fnumber\u002Fvoid 等，非原始数据类型 array\u002Fobject\u002Fenum 等\u003C\u002Fli\u003E\u003Cli\u003E控制结构：如 if\u002Felse 、 switch 、while、for 循环等\u003C\u002Fli\u003E\u003Cli\u003E组织结构：如 函数、类\u003C\u002Fli\u003E\u003Cli\u003E特性：如 JS 的原型链\u003C\u002Fli\u003E\u003Cli\u003E常用的 API：如 isNaN 判断是不是非数字，toFixed 将小数进行四舍五入操作\u003C\u002Fli\u003E\u003Cli\u003E运行环境：如 浏览器端的 JavaScript、服务器端的 Node\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cbr\u002F\u003E其中前五种又称为语言内核，也就是我们常常喊的 ECMAScript 2015，或者 ES6；最后一个运行环境在浏览器端结合 BOM\u002FDOM 即成为 JavaScript，在服务器端结合一些文件\u002F网络的操作即成为 Node。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003ETypeScript 是什么？\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E而 TS，作为 JavaScript 的超集，包含着两类属性：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E属于 JavaScript 端的编程语言特性，使得我们可以执行各种 JavaScript 相关的操作：变量声明、编写 if\u002Felse 控制流、使用循环处理重复任务、使用函数执行特定的任务块、使用类来组织和复用代码和模拟真实世界的操作等，还有新特性比如：装饰器、Iterator、Generator 这些。这类特性在此篇文章中，我们默认你已经很清楚了，不会做过多的讲解。\u003C\u002Fli\u003E\u003Cli\u003E属于 TypeScript 端独有的特性：类型，它也具有一套编程语言的特性，比如标志一个变量是 string 类型，一个函数的参数有三个，它们的类型分别是 string\u002Fnumber\u002Fboolean，返回类型为 never等，这是基础类型，我们甚至可以基于类型进行编程，使用类型版本的控制、组织结构来完成高级类型的编写，进而将类型附着在 JavaScript 对应的编程语言特性上，将 JS 静态化，使得我们可以在编译期间就能发现类型上的错误，这一特性是我们本篇文章的重点。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cbr\u002F\u003E好的，读到这里，相比很多读者已经清楚了，其实 TS 没什么神秘的，主要就是设计了一套类似编程语言的类型语言，然后将这些类型附着在原 JavaScript 的语言之上，给其加上类型限制使得其静态化，进而可以快速的在编写时发现很多潜在的问题，帮助我们编写错误率更低，更适合团队协作的代码，这也是 TypeScript 适合编写大型的业务应用的原因。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E类型语言之数据结构\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E其中 TS 数据结构又包含原始类型、非原始类型、特殊类型和高级类型等几类。我们将结合在 TS 类型侧的定义，以及附着在 JS 上进行实战来讲解。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E原始类型\u003C\u002Fh3\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003ETS 类型侧的定义\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E和 JS 中的原始数据类型一样，TS 对应着一致的类型定义，包括下面八种：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003Enumber\u003C\u002Fli\u003E\u003Cli\u003Estring\u003C\u002Fli\u003E\u003Cli\u003Eboolean\u003C\u002Fli\u003E\u003Cli\u003Enull\u003C\u002Fli\u003E\u003Cli\u003Eundefined\u003C\u002Fli\u003E\u003Cli\u003Evoid\u003C\u002Fli\u003E\u003Cli\u003Esymbol\u003C\u002Fli\u003E\u003Cli\u003Ebigint\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cblockquote\u003E\u003Cb\u003E提示\u003C\u002Fb\u003E 其中前六种是 ES5 中就有的，symbol 从 ES6 开始引入，bigint 是 ES2020 新引进的。\u003Cbr\u002F\u003E \u003C\u002Fblockquote\u003E\u003Cp\u003E\u003Cbr\u002F\u003E上面是 TS 的原始类型，我们之前提到 TS 就是将类型附着在 JS 上，将其类型化，那么我们来看看上面的原始类型如何附着在 JS 上，将其类型化。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E附着在 JS 上的实战\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003ETS 通过独特的\u003Cb\u003E冒号语法\u003C\u002Fb\u003E来将其类型侧定义的类型附着在 JS 上，我们来看几个例子：\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E用 JS 语言来写图雀社区的 Slogan，我们一般会这么写：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EtutureSlogan\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s1\"\u003E&#39;图雀社区，汇聚精彩的免费实战教程&#39;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们可以确定，这句 Slogan 是一个 string 类型的，所以我们用对应的 TS 类型附着在其变量定义上如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst tutureSlogan: string = &#39;图雀社区，汇聚精彩的免费实战教程&#39;;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E这样我们就给原 JS 的 \u003Ccode\u003EtutureSlogan\u003C\u002Fcode\u003E  变量加上了类型定义，它是一个 \u003Ccode\u003Estring\u003C\u002Fcode\u003E  类型的变量，通过这样的操作，原 JS 变量的类型就被静态化了，在初始化时，就不能再赋值其他的类型给这个 \u003Ccode\u003EtutureSlogan\u003C\u002Fcode\u003E 变量了，比如我们将 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 类型的字面量赋值给 \u003Ccode\u003EtutureSlogan\u003C\u002Fcode\u003E ，就会报错：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst tutureSlogan: string = 5201314 \u002F\u002F 报错 Type &#39;5201314&#39; is not assignable to Type &#39;string&#39;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E这就是 TS 的强大之处，当团队编码时事先约定好数据的类型，那么后续编写并调用这些设置好类型的变量时就会强制起约束作用，就像上面的代码一样，如果给 \u003Ccode\u003EtutureSlogan\u003C\u002Fcode\u003E 赋值  \u003Ccode\u003E5201314\u003C\u002Fcode\u003E 就会报错，其实你大可克制一点对吧 ，给 \u003Ccode\u003E5201314\u003C\u002Fcode\u003E 加个限制，两边带上引号 \u003Ccode\u003E&#39;5201314&amp;\u003C\u002Fcode\u003Eamp;#x27; 问题就迎刃而解了，爱也可以是克制 。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cb\u003E提示\u003C\u002Fb\u003E 有些细心的同学可能对上面的报错信息有点不能理解，对于报错信息的后半段类型 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 可能理解，因为我们给 \u003Ccode\u003EtutureSlogan\u003C\u002Fcode\u003E 限制了 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型，但是对于我们的赋值 \u003Ccode\u003E5201314\u003C\u002Fcode\u003E ，它原本是一个 JS 的 number 类型的字面量，为什么也成了 \u003Ccode\u003EType\u003C\u002Fcode\u003E 了？ 那是因为，TS 引擎在对语句进行编译的时候，会对变量赋值两端做一个类型推理，比如对赋值语句的右侧 \u003Ccode\u003E5201314\u003C\u002Fcode\u003E ，会将其推理成 \u003Ccode\u003E5201314\u003C\u002Fcode\u003E 这个类型，它是一个属于 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 类型的一个特殊的 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 类型，可以被分配（\u003Ccode\u003Eassignable\u003C\u002Fcode\u003E )给 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 类型的变量，这里的 \u003Ccode\u003Eassignable\u003C\u002Fcode\u003E 是可分配的意思，就是一个子类型可以被分配给一个父类型，比如数字 1 可以被分配给 number 数字类型，但因为 number 类型和 string 类型是冲突的，所以这里报错了。 这里读者可能会有感觉了就是，你写的 JS 语句，加上类型定义之后，在 TS 编译器的世界里，一切皆类型了，它会以一种类型的视角去看待原 JS 语句，比如上面的语句，在 TS 编译器眼里，就是 \u003Ccode\u003E5201314\u003C\u002Fcode\u003E 类型和 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型的一个比较过程，如果比较一致，那么好的，我 TS 编译器今天就放你一马，让你逍遥快活。\u003Cbr\u002F\u003E \u003C\u002Fblockquote\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E小结\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们上面说到了 TS 的原始类型，一共有八个之多，并且通过其中的 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型来讲解了如何将 TS 类型附着在原 JS 语法上以静态化 JS 语言，剩下的 7 个原始类型的用法和 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型类似，我们将在之后的讲解中逐渐用到其中的类型。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E非原始类型\u003C\u002Fh3\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003ETS 类型侧的定义\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E同样的 JS 中的非原始数据类型一样，TS 中也存在非原始类型，表示出了八种原始类型之外的类型，非原始类型也称为是 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 类型。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E实际上 TS 中还有几个常见的非原始类型，例举如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003Earray\u003C\u002Fli\u003E\u003Cli\u003Etuple\u003C\u002Fli\u003E\u003Cli\u003Eenum\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cbr\u002F\u003E且因为它们属于 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 类型，所以 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 类型实际上就代表了非原始类型。在上面的三个类型以及其父类型 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 中，\u003Ccode\u003Earray\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 其实我们应该有点熟悉，至于 \u003Ccode\u003Etuple\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eenum\u003C\u002Fcode\u003E 则是 TS 中新增的类型，JS 中正式提案中目前是没有的。讲完了类型侧定义，我们马上来实践一下上面的 \u003Ccode\u003Earray\u003C\u002Fcode\u003E 和 \u003Ccode\u003Eenum\u003C\u002Fcode\u003E 非原始类型。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003Earray 类型附着实战\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E其中 \u003Ccode\u003Earray\u003C\u002Fcode\u003E 类型我们比较熟悉，但这里有个不同就是之前我们的 JS 因为是动态语言，所以一个数组里面可以有各种不同的数据类型项，比如我们看如下 JS 语句：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E&#39;1&#39;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s1\"\u003E&#39;3&#39;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，从 TS 的角度去看这个数组变量 \u003Ccode\u003Earr\u003C\u002Fcode\u003E 所包含的类型，存在字符串类型 \u003Ccode\u003E&#39;1&#39;\u003C\u002Fcode\u003E 和 \u003Ccode\u003E&#39;3&#39;\u003C\u002Fcode\u003E ，以及数字类型 \u003Ccode\u003E2\u003C\u002Fcode\u003E 。但 TS 总的数组类型要求数组中的元素都是同一个类型，不允许动态变化，比如我们为上面的数组变量 \u003Ccode\u003Earr\u003C\u002Fcode\u003E 声明类型应该如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst arr: string[] = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;];\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，我们给变量 \u003Ccode\u003Earr\u003C\u002Fcode\u003E 声明了 \u003Ccode\u003Estring[]\u003C\u002Fcode\u003E 类型，即一个 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型后面跟着一个数组标志，表示是字符串数组类型，当声明了 \u003Ccode\u003Estring[]\u003C\u002Fcode\u003E 类型之后，我们需要把之前的数组 \u003Ccode\u003E2\u003C\u002Fcode\u003E 改成字符串 \u003Ccode\u003E&#39;2&#39;\u003C\u002Fcode\u003E 。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E我们注意到 \u003Ccode\u003Earray\u003C\u002Fcode\u003E 类型，它要求数组中每项的类型都一样，一般应用在数组的长度未知的情况，用特定的类型，比如 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型来约束数组的每一项。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E然而从 JS 转过来的同学大多数同学可能对这个 \u003Ccode\u003Earray\u003C\u002Fcode\u003E 类型不适应了，我们 JS 的同学经常会遇到编写一个数组，其中的多项的类型不一样，就和我们上面的 JS \u003Ccode\u003Earr\u003C\u002Fcode\u003E 的项一样，既有 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型又有 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 类型，那这该怎么办了？还好！TS 的设计者也为我们考虑到了这一点，那就是我们下面要讲到的 \u003Ccode\u003Etuple\u003C\u002Fcode\u003E  （元组）类型。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003Etuple 类型附着实战\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E大家可能对 \u003Ccode\u003Etuple\u003C\u002Fcode\u003E （元组）类型很陌生了，其实元组是一种特殊的数组类型，它主要用于这样的场景：“一个数组的项数已知，其中每项的类型也已知”，这句话说起来可能比较绕，我们用上面讲数组的例子来讲元组：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst arr = [&#39;1&#39;, 2, &#39;3&#39;];\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们知道上面的数组第一项和第三项的类型为 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型，第二项的类型为 \u003Ccode\u003Enumber\u003C\u002Fcode\u003E 类型，现在我们要给这个 \u003Ccode\u003Earr\u003C\u002Fcode\u003E 附着一个类型，使得其静态化。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E这个条件满足我们上面说的元组的适用场景，我们通过给 \u003Ccode\u003Earr\u003C\u002Fcode\u003E 一个对应的元组类型，让我们可以保持上面的写法不变：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst arr: [string, number, string] = [&#39;1&#39;, 2, &#39;3&#39;];\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，元组就是形如 \u003Ccode\u003E[type1, type2, type3, ...., typen]\u003C\u002Fcode\u003E 这样数组长度已知，且类型已知的情况，其中 \u003Ccode\u003Etype1\u003C\u002Fcode\u003E 到 \u003Ccode\u003Etypen\u003C\u002Fcode\u003E 中所有的类型都可以不一样。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E小结\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E在这一小结中我们讲解了一下什么是非原始类型，然后说明了在 TS 中有四种非原始类型，其中有一种代表非原始类型 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E ，然后剩下的三种属于 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 类型。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E接着我们通过实践讲解了 \u003Ccode\u003Earray\u003C\u002Fcode\u003E 和 \u003Ccode\u003Etuple\u003C\u002Fcode\u003E 类型，对于 \u003Ccode\u003Eenum\u003C\u002Fcode\u003E 类型和 \u003Ccode\u003Eobject\u003C\u002Fcode\u003E 类型本身，我们将留在之后的章节来讲，敬请期待✌️。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E特殊类型\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003ETS 中还有几个常用的特殊类型，它们是 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 、\u003Ccode\u003Eunknown\u003C\u002Fcode\u003E 和 \u003Ccode\u003Enever\u003C\u002Fcode\u003E ，其中 \u003Ccode\u003Enever\u003C\u002Fcode\u003E 类型一般会伴随着和函数的类型声明一起使用，所以我们将 \u003Ccode\u003Enever\u003C\u002Fcode\u003E 类型的时候会提到函数的类型如何进行声明。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E接下来我们来讲一讲这三个类型的含义和应用。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003Eany 类型定义与实战\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E\u003Ccode\u003Eany\u003C\u002Fcode\u003E 的字面含义是 “任何”，主要用于在编码的时候不知道一个变量的类型，所以先给它加一个 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 类型定义，表示它可以是任何类型，一般留待后续确认此变量类型之后再将 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 改为具体的类型。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E我们来看一个例子，比如我们有下面一段 TS 变量定义语句：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Edemand\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eany\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E因为有时候产品给一个需求，要我们去开发一个新功能，给了设计稿，但是没交接清楚，对于设计稿有一些内容我们想提前做，但是因为不清楚具体的类型，比如这里的 \u003Ccode\u003Edemand\u003C\u002Fcode\u003E ，所以我们这里给 \u003Ccode\u003Edemand\u003C\u002Fcode\u003E 一个 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 类型，然后继续做其他的内容，这样既不会出错，也不会影响其他的开发进度。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E等到产品把具体的上下文交代清楚了，诶！我们清楚了知道这个 \u003Ccode\u003Edemand\u003C\u002Fcode\u003E 的类型了，我们就可以回过头来给其附着一个严格的类型定义，比如我们知道它是 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型，那么我们再返回来对其修改如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Elet demand: string;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E就是这样，\u003Ccode\u003Eany\u003C\u002Fcode\u003E 的应用场景大多是这样的。但是玩 TS 的朋友要小心哦，不要一碰到不确定的就写个 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 类型，然后写了之后还不改，那就把 TS 用成了 AnyScript 了，这就和 JS 一样了 。所以你看呀，TS 的优秀之处在于，你完全可以在 TS 的环境中写 JS 还能享受 TS 带来的各种静态语言的优势，所以这么受欢迎也是可以理解滴。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003Eunknown 类型定义与实战\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E\u003Ccode\u003Eunknown\u003C\u002Fcode\u003E 类型和 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 都可以表示任何类型，应用场景也和上面类型，但是它更安全。那么具体安全在哪里了？我们通过一个例子来看一看：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Elet demandOne: any;\nlet demandTwo: unknown;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们拿到了开发需求，但是不清楚具体类型又打算继续开发时，上面两种情况都可以使用，但是当我们具体使用这两个变量的时候，\u003Ccode\u003Eany\u003C\u002Fcode\u003E 类型的变量是可以进行任意进行赋值、实例化、函数执行等操作，但是 \u003Ccode\u003Eunknown\u003C\u002Fcode\u003E 只允许赋值，不允许实例化、函数执行等操作，我们来看个例子：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003EdemandOne = &#39;Hello, Tuture&#39;; \u002F\u002F 可以的\ndemandTwo = &#39;Hello, Ant Design&#39;; \u002F\u002F 可以的\n\ndemandOne.foo.bar() \u002F\u002F 可以的\ndemandTwo.foo.bar() \u002F\u002F 报错\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，\u003Ccode\u003Eunknown\u003C\u002Fcode\u003E 类型只允许赋值操作，不允许对象取值（Getter)   、函数执行等操作，所以它更安全。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003Enever \u002F 函数类型定义与实战\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E\u003Ccode\u003Enever\u003C\u002Fcode\u003E 的字面意思是 “永不”，在 TS 中代表不存在的值类型，一般用于给函数进行类型声明，函数绝不会有返回值的时候使用，比如函数内抛出错误，我们首先看个例子将讲解一下如何给函数进行类型声明，然后接着我们讲  \u003Ccode\u003Enever\u003C\u002Fcode\u003E 类型如何使用：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Efunction responseError(message) {\n  \u002F\u002F ... 具体操作，接收信息，抛出错误\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E对于上面的函数，我们可以使用箭头函数的形式把它抽象成为形如 \u003Ccode\u003E(args1, args2, ... , argsn) =&gt; returnValue\u003C\u002Fcode\u003E ，我们主要关注点在于函数的输入和输出，所以我们在类型声明的时候把函数的输入参数的类型和输出结果的类型定义好就可以了。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E我们注意到上面我们定义的函数有一个参数： \u003Ccode\u003Emessage\u003C\u002Fcode\u003E  ，并且函数体内根据 \u003Ccode\u003Emessage\u003C\u002Fcode\u003E 抛出对应的错误，那么我们来给它进行类型声明如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Efunction responseError(message: string): never {\n  \u002F\u002F ... 具体操作，接收信息，抛出错误\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到我们同样使用了 TS 的冒号语法来进行函数参数和返回值的类型定义，因为 \u003Ccode\u003Emessage\u003C\u002Fcode\u003E  一般是一个字符串 ID，所以我们给它 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 类型，而这个函数绝不会有返回值，只是单纯的抛出错误，所以我们给返回值一个 \u003Ccode\u003Enever\u003C\u002Fcode\u003E 类型。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E动手实践\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E基本了解了类型语言的数据结构之后，我们马上来写一点 React 代码来实践我们学到的知识。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E我们之前准备的代码中可以看到，有两个假数据数组 \u003Ccode\u003EtodoListData\u003C\u002Fcode\u003E 和 \u003Ccode\u003EuserList\u003C\u002Fcode\u003E ，我们使用之前学到的知识来给这两个数组进行类型定义，打开 \u003Ccode\u003Esrc\u002FApp.tsx\u003C\u002Fcode\u003E 对其中的内容作出对应的修改如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003E\u002F\u002F ...\ninterface Todo {\n  user: string;\n  time: string;\n  content: string;\n  isCompleted: boolean;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\nconst todoListData: Todo[] = [\n  {\n    content: &#34;图雀社区：汇聚精彩的免费实战教程&#34;,\n    user: &#34;mRcfps&#34;,\n    time: &#34;2020年3月2日 19:34&#34;,\n    isCompleted: false\n  },\n  \u002F\u002F ...\n];\n\nconst userList: User[] = [\n  \u002F\u002F ...\n];\n\n\u002F\u002F ...\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，上面我们定义了两个 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E  Todo 和 User，然后以数组类型的方式对 \u003Ccode\u003EtodoListData\u003C\u002Fcode\u003E 和 \u003Ccode\u003EuserList\u003C\u002Fcode\u003E 进行注解，表示 \u003Ccode\u003EtodoListData\u003C\u002Fcode\u003E 是 \u003Ccode\u003ETodo[]\u003C\u002Fcode\u003E 类型，\u003Ccode\u003EuserList\u003C\u002Fcode\u003E 是 \u003Ccode\u003EUser\u003C\u002Fcode\u003E 类型。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E这里的 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E 我们还没用提到，我们将马上在后面讲到，可以理解它类似 JS 中的对象，用来组织一组类型，就比如我们这里  \u003Ccode\u003EtodoList\u003C\u002Fcode\u003E 中单个元素实际上是包含四个属性的对象，其中前三个属性为 \u003Ccode\u003Estring\u003C\u002Fcode\u003E 原始类型，最后一个属性为 \u003Ccode\u003Eboolean\u003C\u002Fcode\u003E 类型，所以我们为了给 单个对象元素进行类型注解，我们使用了 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E 。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003E枚举和接口\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cbr\u002F\u003E在上一节中我们提到了 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E ，当时没有细讲，这一节我们就先来细细说一下 \u003Ccode\u003Einterface\u003C\u002Fcode\u003E 是什么？\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003EInterface\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E它相当于类型中的 JS 对象，用于对函数、类等进行结构类型检查，所谓的结构类型检查，就是两个类型的结构一样，那么它们的类型就是兼容的，这在计算机科学的世界里也被成为 “鸭子类型”。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cb\u003E提示\u003C\u002Fb\u003E \u003Cb\u003E什么鸭子类型？\u003C\u002Fb\u003E 当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。\u003Cbr\u002F\u003E \u003C\u002Fblockquote\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们马上来看一个例子了解一个 \u003Ccode\u003EInterface\u003C\u002Fcode\u003E 是怎么样的，比如我们之前对象 \u003Ccode\u003ETodo\u003C\u002Fcode\u003E ，一个 Todo 对象如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etodo\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Econtent\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s1\"\u003E&#39;图雀社区，汇聚精彩的免费技术教程&#39;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Euser\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s1\"\u003E&#39;mRcfps&#39;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Etime\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s1\"\u003E&#39;2020年3月2日 19:34&#39;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003EisCompleted\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E现在我们要这个 todo 做一个类型注解，根据之前提到的 “鸭子类型” 的方式，我们可以定义一个 Interface 来为它做注解：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Einterface Todo {\n  content: string;\n  user: string;\n  time: string;\n  isCompleted: boolean;\n}\n\nconst todo: Todo = {\n \u002F\u002F ...\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到我们的接口 \u003Ccode\u003ETodo\u003C\u002Fcode\u003E 内容有四个字段，并且标注了这四个字段的类型，比如 \u003Ccode\u003Econtent\u003C\u002Fcode\u003E 为 \u003Ccode\u003Estring\u003C\u002Fcode\u003E ，这个接口的样子和 \u003Ccode\u003Etodo\u003C\u002Fcode\u003E 对象是一样的，所以用 Interface  \u003Ccode\u003ETodo\u003C\u002Fcode\u003E  来注解 \u003Ccode\u003Etodo\u003C\u002Fcode\u003E 是可行的，用 VSCode 的同学，应该可以看到我们这样写之后，编辑器里面没有抛出异常。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E可选属性\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E上面我们讲到 Interface 是用来注解 对象，函数等，那么我们就有一个场景，一个对象里面的某些参数我们可能没有，比如一个待办事项 Todo，有时候没有设置 \u003Ccode\u003Etime\u003C\u002Fcode\u003E 时间属性，那么修饰这样一个对象我们该怎么办了？幸好 TS 给我们提供了可选属性这样一个方便的属性，使得我们可以方便解决上面的问题，我们来看一下可选属性该怎么写，假如我们上面的那个例子，\u003Ccode\u003Etime\u003C\u002Fcode\u003E 是可选的，那么我们可以写出如下这样：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Einterface Todo {\n  content: string;\n  user: string;\n  time?: string;\n  isCompleted: boolean;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我们看到，只需要在属性类型修饰冒号左边加一个问号就可以了，这个时候我们就告诉 TS 编译器这个 \u003Ccode\u003Etime\u003C\u002Fcode\u003E 属性是可选的一个类型，所以我们用上面的 Interface Todo 来注解一下没有 \u003Ccode\u003Etime\u003C\u002Fcode\u003E 属性的 \u003Ccode\u003Etodo\u003C\u002Fcode\u003E 对象如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst todo: Todo = {\n  content: &#39;予力内容创作，加速技术传播&#39;,\n  user: &#39;pftom&#39;,\n  isCompleted: false,\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，使用 VSCode 来跟着教程敲的同学应该发现上面的内容没有错误，类型检查通过了。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E只读属性\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003ETS 的 Interface 还有一些额外的属性比如只读属性（readonly），表示用相关带有只读属性的接口对某个 JS 元素做类型注解的时候，这个 JS 元素相关的属性被注解为只读属性时，我们之后不可以修改这个属性了，我们来看一个例子：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Einterface Todo {\n  content: string;\n  readonly user: string;\n  time?: string;\n  isCompleted: boolean;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到只读属性的添加就是在属性之前加上 \u003Ccode\u003Ereadonly\u003C\u002Fcode\u003E 关键字，就可以将 Interface 中的属性标志为已读的，我们来试验一下这个只读效果：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst todo: Todo = {\n  content: &#39;予力内容创作，加速技术传播&#39;,\n  user: &#39;pftom&#39;,\n  isCompleted: false,\n}\n\ntodo.user = &#39;mRcfps&#39;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E当我们进行上面的修改操作之后，编辑器内会报错：\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-426fe22658c8425c9698f76ca98569fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1220\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"1220\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-426fe22658c8425c9698f76ca98569fc_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1220&#39; height=&#39;458&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1220\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1220\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-426fe22658c8425c9698f76ca98569fc_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-426fe22658c8425c9698f76ca98569fc_b.jpg\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E多余属性检查\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E我在在 JS 中经常会遇到一个对象，一开始我们知道它有是哪个属性，但是它的属性却可以动态增加，比如我们的 \u003Ccode\u003Etodo\u003C\u002Fcode\u003E 可能还存在 \u003Ccode\u003Epriority\u003C\u002Fcode\u003E 优先级这样一个属性，那么我们如何定义一个可以注解动态增加属性对象的 Interface 了?\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E所幸 TS 提供一个多余属性检查的写法，使得上面的问题我们也可以解决，我们来看一下一个多余属性教程该怎么定义：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Einterface Todo {\n  isCompleted: boolean;\n  [propName: string]: any;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E使用类似上面 JS 中的动态属性赋值的方式我们就可为 \u003Ccode\u003ETodo\u003C\u002Fcode\u003E 接口加上多余属性检查，这里我们将其注解为一定拥有  \u003Ccode\u003EisCompleted\u003C\u002Fcode\u003E 属性，其他的属性可以动态添加，因为动态添加的属性的值类型我们不清楚，所以我们用 \u003Ccode\u003Eany\u003C\u002Fcode\u003E 来表示值类型，它可以是任意类型。我们马上来试验一下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Econst todo: Todo = {\n  content: &#39;予力内容创作，加速技术传播&#39;,\n  isCompleted: false,\n}\n\ntodo.user = &#39;pftom&#39;;\ntodo.time = &#39;2020-04-04&#39;;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，上面我们我们的 todo 在定义的时候只有两个属性，后面我们额外添加了两个属性，发现编辑器里面也不会报错，这就是多余属性检查的魅力。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003EEnum\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E枚举是 TS 中独有的概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，比如我们应用中参与创建待办事项的用户只有五个人，那么在创建待办事项时，此事项的所属用户是五人中的某一人。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E我们马上来看一个例子，我们的将这五个用户放到枚举里面：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Eenum UserId {\n  tuture,\n  mRcfps,\n  crxk,\n  pftom,\n  holy\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E进而我们可以改进一下我们在上节  Interface 里面的 \u003Ccode\u003ETodo\u003C\u002Fcode\u003E 接口，给它的 \u003Ccode\u003Euser\u003C\u002Fcode\u003E 字段一个更精确的类型注解：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Einterface Todo {\n  content: string;\n  user: UserId;\n  time: string;\n  isCompleted: boolean;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E通过上面的例子我们可以看到，\u003Ccode\u003Etodo\u003C\u002Fcode\u003E  里面的 \u003Ccode\u003Euser\u003C\u002Fcode\u003E 字段应该是五人之一，它有可能是 \u003Ccode\u003Etuture\u003C\u002Fcode\u003E ，也有可能是 \u003Ccode\u003EmRcfps\u003C\u002Fcode\u003E ，我们不知道，所以我们写了一个枚举 \u003Ccode\u003EUserId\u003C\u002Fcode\u003E ，并用它来注解 \u003Ccode\u003ETodo\u003C\u002Fcode\u003E 的 \u003Ccode\u003Euser\u003C\u002Fcode\u003E 字段。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E数字枚举\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E上面我们的 UserId 中几个枚举值其实都对应着相应的数字，比如 \u003Ccode\u003EUserId.tuture\u003C\u002Fcode\u003E 它的值是数字 \u003Ccode\u003E0\u003C\u002Fcode\u003E ，\u003Ccode\u003EUserId.mRcfps\u003C\u002Fcode\u003E 它的值是数字 \u003Ccode\u003E1\u003C\u002Fcode\u003E ，以此类推，后面的几个枚举值分别是数字 \u003Ccode\u003E2\u003C\u002Fcode\u003E ，\u003Ccode\u003E3\u003C\u002Fcode\u003E ，\u003Ccode\u003E4\u003C\u002Fcode\u003E 。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E当然我们也可以手动给其中某个枚举值赋值一个数字，这样这个枚举值后面的值会依次在这个赋值的数字上递增，我们来看个例子：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Eenum UserId {\n  tuture,\n  mRcfps = 6,\n  crxk,\n  pftom,\n  holy,\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E上面我们的每个枚举值对应的数字依次是：\u003Ccode\u003E0\u003C\u002Fcode\u003E ，\u003Ccode\u003E6\u003C\u002Fcode\u003E ，\u003Ccode\u003E7\u003C\u002Fcode\u003E ，\u003Ccode\u003E8\u003C\u002Fcode\u003E ，\u003Ccode\u003E9\u003C\u002Fcode\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E字符串枚举\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E枚举的值除了是数字还可以是一系列字符串，比如：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Eenum UserId {\n  tuture = &#39;66666666&#39;,\n  mRcfps = &#39;23410977&#39;,\n  crxk = &#39;25455350&#39;,\n  pftom = &#39;23410976&#39;,\n  holy = &#39;58352313&#39;,\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，我们给每个枚举值赋值了对于的字符串。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E异构枚举\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E当然在一个枚举里面既可以有字符串值也可以有数字：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Eenum UserId {\n  tuture = &#39;66666666&#39;,\n  mRcfps = 6,\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E动手实践\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E了解了 \u003Ccode\u003EInterface\u003C\u002Fcode\u003E 和 \u003Ccode\u003EEnum\u003C\u002Fcode\u003E 之后，我们马上运用在我们的项目中来完善我们的待办事项应用。\u003Cbr\u002F\u003E \u003Cbr\u002F\u003E随着内容越写越多，我们的 \u003Ccode\u003Esrc\u002FApp.tsx\u003C\u002Fcode\u003E 越来越复杂，所以我们打算把 \u003Ccode\u003ETodoInput\u003C\u002Fcode\u003E 组件拆到单独的页面，在 \u003Ccode\u003Esrc\u003C\u002Fcode\u003E 目录下新建 \u003Ccode\u003ETodoInput.tsx\u003C\u002Fcode\u003E ，并在里面编写如下的内容：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Eimport React, { useState } from &#34;react&#34;;\nimport { Input, Select, DatePicker } from &#34;antd&#34;;\nimport { Moment } from &#34;moment&#34;;\n\nimport { userList } from &#34;.\u002Futils\u002Fdata&#34;;\n\nconst { Option } = Select;\n\nenum UserId {\n  tuture = &#34;666666666&#34;,\n  mRcfps = &#34;23410977&#34;,\n  crxk = &#34;25455350&#34;,\n  pftom = &#34;23410976&#34;,\n  holy = &#34;58352313&#34;\n}\n\nexport interface TodoValue {\n  content?: string;\n  user?: UserId;\n  date?: string;\n}\n\ninterface TodoInputProps {\n  value?: TodoValue;\n  onChange?: (value: TodoValue) =&gt; void;\n}\n\nconst TodoInput = ({ value = {}, onChange }: TodoInputProps) =&gt; {\n  const [content, setContent] = useState(&#34;&#34;);\n  const [user, setUser] = useState(UserId.tuture);\n  const [date, setDate] = useState(&#34;&#34;);\n\n  const triggerChange = (changedValue: TodoValue) =&gt; {\n    if (onChange) {\n      onChange({ content, user, date, ...value, ...changedValue });\n    }\n  };\n\n  const onContentChange = (e: any) =&gt; {\n    if (!(&#34;content&#34; in value)) {\n      setContent(e.target.value);\n    }\n\n    triggerChange({ content: e.target.value });\n  };\n\n  const onUserChange = (selectValue: UserId) =&gt; {\n    if (!(&#34;user&#34; in value)) {\n      setUser(selectValue);\n    }\n\n    triggerChange({ user: selectValue });\n  };\n\n  const onDateOk = (date: Moment) =&gt; {\n    if (!(&#34;date&#34; in value)) {\n      setDate(date.format(&#34;YYYY-MM-DD HH:mm&#34;));\n    }\n\n    triggerChange({ date: date.format(&#34;YYYY-MM-DD HH:mm&#34;) });\n  };\n\n  return (\n    &lt;div className=&#34;todoInput&#34;&gt;\n      &lt;Input\n        type=&#34;text&#34;\n        placeholder=&#34;输入待办事项内容&#34;\n        value={value.content || content}\n        onChange={onContentChange}\n      \u002F&gt;\n      &lt;Select\n        style={{ width: 80 }}\n        size=&#34;small&#34;\n        defaultValue={UserId.tuture}\n        value={user}\n        onChange={onUserChange}\n      &gt;\n        {userList.map(user =&gt; (\n          &lt;Option value={user.id}&gt;{user.name}&lt;\u002FOption&gt;\n        ))}\n      &lt;\u002FSelect&gt;\n      &lt;DatePicker\n        showTime\n        size=&#34;small&#34;\n        onOk={onDateOk}\n        style={{ marginLeft: &#34;16px&#34;, marginRight: &#34;16px&#34; }}\n      \u002F&gt;\n    &lt;\u002Fdiv&gt;\n  );\n};\n\nexport default TodoInput;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到上面的内容，主要有如下几个部分的修改：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E我们定义了新的 \u003Ccode\u003EInterface\u003C\u002Fcode\u003E ：\u003Ccode\u003ETodoInputProps\u003C\u002Fcode\u003E ，它主要用来注解 \u003Ccode\u003ETodoInput\u003C\u002Fcode\u003E 这个函数式组件的 \u003Ccode\u003Eprops\u003C\u002Fcode\u003E 类型，可看到这个接口主要有两个字段，一个是 \u003Ccode\u003Evalue\u003C\u002Fcode\u003E ，它是 \u003Ccode\u003ETodoValue\u003C\u002Fcode\u003E 类型，还有一个 \u003Ccode\u003EonChange\u003C\u002Fcode\u003E ，它是一个函数类型，表示父组件将会传递一个 \u003Ccode\u003EonChange\u003C\u002Fcode\u003E 函数，我们将在之后讲解 TS 怎么注解函数，。\u003C\u002Fli\u003E\u003Cli\u003E接着我们新增了一个枚举 \u003Ccode\u003EUserId\u003C\u002Fcode\u003E ，用来概括我们应用的五个用户的 ID，并且人为的为这五个枚举常量赋了对应的值。\u003C\u002Fli\u003E\u003Cli\u003E接着我们改进了定义了一个新 \u003Ccode\u003ETodoValue\u003C\u002Fcode\u003E 接口，它有三个字段，主要用于标志 \u003Ccode\u003ETodoInputProps\u003C\u002Fcode\u003E 中上层组件中可能传递下来的值，所以三个字段都是可选的\u003C\u002Fli\u003E\u003Cli\u003E最后我们定义了三个响应 \u003Ccode\u003EInput\u003C\u002Fcode\u003E 、\u003Ccode\u003ESelect\u003C\u002Fcode\u003E 、\u003Ccode\u003EDatePicker\u003C\u002Fcode\u003E 的函数，\u003Ccode\u003EonContentChange\u003C\u002Fcode\u003E ，\u003Ccode\u003EonUserChange\u003C\u002Fcode\u003E ，\u003Ccode\u003EonDateOk\u003C\u002Fcode\u003E ，当上层组件没有传递对应的属性时，使用 \u003Ccode\u003EsetXXX\u003C\u002Fcode\u003E 来更新 React 状态，否则触发 \u003Ccode\u003EtriggerChange\u003C\u002Fcode\u003E ，调用父组件传递下来的 \u003Ccode\u003EonChange\u003C\u002Fcode\u003E 方法来更新对应的状态\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cblockquote\u003E\u003Cb\u003E提示\u003C\u002Fb\u003E 上面我们从 \u003Ccode\u003E.\u002Futils\u002Fdata\u003C\u002Fcode\u003E 导入了 \u003Ccode\u003EuserList\u003C\u002Fcode\u003E ，以及导入了 \u003Ccode\u003EMoment\u003C\u002Fcode\u003E 用来注解 \u003Ccode\u003Emoment\u003C\u002Fcode\u003E 类型的 date ，我们将在接下来的来马上来创建对于的 \u003Ccode\u003E.\u002Futils\u002Fdata\u003C\u002Fcode\u003E 文件以及安装对于的 \u003Ccode\u003Emoment\u003C\u002Fcode\u003E 。\u003Cbr\u002F\u003E \u003C\u002Fblockquote\u003E\u003Cp\u003E\u003Cbr\u002F\u003E在 \u003Ccode\u003Esrc\u002FTodoInput.tsx\u003C\u002Fcode\u003E 中我们导入了 \u003Ccode\u003EMoment\u003C\u002Fcode\u003E 用来注解 \u003Ccode\u003EonDateOk\u003C\u002Fcode\u003E 的函数参数 \u003Ccode\u003Edate\u003C\u002Fcode\u003E ，接下来我们来安装它：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-bash\"\u003Enpm install moment\n\u002F\u002F ...\n    \u003Cspan class=\"s2\"\u003E&#34;customize-cra&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^0.9.1&#34;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E&#34;less&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^3.11.1&#34;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E&#34;less-loader&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^5.0.0&#34;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E&#34;moment&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^2.24.0&#34;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E&#34;react&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^16.13.0&#34;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E&#34;react-app-rewired&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^2.1.5&#34;\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E&#34;react-dom&#34;\u003C\u002Fspan\u003E: \u003Cspan class=\"s2\"\u003E&#34;^16.13.0&#34;\u003C\u002Fspan\u003E,\n    \u002F\u002F ...\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E接着我们来创建对应的 \u003Ccode\u003Esrc\u002Futils\u002Fdata.ts\u003C\u002Fcode\u003E 文件，把之前在 \u003Ccode\u003Esrc\u002FApp.tsx\u003C\u002Fcode\u003E 里面的假数据统一放在这个文件里面，然后导出：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-text\"\u003Einterface Todo {\n  user: string;\n  time: string;\n  content: string;\n  isCompleted: boolean;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\nexport const todoListData: Todo[] = [\n  {\n    content: &#34;图雀社区：汇聚精彩的免费实战教程&#34;,\n    user: &#34;mRcfps&#34;,\n    time: &#34;2020年3月2日 19:34&#34;,\n    isCompleted: false\n  },\n  {\n    content: &#34;图雀社区：汇聚精彩的免费实战教程&#34;,\n    user: &#34;pftom&#34;,\n    time: &#34;2020年3月2日 19:34&#34;,\n    isCompleted: false\n  },\n  {\n    content: &#34;图雀社区：汇聚精彩的免费实战教程&#34;,\n    user: &#34;Holy&#34;,\n    time: &#34;2020年3月2日 19:34&#34;,\n    isCompleted: false\n  },\n  {\n    content: &#34;图雀社区：汇聚精彩的免费实战教程&#34;,\n    user: &#34;crxk&#34;,\n    time: &#34;2020年3月2日 19:34&#34;,\n    isCompleted: false\n  },\n  {\n    content: &#34;图雀社区：汇聚精彩的免费实战教程&#34;,\n    user: &#34;Pony&#34;,\n    time: &#34;2020年3月2日 19:34&#34;,\n    isCompleted: false\n  }\n];\n\nexport const userList: User[] = [\n  {\n    id: &#34;666666666&#34;,\n    name: &#34;图雀社区&#34;,\n    avatar: &#34;https:\u002F\u002Favatars0.githubusercontent.com\u002Fu\u002F39240800?s=60&amp;v=4&#34;\n  },\n  {\n    id: &#34;23410977&#34;,\n    name: &#34;mRcfps&#34;,\n    avatar: &#34;https:\u002F\u002Favatars0.githubusercontent.com\u002Fu\u002F23410977?s=96&amp;v=4&#34;\n  },\n  {\n    id: &#34;25455350&#34;,\n    name: &#34;crxk&#34;,\n    avatar: &#34;https:\u002F\u002Favatars1.githubusercontent.com\u002Fu\u002F25455350?s=96&amp;v=4&#34;\n  },\n  {\n    id: &#34;23410976&#34;,\n    name: &#34;pftom&#34;,\n    avatar: &#34;https:\u002F\u002Favatars0.githubusercontent.com\u002Fu\u002F23410977?s=96&amp;v=4&#34;\n  },\n  {\n    id: &#34;58352313&#34;,\n    name: &#34;holy&#34;,\n    avatar: &#34;https:\u002F\u002Favatars0.githubusercontent.com\u002Fu\u002F58352313?s=96&amp;v=4&#34;\n  }\n];\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E拆分了 \u003Ccode\u003ETodoInput\u003C\u002Fcode\u003E ，并把假数据移动到单独的文件之后，我们需要修改 \u003Ccode\u003Esrc\u002FApp.tsx\u003C\u002Fcode\u003E 对应的部分如下：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EReact\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRef\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E&#34;react&#34;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ...中间一样\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETodoInput\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E&#34;.\u002FTodoInput&#34;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ... 中间一样\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EtodoListData\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E&#34;.\u002Futils\u002Fdata&#34;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETitle\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETypography\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETabPane\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETabs\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F 中间一样\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ... 删除 TodoInput 部分\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ... TodoList 保持原样\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EApp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecallback\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{};\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EonFinish\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eany\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E&#34;Received values from form: &#34;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eref\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRef\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kc\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EclassName\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E&#34;App&#34;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eref\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F ... 中间一样\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E          \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EForm\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EItem\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E&#34;todo&#34;\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ETodoInput\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"err\"\u003E\u002FForm.Item&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EForm\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EItem\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EButton\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etype\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E&#34;primary&#34;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EhtmlType\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E&#34;submit&#34;\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\n              \u003Cspan class=\"nx\"\u003E提交\u003C\u002Fspan\u003E\n            \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"err\"\u003E\u002FButton&gt;\u003C\u002Fspan\u003E\n          \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"err\"\u003E\u002FForm.Item&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"err\"\u003E\u002FForm&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"err\"\u003E\u002Fdiv&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F ... 中间一样\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E        \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"err\"\u003E\u002Fdiv&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EApp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E\u003Cbr\u002F\u003E可以看到，上面的内容主要做出了如下的修改：\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E我们删除了对应的假数据 \u003Ccode\u003EuserList\u003C\u002Fcode\u003E 和 \u003Ccode\u003EtodoListData\u003C\u002Fcode\u003E 及其 Interface 定义 \u003Ccode\u003ETodo\u003C\u002Fcode\u003E 和 \u003Ccode\u003EUser\u003C\u002Fcode\u003E ，转而从我们创建的 \u003Ccode\u003Esrc\u002Futils\u002Fdata.ts\u003C\u002Fcode\u003E 里面导入 \u003Ccode\u003EtodoListData\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\u003Cli\u003E接着我们删除了 \u003Ccode\u003ETodoInput\u003C\u002Fcode\u003E 组件，转而导入我们之前创建的  \u003Ccode\u003ETodoInput\u003C\u002Fcode\u003E 组件\u003C\u002Fli\u003E\u003Cli\u003E接着我们给 \u003Ccode\u003EForm\u003C\u002Fcode\u003E 表单部分加上了一个提交按钮，以及扩展了 \u003Ccode\u003EonFinish\u003C\u002Fcode\u003E 函数\u003C\u002Fli\u003E\u003Cli\u003E最后我们删除了一些不再需要的导包\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E小结\u003C\u002Fh3\u003E\u003Cp\u003E\u003Cbr\u002F\u003E大功告成，这一节中我们学习了接口（Interface）和枚举（Enum），接口主要是对对象等多属性元素进行类型注解，而枚举是 TS 中独有的一个概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，最后我们通过改进现有的 Todo 应用来实践了学到的这两个概念。\u003C\u002Fp\u003E\u003Cblockquote\u003E 想要学习更多精彩的实战技术教程？来\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Ftuture.co\u002F%3Futm_source%3Dzhihu_zhuanlan\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u003C\u002Fa\u003E逛逛吧。\u003C\u002Fblockquote\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Ftuture.co\u002F%3Futm_source%3Dzhihu_zhuanlan\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-28c1bf65613673da06dd7a318f8daf0a_180x120.jpg\" data-image-width=\"802\" data-image-height=\"357\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u003C\u002Fa\u003E\u003Cblockquote\u003E 本文所涉及的源代码都放在了 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E  或者 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGitee\u003C\u002Fa\u003E 上，如果您觉得我们写得还不错，希望您能给\u003Cb\u003E❤️这篇文章点赞\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E 或 \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGitee\u003C\u002Fa\u003E 仓库加星❤\u003C\u002Fb\u003E️哦~  \u003C\u002Fblockquote\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftypescript-tea\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EGithub\u003C\u002Fa\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgitee.com\u002Ftuture\u002Ftypescript-tea\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-dbc025ea69e2bff896710cb659ce85c4_ipico.jpg\" data-image-width=\"248\" data-image-height=\"248\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003E图雀社区\u002Ftypescript-tea\u003C\u002Fa\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e302897514a48f950b2ccbd7296baf57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e302897514a48f950b2ccbd7296baf57_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;900&#39; height=&#39;500&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"900\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e302897514a48f950b2ccbd7296baf57_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e302897514a48f950b2ccbd7296baf57_b.jpg\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","adminClosedComment":false,"topics":[{"url":"https:\u002F\u002Fwww.zhihu.com\u002Fapi\u002Fv4\u002Ftopics\u002F19766226","type":"topic","id":"19766226","name":"TypeScript"},{"url":"https:\u002F\u002Fwww.zhihu.com\u002Fapi\u002Fv4\u002Ftopics\u002F20013159","type":"topic","id":"20013159","name":"React"}],"voteupCount":9,"voting":0,"column":{"description":"由 Tuture（https:\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftuture） 工具写成，这里汇集了能够让你从头敲到尾并做出可运行项目的技术教程。\n本专栏同步 https:\u002F\u002Ftuture.co\u002F 上的文章，如果您想查看更多的实战教程，请访问我们的主站 https:\u002F\u002Ftuture.co\u002F。\n如果您想投稿，请访问我们的主站 https:\u002F\u002Ftuture.co\u002F，我们有详细的投稿指南。\n","canManage":false,"intro":"汇集精彩的实战技术教程，公众号「图雀社区」","isFollowing":false,"urlToken":"tuture","id":"tuture","articlesCount":55,"acceptSubmission":true,"title":"图雀社区","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Ftuture","commentPermission":"all","created":1572934705,"updated":1576937634,"imageUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fb5558c931866637083e57f786945584_b.jpg","author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4c37f82e84bcf2131c868f552cd5e04_{size}.jpg","uid":"586253468545585152","userType":"people","isFollowing":false,"urlToken":"huang-wei-67-95","id":"a9048a480ee4a7d8f94d5691a133ccab","description":"","name":"pftom","isAdvertiser":false,"headline":"Programming is fundamentally about human","gender":1,"url":"\u002Fpeople\u002Fa9048a480ee4a7d8f94d5691a133ccab","avatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4c37f82e84bcf2131c868f552cd5e04_l.jpg","isOrg":false,"type":"people"},"followers":528,"type":"column"},"commentCount":0,"contributions":[{"id":23563743,"state":"accepted","type":"first_publish","column":{"description":"由 Tuture（https:\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftuture） 工具写成，这里汇集了能够让你从头敲到尾并做出可运行项目的技术教程。\n本专栏同步 https:\u002F\u002Ftuture.co\u002F 上的文章，如果您想查看更多的实战教程，请访问我们的主站 https:\u002F\u002Ftuture.co\u002F。\n如果您想投稿，请访问我们的主站 https:\u002F\u002Ftuture.co\u002F，我们有详细的投稿指南。\n","canManage":false,"intro":"汇集精彩的实战技术教程，公众号「图雀社区」","isFollowing":false,"urlToken":"tuture","id":"tuture","articlesCount":55,"acceptSubmission":true,"title":"图雀社区","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Ftuture","commentPermission":"all","created":1572934705,"updated":1576937634,"imageUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fb5558c931866637083e57f786945584_b.jpg","author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4c37f82e84bcf2131c868f552cd5e04_{size}.jpg","uid":"586253468545585152","userType":"people","isFollowing":false,"urlToken":"huang-wei-67-95","id":"a9048a480ee4a7d8f94d5691a133ccab","description":"","name":"pftom","isAdvertiser":false,"headline":"Programming is fundamentally about human","gender":1,"url":"\u002Fpeople\u002Fa9048a480ee4a7d8f94d5691a133ccab","avatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4c37f82e84bcf2131c868f552cd5e04_l.jpg","isOrg":false,"type":"people"},"followers":528,"type":"column"}},{"id":23574418,"state":"accepted","type":"include","column":{"description":"知乎编程专栏里更值得关注和学习的web前端开发专栏！专栏主要技术栈：JavaScript，HTML，CSS，nodejs，Vuejs，reactjs，linux，Java，不辣不辣等各种开发工具","canManage":false,"intro":"万丈红尘千行码，千秋大业一console.log","isFollowing":false,"urlToken":"zander","id":"zander","articlesCount":281,"acceptSubmission":true,"title":"web前端开发","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fzander","commentPermission":"all","created":1508319425,"updated":1533777239,"imageUrl":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e2e951be04861ad091a44f00272f4d55_b.jpg","author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3276234aebc7b91173a623241196b100_{size}.jpg","uid":"854495903980064768","userType":"people","isFollowing":false,"urlToken":"itwebber","id":"13f5dff9dd540550244b6a9faf9f1965","description":"万丈红尘三杯酒，千行代码一log！","name":"itwebber","isAdvertiser":false,"headline":"web前端开发工程师","gender":1,"url":"\u002Fpeople\u002F13f5dff9dd540550244b6a9faf9f1965","avatarUrl":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3276234aebc7b91173a623241196b100_l.jpg","isOrg":false,"type":"people"},"followers":1182,"type":"column"}}],"isTitleImageFullScreen":false,"upvotedFollowees":[],"commercialInfo":{"isCommercial":false,"plugin":{}},"suggestEdit":{"status":false,"reason":"","tip":"","url":"","title":""},"reason":"","annotationAction":[],"canTip":false,"tipjarorsCount":0,"isLabeled":false,"hasPublishingDraft":false,"isFavorited":false,"isNormal":true,"status":0,"shareText":"类型即正义：TypeScript 从入门到实践（一） - 来自知乎专栏「图雀社区」，作者: 一只图雀 https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F126342731 （想看更多？下载 @知乎 App：http:\u002F\u002Fweibo.com\u002Fp\u002F100404711598 ）","canComment":{"status":true,"reason":""},"mcnFpShow":-1,"isVisible":true,"isLiked":false,"likedCount":3,"visibleOnlyToAuthor":false,"hasColumn":false}},"columns":{"tuture":{"description":"由 Tuture（https:\u002F\u002Fgithub.com\u002Ftuture-dev\u002Ftuture） 工具写成，这里汇集了能够让你从头敲到尾并做出可运行项目的技术教程。\n本专栏同步 https:\u002F\u002Ftuture.co\u002F 上的文章，如果您想查看更多的实战教程，请访问我们的主站 https:\u002F\u002Ftuture.co\u002F。\n如果您想投稿，请访问我们的主站 https:\u002F\u002Ftuture.co\u002F，我们有详细的投稿指南。\n","canManage":false,"intro":"汇集精彩的实战技术教程，公众号「图雀社区」","isFollowing":false,"urlToken":"tuture","id":"tuture","articlesCount":55,"acceptSubmission":true,"title":"图雀社区","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Ftuture","commentPermission":"all","created":1572934705,"updated":1576937634,"imageUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fb5558c931866637083e57f786945584_b.jpg","author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4c37f82e84bcf2131c868f552cd5e04_{size}.jpg","uid":"586253468545585152","userType":"people","isFollowing":false,"urlToken":"huang-wei-67-95","id":"a9048a480ee4a7d8f94d5691a133ccab","description":"","name":"pftom","isAdvertiser":false,"headline":"Programming is fundamentally about human","gender":1,"url":"\u002Fpeople\u002Fa9048a480ee4a7d8f94d5691a133ccab","avatarUrl":"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4c37f82e84bcf2131c868f552cd5e04_l.jpg","isOrg":false,"type":"people"},"followers":528,"type":"column"},"zander":{"description":"知乎编程专栏里更值得关注和学习的web前端开发专栏！专栏主要技术栈：JavaScript，HTML，CSS，nodejs，Vuejs，reactjs，linux，Java，不辣不辣等各种开发工具","canManage":false,"intro":"万丈红尘千行码，千秋大业一console.log","isFollowing":false,"urlToken":"zander","id":"zander","articlesCount":281,"acceptSubmission":true,"title":"web前端开发","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fzander","commentPermission":"all","created":1508319425,"updated":1533777239,"imageUrl":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e2e951be04861ad091a44f00272f4d55_b.jpg","author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3276234aebc7b91173a623241196b100_{size}.jpg","uid":"854495903980064768","userType":"people","isFollowing":false,"urlToken":"itwebber","id":"13f5dff9dd540550244b6a9faf9f1965","description":"万丈红尘三杯酒，千行代码一log！","name":"itwebber","isAdvertiser":false,"headline":"web前端开发工程师","gender":1,"url":"\u002Fpeople\u002F13f5dff9dd540550244b6a9faf9f1965","avatarUrl":"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3276234aebc7b91173a623241196b100_l.jpg","isOrg":false,"type":"people"},"followers":1182,"type":"column"}},"topics":{},"roundtables":{},"favlists":{},"comments":{},"notifications":{},"ebooks":{},"activities":{},"feeds":{},"pins":{},"promotions":{},"drafts":{},"chats":{},"posts":{},"clubs":{},"clubTags":{}},"currentUser":"","account":{"lockLevel":{},"unlockTicketStatus":false,"unlockTicket":null,"challenge":[],"errorStatus":false,"message":"","isFetching":false,"accountInfo":{},"urlToken":{"loading":false}},"settings":{"socialBind":null,"inboxMsg":null,"notification":{},"email":{},"privacyFlag":null,"blockedUsers":{"isFetching":false,"paging":{"pageNo":1,"pageSize":6},"data":[]},"blockedFollowees":{"isFetching":false,"paging":{"pageNo":1,"pageSize":6},"data":[]},"ignoredTopics":{"isFetching":false,"paging":{"pageNo":1,"pageSize":6},"data":[]},"restrictedTopics":null,"laboratory":{}},"notification":{},"people":{"profileStatus":{},"activitiesByUser":{},"answersByUser":{},"answersSortByVotesByUser":{},"answersIncludedByUser":{},"votedAnswersByUser":{},"thankedAnswersByUser":{},"voteAnswersByUser":{},"thankAnswersByUser":{},"topicAnswersByUser":{},"zvideosByUser":{},"articlesByUser":{},"articlesSortByVotesByUser":{},"articlesIncludedByUser":{},"pinsByUser":{},"questionsByUser":{},"commercialQuestionsByUser":{},"favlistsByUser":{},"followingByUser":{},"followersByUser":{},"mutualsByUser":{},"followingColumnsByUser":{},"followingQuestionsByUser":{},"followingFavlistsByUser":{},"followingTopicsByUser":{},"publicationsByUser":{},"columnsByUser":{},"allFavlistsByUser":{},"brands":null,"creationsByUser":{},"creationsSortByVotesByUser":{},"creationsFeed":{}},"env":{"ab":{"config":{"experiments":[{"expId":"launch-qa_cl_guest-2","expPrefix":"qa_cl_guest","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"launch-us_foltopic_user-10","expPrefix":"us_foltopic_user","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"launch-vd_bullet_second-2","expPrefix":"vd_bullet_second","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"launch-vd_profile_video-11","expPrefix":"vd_profile_video","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"launch-vd_video_replay-3","expPrefix":"vd_video_replay","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"launch-vd_zvideo_link-10","expPrefix":"vd_zvideo_link","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"se_topicfeed-4","expPrefix":"se_topicfeed","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false},{"expId":"se_sp_button-2","expPrefix":"se_sp_button","isDynamicallyUpdated":true,"isRuntime":false,"includeTriggerInfo":false}],"params":[{"id":"top_v_album","type":"String","value":"1","chainId":"_all_"},{"id":"web_collection_guest","type":"String","value":"1"},{"id":"zr_article_new","type":"String","value":"close","chainId":"_all_"},{"id":"zr_slotpaidexp","type":"String","value":"1","chainId":"_all_"},{"id":"tp_header_style","type":"String","value":"1","chainId":"_all_"},{"id":"tp_club_flow_ai","type":"String","value":"0","chainId":"_all_"},{"id":"se_entity22","type":"String","value":"0","chainId":"_all_"},{"id":"se_searchwiki","type":"String","value":"0","chainId":"_all_"},{"id":"se_video_dnn","type":"String","value":"1","chainId":"_all_"},{"id":"li_svip_cardshow","type":"String","value":"1","chainId":"_all_"},{"id":"zw_sameq_sorce","type":"String","value":"999","chainId":"_all_"},{"id":"se_new_cbert","type":"String","value":"0","chainId":"_all_"},{"id":"se_college","type":"String","value":"default","chainId":"_all_"},{"id":"se_clubrank","type":"String","value":"1","chainId":"_all_"},{"id":"tp_score_1","type":"String","value":"a","chainId":"_all_"},{"id":"tp_topic_tab","type":"String","value":"0","chainId":"_all_"},{"id":"li_viptab_name","type":"String","value":"0","chainId":"_all_"},{"id":"zr_intervene","type":"String","value":"0","chainId":"_all_"},{"id":"se_colorfultab","type":"String","value":"1","chainId":"_all_"},{"id":"ug_goodcomment_0","type":"String","value":"1","chainId":"_all_"},{"id":"zr_answer_rec_cp","type":"String","value":"open","chainId":"_all_"},{"id":"tp_meta_card","type":"String","value":"0","chainId":"_all_"},{"id":"pf_fuceng","type":"String","value":"1","chainId":"_all_"},{"id":"soc_notification","type":"String","value":"1","chainId":"_all_"},{"id":"pf_newguide_vertical","type":"String","value":"0","chainId":"_all_"},{"id":"gue_video_replay","type":"String","value":"2"},{"id":"gue_profile_video","type":"String","value":"1"},{"id":"li_answer_test_2","type":"String","value":"0","chainId":"_all_"},{"id":"se_v038","type":"String","value":"0","chainId":"_all_"},{"id":"se_zvideo_bert","type":"String","value":"1","chainId":"_all_"},{"id":"tp_topic_style","type":"String","value":"0","chainId":"_all_"},{"id":"web_n_web_msg","type":"String","value":"1"},{"id":"gue_visit_n_artcard","type":"String","value":"0"},{"id":"tp_movie_ux","type":"String","value":"0","chainId":"_all_"},{"id":"soc_adweeklynew","type":"String","value":"2","chainId":"_all_"},{"id":"soc_iosweeklynew","type":"String","value":"2","chainId":"_all_"},{"id":"pf_noti_entry_num","type":"String","value":"0","chainId":"_all_"},{"id":"se_club_boost","type":"String","value":"1","chainId":"_all_"},{"id":"se_relationship","type":"String","value":"0","chainId":"_all_"},{"id":"tp_club_reactionv2","type":"String","value":"0","chainId":"_all_"},{"id":"pf_creator_card","type":"String","value":"1","chainId":"_all_"},{"id":"tp_club_top","type":"String","value":"0","chainId":"_all_"},{"id":"pf_profile2_tab","type":"String","value":"0","chainId":"_all_"},{"id":"li_svip_tab_search","type":"String","value":"1","chainId":"_all_"},{"id":"li_panswer_topic","type":"String","value":"0","chainId":"_all_"},{"id":"zr_search_topic","type":"String","value":"0","chainId":"_all_"},{"id":"web_unfriendly_comm","type":"String","value":"0"},{"id":"se_oneboxtopic","type":"String","value":"0","chainId":"_all_"},{"id":"web_sem_ab","type":"String","value":"1"},{"id":"web_audit_01","type":"String","value":"case1"},{"id":"se_hotsearch_2","type":"String","value":"1","chainId":"_all_"},{"id":"se_billboardsearch","type":"String","value":"0","chainId":"_all_"},{"id":"se_v040_2","type":"String","value":"0","chainId":"_all_"},{"id":"zr_rel_search","type":"String","value":"base","chainId":"_all_"},{"id":"top_quality","type":"String","value":"0","chainId":"_all_"},{"id":"gue_bullet_guide","type":"String","value":"发个弹幕聊聊…"},{"id":"top_ydyq","type":"String","value":"X","chainId":"_all_"},{"id":"web_heifetz_grow_ad","type":"String","value":"1"},{"id":"li_salt_hot","type":"String","value":"1","chainId":"_all_"},{"id":"li_paid_answer_exp","type":"String","value":"0","chainId":"_all_"},{"id":"gue_push2follow","type":"String","value":"0"},{"id":"qap_question_author","type":"String","value":"0","chainId":"_all_"},{"id":"se_backsearch","type":"String","value":"0","chainId":"_all_"},{"id":"tp_discover","type":"String","value":"0","chainId":"_all_"},{"id":"tp_move_scorecard","type":"String","value":"0","chainId":"_all_"},{"id":"se_v039","type":"String","value":"0","chainId":"_all_"},{"id":"se_video_dnn_2","type":"String","value":"0","chainId":"_all_"},{"id":"tp_m_intro_re_topic","type":"String","value":"1","chainId":"_all_"},{"id":"li_answer_test","type":"String","value":"3","chainId":"_all_"},{"id":"web_answer_list_ad","type":"String","value":"1"},{"id":"zr_expslotpaid","type":"String","value":"1","chainId":"_all_"},{"id":"se_multi_images","type":"String","value":"0","chainId":"_all_"},{"id":"se_ffzx_jushen1","type":"String","value":"0","chainId":"_all_"},{"id":"zr_slot_training","type":"String","value":"1","chainId":"_all_"},{"id":"se_expired_ob","type":"String","value":"0","chainId":"_all_"},{"id":"se_col_boost","type":"String","value":"0","chainId":"_all_"},{"id":"se_dnn_mt_v2","type":"String","value":"0","chainId":"_all_"},{"id":"gue_zvideo_title","type":"String","value":"0"},{"id":"web_mweb_rec_length","type":"String","value":"1"},{"id":"zr_training_first","type":"String","value":"false","chainId":"_all_"},{"id":"zr_test_aa1","type":"String","value":"0","chainId":"_all_"},{"id":"tp_club_feedv2","type":"String","value":"1","chainId":"_all_"},{"id":"top_root","type":"String","value":"0","chainId":"_all_"},{"id":"pf_foltopic_usernum","type":"String","value":"50","chainId":"_all_"},{"id":"gue_art2qa","type":"String","value":"0"},{"id":"zr_zr_search_sims","type":"String","value":"0","chainId":"_all_"},{"id":"se_relation_1","type":"String","value":"2","chainId":"_all_"},{"id":"se_cardrank_4","type":"String","value":"1","chainId":"_all_"},{"id":"tp_club_entrance","type":"String","value":"1","chainId":"_all_"},{"id":"web_answerlist_ad","type":"String","value":"0"},{"id":"se_content0","type":"String","value":"1","chainId":"_all_"},{"id":"se_v040","type":"String","value":"0","chainId":"_all_"},{"id":"se_cardrank_3","type":"String","value":"0","chainId":"_all_"},{"id":"se_whitelist","type":"String","value":"0","chainId":"_all_"},{"id":"se_clarify","type":"String","value":"0","chainId":"_all_"},{"id":"ug_newtag","type":"String","value":"1","chainId":"_all_"},{"id":"se_hotmore","type":"String","value":"2","chainId":"_all_"},{"id":"se_v2_highlight","type":"String","value":"0","chainId":"_all_"},{"id":"tsp_hotlist_ui","type":"String","value":"1","chainId":"_all_"},{"id":"web_mweb_launch","type":"String","value":"1"},{"id":"li_se_section","type":"String","value":"1","chainId":"_all_"},{"id":"qap_labeltype","type":"String","value":"1","chainId":"_all_"},{"id":"zr_training_boost","type":"String","value":"false","chainId":"_all_"},{"id":"se_merger_v2","type":"String","value":"0","chainId":"_all_"},{"id":"ls_fmp4","type":"String","value":"0","chainId":"_all_"},{"id":"li_topics_search","type":"String","value":"0","chainId":"_all_"},{"id":"qap_question_visitor","type":"String","value":" 0","chainId":"_all_"},{"id":"se_hotsearch","type":"String","value":"1","chainId":"_all_"},{"id":"se_cbert_index","type":"String","value":"1","chainId":"_all_"},{"id":"tp_topic_entry","type":"String","value":"0","chainId":"_all_"},{"id":"ls_videoad","type":"String","value":"2","chainId":"_all_"},{"id":"li_yxzl_new_style_a","type":"String","value":"1","chainId":"_all_"},{"id":"li__edu_cold_start","type":"String","value":"0","chainId":"_all_"},{"id":"zr_art_rec","type":"String","value":"base","chainId":"_all_"},{"id":"zr_rec_answer_cp","type":"String","value":"close","chainId":"_all_"},{"id":"web_creator_route","type":"String","value":"1"},{"id":"top_universalebook","type":"String","value":"1","chainId":"_all_"},{"id":"top_hotcommerce","type":"String","value":"1","chainId":"_all_"},{"id":"ls_recommend_test","type":"String","value":"0","chainId":"_all_"},{"id":"li_catalog_card","type":"String","value":"1","chainId":"_all_"},{"id":"li_training_chapter","type":"String","value":"0","chainId":"_all_"},{"id":"zr_search_sim2","type":"String","value":"0","chainId":"_all_"},{"id":"se_adsrank","type":"String","value":"4","chainId":"_all_"},{"id":"tp_sft","type":"String","value":"a","chainId":"_all_"},{"id":"li_vip_verti_search","type":"String","value":"0","chainId":"_all_"},{"id":"li_video_section","type":"String","value":"0","chainId":"_all_"},{"id":"zr_km_answer","type":"String","value":"open_cvr","chainId":"_all_"},{"id":"top_ebook","type":"String","value":"0","chainId":"_all_"},{"id":"gue_bullet_second","type":"String","value":"1"},{"id":"gue_zvideo_55s","type":"String","value":"0"},{"id":"li_answer_card","type":"String","value":"0","chainId":"_all_"},{"id":"gue_q_intercept","type":"String","value":"0"},{"id":"se_mobilecard","type":"String","value":"0","chainId":"_all_"},{"id":"tp_club_qa_entrance","type":"String","value":"0","chainId":"_all_"},{"id":"tp_topic_tab_new","type":"String","value":"0-0-0","chainId":"_all_"},{"id":"gue_self_censoring","type":"String","value":"1"},{"id":"web_column_auto_invite","type":"String","value":"0"},{"id":"zr_search_sims","type":"String","value":"0","chainId":"_all_"},{"id":"ug_follow_topic_1","type":"String","value":"2","chainId":"_all_"},{"id":"li_literature","type":"String","value":"0","chainId":"_all_"},{"id":"qap_thanks","type":"String","value":"1","chainId":"_all_"},{"id":"se_new_bert","type":"String","value":"0","chainId":"_all_"},{"id":"se_specialbutton","type":"String","value":"1","chainId":"_all_"},{"id":"tp_club__entrance2","type":"String","value":"0","chainId":"_all_"},{"id":"ls_video_commercial","type":"String","value":"0","chainId":"_all_"},{"id":"zr_search_paid","type":"String","value":"1","chainId":"_all_"},{"id":"se_cardrank_2","type":"String","value":"1","chainId":"_all_"},{"id":"se_topicfeed","type":"String","value":"1","chainId":"_all_"},{"id":"se_sug_term","type":"String","value":"0","chainId":"_all_"},{"id":"pf_adjust","type":"String","value":"0","chainId":"_all_"},{"id":"gue_goods_card","type":"String","value":"0"},{"id":"gue_card_test","type":"String","value":"1"},{"id":"top_test_4_liguangyi","type":"String","value":"1","chainId":"_all_"},{"id":"gue_zvideo_link","type":"String","value":"1"},{"id":"web_ad_banner","type":"String","value":"0"},{"id":"zr_ans_rec","type":"String","value":"gbrank","chainId":"_all_"},{"id":"se_aa_base","type":"String","value":"0","chainId":"_all_"},{"id":"se_searchvideo","type":"String","value":"0","chainId":"_all_"},{"id":"se_page_quality","type":"String","value":"1","chainId":"_all_"},{"id":"gue_video_autoplay","type":"String","value":"0"},{"id":"li_ebook_gen_search","type":"String","value":"0","chainId":"_all_"},{"id":"li_assessment_show","type":"String","value":"1","chainId":"_all_"},{"id":"se_multianswer","type":"String","value":"2","chainId":"_all_"}],"chains":[{"chainId":"_all_"}]},"triggers":{}},"userAgent":{"Edge":false,"Wechat":false,"Weibo":false,"QQ":false,"MQQBrowser":false,"Qzone":false,"Mobile":false,"Android":false,"iOS":false,"isAppleDevice":true,"Zhihu":false,"ZhihuHybrid":false,"isBot":false,"Tablet":false,"UC":false,"Sogou":false,"Qihoo":false,"Baidu":false,"BaiduApp":false,"Safari":false,"GoogleBot":false,"AndroidDaily":false,"iOSDaily":false,"isWebView":false,"origin":"Mozilla\u002F5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit\u002F537.36 (KHTML, like Gecko) Chrome\u002F79.0.3945.130 Safari\u002F537.36"},"appViewConfig":{},"ctx":{"path":"\u002Fp\u002F126342731","query":{},"href":"http:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F126342731","host":"zhuanlan.zhihu.com"},"trafficSource":"production","edition":{"beijing":false,"baidu":false,"sogou":false,"baiduBeijing":false,"sogouBeijing":false,"sogouInput":false},"theme":"light","enableShortcut":true,"referer":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F40311981","conf":{},"ipInfo":{"cityName":"成都","countryName":"中国","regionName":"四川","countryCode":"CN"},"logged":false},"me":{"columnContributions":[]},"label":{"recognizerLists":{}},"ecommerce":{},"comments":{"pagination":{},"collapsed":{},"reverse":{},"reviewing":{},"conversation":{},"parent":{}},"commentsV2":{"stickers":[],"commentWithPicPermission":{},"notificationsComments":{},"pagination":{},"collapsed":{},"reverse":{},"reviewing":{},"conversation":{},"conversationMore":{},"parent":{}},"pushNotifications":{"default":{"isFetching":false,"isDrained":false,"ids":[]},"follow":{"isFetching":false,"isDrained":false,"ids":[]},"vote_thank":{"isFetching":false,"isDrained":false,"ids":[]},"currentTab":"default","notificationsCount":{"default":0,"follow":0,"vote_thank":0}},"messages":{"data":{},"currentTab":"common","messageCount":0},"register":{"registerValidateSucceeded":null,"registerValidateErrors":{},"registerConfirmError":null,"sendDigitsError":null,"registerConfirmSucceeded":null},"login":{"loginUnregisteredError":false,"loginBindWechatError":false,"loginConfirmError":null,"sendDigitsError":null,"needSMSIdentify":false,"validateDigitsError":false,"loginConfirmSucceeded":null,"qrcodeLoginToken":"","qrcodeLoginScanStatus":0,"qrcodeLoginError":null,"qrcodeLoginReturnNewToken":false},"active":{"sendDigitsError":null,"activeConfirmSucceeded":null,"activeConfirmError":null},"switches":{},"captcha":{"captchaNeeded":false,"captchaValidated":false,"captchaBase64String":null,"captchaValidationMessage":null,"loginCaptchaExpires":false},"sms":{"supportedCountries":[]},"chat":{"chats":{},"inbox":{"recents":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"strangers":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"friends":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"search":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"config":{"newCount":0,"strangerMessageSwitch":false,"strangerMessageUnread":false,"friendCount":0}},"global":{"isChatMqttExisted":false}},"emoticons":{"emoticonGroupList":[],"emoticonGroupDetail":{}},"creator":{"currentCreatorUrlToken":null,"homeData":{"recommendQuestions":[]},"tools":{"question":{"invitationCount":{"questionFolloweeCount":0,"questionTotalCount":0},"goodatTopics":[]},"customPromotion":{"itemLists":{}},"recommend":{"recommendTimes":{}}},"explore":{"academy":{"tabs":[],"article":{}}},"rights":[],"rightsStatus":{},"levelUpperLimit":10,"account":{"growthLevel":{}},"mcn":{},"applyStatus":{}},"recommendation":{"homeRecommendations":[]},"shareTexts":{},"articles":{"voters":{}},"previewPost":{},"favlists":{"relations":{}},"columns":{"voters":{}},"reward":{"answer":{},"article":{},"question":{}},"video":{"data":{},"shareVideoDetail":{},"last":{}},"topstory":{"recommend":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"follow":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"followWonderful":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"sidebar":null,"announcement":{},"hotListCategories":[],"hotList":[],"guestFeeds":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"followExtra":{"isNewUser":null,"isFetched":false,"followCount":0,"followers":[]}},"readStatus":{},"column":{},"requestColumn":{"categories":[],"error":null},"articleContribution":{"contributeRequests":[],"deleteContributeIdList":[],"handledContributeIdList":[],"recommendedColumns":[],"pinnedColumns":[],"sentContributeRequestsIdList":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"tuture","zander"]},"columnContribution":{"contributeRequests":[],"autoInviteEnabled":false,"recommendedContributors":[],"contributionInvitation":null},"draftHistory":{"history":{},"drafts":{}},"upload":{},"articleDraft":{"titleImage":"","titleImageSize":{},"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"updating":false,"globalLoading":false,"pendingVideo":{"resource":null,"error":null},"deleteFail":{"fail":false},"recommendTopics":[],"selectedColumn":0,"articleDisclaimers":[]},"articleDrafts":{"isDrained":false,"isLoading":false,"items":[]},"columnAutocomplete":{"users":[],"friends":[]},"columnCollection":{},"mcn":{"bindInfo":{},"memberCategoryList":[],"producerList":[],"categoryList":[],"lists":{}}},"fetchHost":"www.zhihu.com","subAppName":"column"}</script><script src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/vendor.90b6c2c841b0448cdc35.js"></script><script src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/column.app.115ba2144622e8d246ab.js"></script><script src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/hm.js" async=""></script><script src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/push.js" async=""></script><script src="./类型即正义：TypeScript 从入门到实践（一） - 知乎_files/zap.js"></script><div><div style="display: none;">想来知乎工作？请发送邮件到 jobs@zhihu.com</div></div><div><div><div class="css-8pdeid"></div></div></div><div><div><div class="Editable-languageSuggestions" style="left: -1179px; top: -999px;"><div><div class="Popover"><label class="Editable-languageSuggestionsInput Input-wrapper"><input autocomplete="off" role="combobox" aria-expanded="false" aria-autocomplete="list" aria-activedescendant="AutoComplete13-0" id="Popover12-toggle" aria-haspopup="true" aria-owns="Popover12-content" class="Input" placeholder="选择语言" value=""><svg class="Zi Zi--Select" fill="#afbdcf" viewBox="0 0 24 24" width="24" height="24"><path d="M12 16.183l2.716-2.966a.757.757 0 0 1 1.064.001.738.738 0 0 1 0 1.052l-3.247 3.512a.758.758 0 0 1-1.064 0L8.22 14.27a.738.738 0 0 1 0-1.052.758.758 0 0 1 1.063 0L12 16.183zm0-9.365L9.284 9.782a.758.758 0 0 1-1.064 0 .738.738 0 0 1 0-1.052l3.248-3.512a.758.758 0 0 1 1.065 0L15.78 8.73a.738.738 0 0 1 0 1.052.757.757 0 0 1-1.063.001L12 6.818z" fill-rule="evenodd"></path></svg></label></div></div></div></div></div></body></html>