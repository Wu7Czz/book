<!DOCTYPE html>
<!-- saved from url=(0047)https://juejin.im/post/5e91b01651882573716a9b23 -->
<html lang="zh-Hans"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no,viewport-fit=cover"><meta name="google-site-verification" content="cCHsgG9ktuCTgWgYfqCJql8AeR4gAne4DTZqztPoirE"><meta name="google-site-verification" content="nPvn9R5NJLsZKTv5VKIbn0OmkRcJ4PC6KdDoTX3n5Mw"><meta name="apple-itunes-app" content="app-id=987739104"><meta name="baidu-site-verification" content="qiK2a1kcFc"><meta name="360-site-verification" content="4c3c7d57d59f0e1a308462fbc7fd7e51"><meta name="sogou_site_verification" content="c49WUDZczQ"><style>body {
        font-size: 16px;
        line-height: 2;
      }
      a, button, input {
        margin: 1rem 1.5rem;
      }
      img {
        width: 0;
        height: 0;
      }
      #juejin {
        overflow-x: hidden;
      }</style><title data-vue-meta="true">一位前端小姐姐的五万字面试宝典 - 掘金</title><link rel="apple-touch-icon" sizes="180x180" href="https://b-gold-cdn.xitu.io/favicons/v2/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="https://b-gold-cdn.xitu.io/favicons/v2/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="https://b-gold-cdn.xitu.io/favicons/v2/favicon-16x16.png"><link rel="manifest" href="https://b-gold-cdn.xitu.io/favicons/v2/manifest.json"><link rel="mask-icon" href="https://b-gold-cdn.xitu.io/favicons/v2/safari-pinned-tab.svg" color="#5bbad5"><link rel="shortcut icon" href="https://b-gold-cdn.xitu.io/favicons/v2/favicon.ico"><meta name="msapplication-config" content="https://b-gold-cdn.xitu.io/favicons/v2/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="search" title="掘金" href="https://b-gold-cdn.xitu.io/conf/search.xml" type="application/opensearchdescription+xml"><link rel="stylesheet" href="./一位前端小姐姐的五万字面试宝典 - 掘金_files/ionicons.min.css"><link rel="stylesheet" href="./一位前端小姐姐的五万字面试宝典 - 掘金_files/iconfont.css"><link href="./一位前端小姐姐的五万字面试宝典 - 掘金_files/0.6f006121537867d5c7df.css" rel="stylesheet"><script async="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/hm.js"></script><script async="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/analytics.js"></script><script type="text/javascript" async="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/vds.js"></script><script type="text/javascript" async="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect-v.3.2.14.js"></script><script charset="utf-8" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/4.281438b56343cf12fa0b.js"></script><meta data-vmid="keywords" name="keywords" content="面试" data-vue-meta="true"><meta data-vmid="description" name="description" content="本文投稿自一位前端小姐姐——徐漂漂，本文干货成吨，全程高能。希望大家多点赞、评论、关注，给小姐姐继续写文章的动力！ 前端小姐姐的 GitHub 另外小姐姐最近在看机会 base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。 一、算法 1" data-vue-meta="true"></head><body><div id="juejin" data-v-2a21baac=""><div class="global-component-box" data-v-2a21baac=""><!----><div data-v-7b82dbda="" data-v-2a21baac="" class="alert-list alert-list"></div><div data-v-14e6422e="" data-v-2a21baac="" class="suspension-panel suspension-panel"><button data-v-14e6422e="" title="回到顶部" class="btn to-top-btn" style=""><i data-v-14e6422e="" class="ion-android-arrow-dropup"></i></button><button data-v-14e6422e="" title="建议反馈" class="btn meiqia-btn" style=""><i data-v-14e6422e="" class="ion-chatbubble-working"></i></button></div><!----><!----><div class="emoji-barrage" data-v-3bcc3fe1="" data-v-2a21baac=""><!----></div><div class="book-new-user-award-popup" style="display:none;" data-v-4b0794bc="" data-v-2a21baac=""><div class="content-box" style="display:;" data-v-4b0794bc=""><div class="close ion-close-round" data-v-4b0794bc=""></div><div class="header" data-v-4b0794bc=""><div class="icon" data-v-4b0794bc=""><img src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/icon.a87e5ae.svg" data-v-4b0794bc=""></div><div class="txt" data-v-4b0794bc="">新人专享好礼</div></div><div class="desc" data-v-4b0794bc="">凡未购买过小册的用户，均可领取三张 5 折新人专享券，购买小册时自动使用专享券，最高可节省 45 元。</div><div class="tickets" data-v-4b0794bc=""><div class="ticket" data-v-4b0794bc=""><div class="ticket__inner" data-v-4b0794bc=""><div class="enjoy" data-v-4b0794bc=""><span class="new-title" data-v-4b0794bc="">小册新人 5 折券</span></div><div class="sale" data-v-4b0794bc="">最高可省 15 元</div></div></div><div class="ticket" data-v-4b0794bc=""><div class="ticket__inner" data-v-4b0794bc=""><div class="enjoy" data-v-4b0794bc=""><span class="new-title" data-v-4b0794bc="">小册新人 5 折券</span></div><div class="sale" data-v-4b0794bc="">最高可省 15 元</div></div></div><div class="ticket" data-v-4b0794bc=""><div class="ticket__inner" data-v-4b0794bc=""><div class="enjoy" data-v-4b0794bc=""><span class="new-title" data-v-4b0794bc="">小册新人 5 折券</span></div><div class="sale" data-v-4b0794bc="">最高可省 15 元</div></div></div></div><div class="remark" data-v-4b0794bc="">注：专享券的使用期限在领券的七天内。</div><div class="submit-btn" data-v-4b0794bc="">一键领取</div></div><div class="model success" style="display:none;" data-v-4b0794bc=""><div class="heading" data-v-4b0794bc="">领取成功</div><div class="content-text" data-v-4b0794bc="">购买小册时自动使用专享券</div><div class="btn-success-footer" data-v-4b0794bc=""><div class="btn-ok" data-v-4b0794bc="">知道了</div><div class="btn-ok btn-link" data-v-4b0794bc="">前往小册首页</div></div></div><div class="model fail" style="display:none;" data-v-4b0794bc=""><div class="heading" data-v-4b0794bc="">领取失败</div><div class="content-text" data-v-4b0794bc="">本活动仅适用于小册新用户</div><div class="btn-ok" data-v-4b0794bc="">知道了</div></div></div><!----><!----><div class="bind-phone-number-modal-box" data-v-3b825027="" data-v-2a21baac=""><div st:block="bindPhoneNumberModal" class="modal-mask" style="display:none;" data-v-3b825027=""></div><form class="bind-phone-number-form" style="display:none;" data-v-3b825027=""><i title="关闭" class="close-btn ion-close-round" data-v-3b825027=""></i><h1 class="title" data-v-3b825027="">提示</h1><h2 class="hint" data-v-3b825027="">根据我国<a href="http://www.cac.gov.cn/2017-08/25/c_1121541842.htm" target="_blank" style="color:#007fff">《互联网跟帖评论服务管理规定》</a>，您需要绑定手机号后才可在掘金社区内发布内容。</h2><div class="input-group" data-v-3b825027=""><div class="input-box" data-v-3b825027=""><input maxlength="64" placeholder="请输入要绑定的手机号码" value="" class="input" data-v-3b825027=""></div><!----><!----></div><button st:name="bindBtn" class="btn" data-v-3b825027="">绑定手机</button></form></div></div><!----><div data-v-23c7d456="" data-v-7407bc26="" data-v-2a21baac="" class="view-container"><div data-v-23c7d456="" class="main-header-box"><header data-v-26abcca9="" data-v-23c7d456="" class="main-header main-header"><div data-v-26abcca9="" class="container"><a data-v-26abcca9="" href="https://juejin.im/" class="logo"><img data-v-26abcca9="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/logo.a7995ad.svg" alt="掘金" class="logo-img"><img data-v-26abcca9="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/simplify-logo.3e3c253.svg" alt="掘金" class="mobile"></a><nav data-v-26abcca9="" role="navigation" class="main-nav"><ul data-v-26abcca9="" class="nav-list"><li data-v-26abcca9="" class="main-nav-list"><div data-v-26abcca9="" class="phone-show-menu"><span data-v-26abcca9="">首页</span><div data-v-26abcca9="" class="icon ion-arrow-down-b"></div></div><ul data-v-26abcca9="" class="phone-hide"><li data-v-26abcca9="" class="nav-item link-item route-active"><a data-v-26abcca9="" href="https://juejin.im/">首页</a></li><li data-v-26abcca9="" class="nav-item link-item activities"><a data-v-26abcca9="" href="https://juejin.im/pins">沸点</a></li><li data-v-26abcca9="" class="nav-item link-item"><a data-v-26abcca9="" href="https://juejin.im/topics">话题</a></li><li data-v-26abcca9="" class="nav-item link-item book"><a data-v-26abcca9="" href="https://juejin.im/books">小册</a></li><li data-v-26abcca9="" class="nav-item link-item"><a data-v-26abcca9="" href="https://juejin.im/events/all">活动</a></li></ul></li><li data-v-26abcca9="" class="nav-item search"><form data-v-26abcca9="" role="search" class="search-form"><input data-v-26abcca9="" type="search" maxlength="32" placeholder="搜索掘金" class="search-input"><img data-v-26abcca9="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/juejin-search-icon.6f8ba1b.svg" alt="搜索" class="search-icon"></form></li><li data-v-26abcca9="" class="nav-item add"><div data-v-26abcca9="" class="add-group"><button data-v-26abcca9="" class="add-btn">写文章</button><div data-v-26abcca9="" class="more"><i data-v-26abcca9="" class="more-icon ion-android-arrow-dropdown"></i></div><ul data-v-26abcca9="" class="more-list"><li data-v-26abcca9="" class="item">发布沸点</li><li data-v-26abcca9="" class="item">分享链接</li><!----></ul></div><!----></li><li data-v-26abcca9="" class="nav-item notification"><a data-v-26abcca9="" class="app-link" href="https://juejin.im/notification" target="_blank"><i data-v-26abcca9="" class="icon ion-android-notifications"></i><!----></a></li><li data-v-26abcca9="" class="nav-item menu"><div data-v-292b3648="" data-v-11331c20="" data-v-26abcca9="" data-src="https://mirror-gold-cdn.xitu.io/168e08d6d9e8b3febec?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar loaded immediate" style="background-image: url(&quot;https://mirror-gold-cdn.xitu.io/168e08d6d9e8b3febec?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1&quot;);"></div><!----><ul data-v-26abcca9="" class="nav-menu user-dropdown-list" style="display: none;"><div data-v-26abcca9="" class="nav-menu-item-group"><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9=""><i data-v-26abcca9="" class="fengwei fw-write"></i><span data-v-26abcca9="">写文章</span></a></li><!----><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9=""><i data-v-26abcca9="" class="fengwei fw-draft"></i><span data-v-26abcca9="">草稿</span></a></li></div><div data-v-26abcca9="" class="nav-menu-item-group"><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/user/5a5f6102f265da3e3a6dd3b0" class="link-icon"><i data-v-26abcca9="" class="fengwei fw-person"></i><span data-v-26abcca9="">我的主页</span><!----></a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/user/5a5f6102f265da3e3a6dd3b0/likes"><img data-v-26abcca9="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="zan"><span data-v-26abcca9="">我赞过的</span></a></li><!----><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/user/5a5f6102f265da3e3a6dd3b0/collections"><img data-v-26abcca9="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="collect"><span data-v-26abcca9="">我的收藏集</span></a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/user/5a5f6102f265da3e3a6dd3b0/books?type=bought"><i data-v-26abcca9="" class="fengwei fw-bought"></i><span data-v-26abcca9="">已购</span></a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/subscribe"><i data-v-26abcca9="" class="fengwei fw-tag"></i><span data-v-26abcca9="">标签管理</span></a></li></div><div data-v-26abcca9="" class="nav-menu-item-group"><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/user/settings"><i data-v-26abcca9="" class="fengwei fw-setting"></i><span data-v-26abcca9="">设置</span></a></li><li data-v-26abcca9="" class="nav-menu-item more"><a data-v-26abcca9=""><i data-v-26abcca9="" class="fengwei fw-info"></i><span data-v-26abcca9="">关于</span><i data-v-26abcca9="" class="ion-chevron-right more-icon"></i></a><ul data-v-26abcca9="" class="nav-menu more-dropdown-list"><div data-v-26abcca9="" class="nav-menu-item-group"><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/app" target="_blank">下载应用</a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://juejin.im/about" target="_blank">关于</a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://xitu.io/jobs" target="_blank">加入我们</a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://github.com/xitu/gold-miner" rel="nofollow noopener noreferrer" target="_blank">翻译计划</a></li><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9="" href="https://bd.juejin.im/?utm_campaign=bd&amp;utm_source=web&amp;utm_medium=nav" target="_blank">合作伙伴</a></li></div></ul></li></div><div data-v-26abcca9="" class="nav-menu-item-group"><li data-v-26abcca9="" class="nav-menu-item"><a data-v-26abcca9=""><i data-v-26abcca9="" class="fengwei fw-logout"></i><span data-v-26abcca9="">登出</span></a></li></div></ul></li><!----><!----></ul></nav></div></header></div><main data-v-23c7d456="" class="container main-container"><div data-v-7407bc26="" data-v-23c7d456="" class="view column-view"><div data-v-7407bc26="" data-v-23c7d456="" class="main-area article-area shadow"><article data-v-7407bc26="" itemscope="itemscope" itemtype="http://schema.org/Article" class="article" data-v-23c7d456=""><meta itemprop="url" content="https://juejin.im/post/5e91b01651882573716a9b23"><meta itemprop="headline" content="一位前端小姐姐的五万字面试宝典"><meta itemprop="keywords" content="面试"><meta itemprop="datePublished" content="2020-04-11T11:59:58.349Z"><meta itemprop="image" content="https://b-gold-cdn.xitu.io/icon/icon-128.png"><div itemprop="author" itemscope="itemscope" itemtype="http://schema.org/Person"><meta itemprop="name" content="何时夕"><meta itemprop="url" content="https://juejin.im/user/5a74437bf265da4e896aa1ed"></div><div itemprop="publisher" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="掘金"><div itemprop="logo" itemscope="itemscope" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://b-gold-cdn.xitu.io/icon/icon-white-180.png"><meta itemprop="width" content="180"><meta itemprop="height" content="180"></div></div><div data-v-7407bc26="" class="author-info-block"><a data-v-7407bc26="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="avatar-link"><div data-v-292b3648="" data-v-11331c20="" data-v-7407bc26="" data-src="https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar loaded" style="background-image: url(&quot;https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1&quot;);"></div></a><div data-v-7407bc26="" class="author-info-box"><a data-v-44e95489="" data-v-7407bc26="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="username username ellipsis">何时夕<a data-v-00e1e43c="" data-v-44e95489="" href="https://juejin.im/book/5c90640c5188252d7941f5bb/section/5c9065385188252da6320022" target="_blank" rel="" class="rank"><img data-v-00e1e43c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/lv-3.e108c68.svg" alt="lv-3"></a></a><div data-v-7407bc26="" class="meta-box"><time data-v-7407bc26="" datetime="2020-04-11T11:59:58.349Z" title="Sat Apr 11 2020 19:59:58 GMT+0800 (中国标准时间)" class="time">2020年04月11日</time><span data-v-7407bc26="" class="views-count">阅读 39474</span><!----></div></div><button data-v-fa88a374="" data-v-7407bc26="" class="follow-button follow">关注</button></div><!----><h1 data-v-7407bc26="" class="article-title">一位前端小姐姐的五万字面试宝典</h1><div data-v-7407bc26="" data-id="5e91b13d6fb9a03c860b773f" itemprop="articleBody" class="article-content"><blockquote>
<p>本文投稿自一位前端小姐姐——<strong>徐漂漂</strong>，本文<strong>干货成吨，全程高能</strong>。希望大家多点赞、评论、关注，给小姐姐继续写文章的动力！</p>
</blockquote>
<p><a target="_blank" href="https://github.com/thelastto/interview" rel="nofollow noopener noreferrer">前端小姐姐的 GitHub</a></p>
<h3 class="heading" data-id="heading-0">另外小姐姐最近在看机会 base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。</h3>
<h2 class="heading" data-id="heading-1">一、算法</h2>
<h3 class="heading" data-id="heading-2">1.全排列</h3>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">permutate</span>(<span class="hljs-params">str</span>) </span>{
    <span class="hljs-keyword">var</span> array = str.split(<span class="hljs-string">''</span>);
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span>(<span class="hljs-params">array, pre = []</span>) </span>{
        <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">1</span>) {
            <span class="hljs-keyword">return</span> [pre.concat(array).join(<span class="hljs-string">''</span>)];
        }
        <span class="hljs-keyword">let</span> res = [];
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>; index &lt; array.length; index++) {
            <span class="hljs-keyword">var</span> first = array.pop();
            res = res.concat(loop(array, [...pre, first]));
            array.unshift(first);
        }
        <span class="hljs-keyword">return</span> res;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(loop(array)))
}

<span class="copy-code-btn">复制代码</span></code></pre><h3 class="heading" data-id="heading-3">2.二分搜索</h3>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BinarySearch1</span> (<span class="hljs-params">arr, target</span>) </span>{
    <span class="hljs-keyword">return</span> search(arr, target, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>)
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span> (<span class="hljs-params">arr, target, from, to</span>) </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">from</span> &gt; to) {
            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>
        }
        <span class="hljs-keyword">const</span> mid = <span class="hljs-built_in">Math</span>.floor((<span class="hljs-keyword">from</span> + to)/<span class="hljs-number">2</span>)
        <span class="hljs-keyword">if</span> (arr[mid] &gt; target) {
            <span class="hljs-keyword">return</span> search(arr, target, <span class="hljs-keyword">from</span>, mid - <span class="hljs-number">1</span>)
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; target) {
            <span class="hljs-keyword">return</span> search(arr, target, mid + <span class="hljs-number">1</span>, to)
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> mid
        }
    }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BinarySearch2</span> (<span class="hljs-params">arr, target</span>) </span>{
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">from</span> = <span class="hljs-number">0</span>
    <span class="hljs-keyword">let</span> to = arr.length - <span class="hljs-number">1</span>
    <span class="hljs-keyword">let</span> mid = <span class="hljs-built_in">Math</span>.floor((<span class="hljs-keyword">from</span> + to)/<span class="hljs-number">2</span>)
    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">from</span> &lt;= to) {
        mid = <span class="hljs-built_in">Math</span>.floor((<span class="hljs-keyword">from</span> + to)/<span class="hljs-number">2</span>)
        <span class="hljs-keyword">if</span> (arr[mid] &gt; target) {
            to = mid - <span class="hljs-number">1</span>
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; target) {
            <span class="hljs-keyword">from</span> = mid + <span class="hljs-number">1</span>
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> mid
        }
    }

    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>
}
<span class="copy-code-btn">复制代码</span></code></pre><h3 class="heading" data-id="heading-4">3.排序</h3>
<h4 class="heading" data-id="heading-5">(1).冒泡排序</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-comment">/*
第1次循环确定最大的
第n次循环确定第n大的
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BubbleSort</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">const</span> length = arr.length

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>; j &lt; length-i; j++) {
            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j - <span class="hljs-number">1</span>]) {
                <span class="hljs-keyword">const</span> temp = arr[j]
                arr[j] = arr[j - <span class="hljs-number">1</span>]
                arr[j - <span class="hljs-number">1</span>] = temp
            }
        }
    }

    <span class="hljs-keyword">return</span> arr
}
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-6">(2).快速排序</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-comment">/*
在左边找大数，在右边找小数
交换
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">QuickSort</span>(<span class="hljs-params">arr, low, high</span>) </span>{
    <span class="hljs-keyword">let</span> left = low
    <span class="hljs-keyword">let</span> right = high
    <span class="hljs-keyword">let</span> basic = arr[low]
    <span class="hljs-keyword">while</span> (left &lt; right) {
        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt; basic) {
            right--
        }
        <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= basic) {
            left++
        }

        <span class="hljs-keyword">if</span> (left &lt; right) {
            <span class="hljs-keyword">const</span> temp = arr[left]
            arr[left] = arr[right]
            arr[right] = temp
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">const</span> temp = arr[low]
            arr[low] = arr[left]
            arr[left] = temp

            QuickSort(arr, low, left - <span class="hljs-number">1</span>)
            QuickSort(arr, right + <span class="hljs-number">1</span>, high)
        }
    }

    <span class="hljs-keyword">return</span> arr
}
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-7">(3).选择排序</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-comment">/*
 寻找第i小的数的位置，放到i位置上
 */</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SelectionSort</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">const</span> length = arr.length
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++ ) {
        <span class="hljs-keyword">let</span> minIndex= i
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; length; j++) {
            minIndex = arr[minIndex] &lt;= arr[j] ? minIndex : j
        }
        <span class="hljs-keyword">if</span> (minIndex !== i) {
            <span class="hljs-keyword">const</span> temp = arr[i]
            arr[i] = arr[minIndex]
            arr[minIndex] = temp

        }
    }
    <span class="hljs-keyword">return</span> arr
}
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-8">(4).插入排序</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">InsertionSort</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">const</span> length = arr.length
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; length; i++) {
        <span class="hljs-keyword">const</span> temp = arr[i]
        <span class="hljs-keyword">let</span> j
        <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j]; j--) {
            arr[j+<span class="hljs-number">1</span>] = arr[j]
        }
        arr[j+<span class="hljs-number">1</span>] = temp
    }
    <span class="hljs-keyword">return</span> arr
}
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-9">(5).希尔排序</h4>
<p>插入排序的改进版。对间隔 gap 为一组的数进行插入排序</p>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShellSort</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">const</span> length = arr.length
    <span class="hljs-keyword">let</span> gap = <span class="hljs-built_in">Math</span>.floor(length)
    <span class="hljs-keyword">while</span> (gap) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = gap; i &lt; length; i++) {
            <span class="hljs-keyword">const</span> temp = arr[i]
            <span class="hljs-keyword">let</span> j
            <span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; arr[j]; j = j - gap) {
                arr[j + gap] = arr[j]
            }
            arr[j + gap] = temp
        }
        gap = <span class="hljs-built_in">Math</span>.floor(gap / <span class="hljs-number">2</span>)
    }
    <span class="hljs-keyword">return</span> arr
}
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-10">(6).归并排序</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MergeSort</span> (<span class="hljs-params">arr, low, high</span>) </span>{
    <span class="hljs-keyword">const</span> length = arr.length
    <span class="hljs-keyword">if</span> (low === high) {
        <span class="hljs-keyword">return</span> arr[low]
    }
    <span class="hljs-keyword">const</span> mid = <span class="hljs-built_in">Math</span>.floor((low + high)/<span class="hljs-number">2</span>)
    MergeSort(arr, low, mid)
    MergeSort(arr, mid + <span class="hljs-number">1</span>, high)
    merge(arr, low, high)
    <span class="hljs-keyword">return</span> arr

}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">merge</span> (<span class="hljs-params">arr, low, high</span>) </span>{
    <span class="hljs-keyword">const</span> mid = <span class="hljs-built_in">Math</span>.floor((low + high)/<span class="hljs-number">2</span>)
    <span class="hljs-keyword">let</span> left = low
    <span class="hljs-keyword">let</span> right = mid + <span class="hljs-number">1</span>
    <span class="hljs-keyword">const</span> result = []
    <span class="hljs-keyword">while</span> (left &lt;= mid &amp;&amp; right &lt;= high) {
        <span class="hljs-keyword">if</span> (arr[left] &lt;= arr[right]) {
            result.push(arr[left++])
        } <span class="hljs-keyword">else</span> {
            result.push(arr[right++])
        }
    }
    <span class="hljs-keyword">while</span> (left &lt;= mid) {
        result.push(arr[left++])
    }
    <span class="hljs-keyword">while</span> (right &lt;= high) {
        result.push(arr[right++])
    }

    arr.splice(low, high-low+<span class="hljs-number">1</span>, ...result)
}

<span class="hljs-keyword">const</span> test = [<span class="hljs-number">2</span>, <span class="hljs-number">34</span>, <span class="hljs-number">452</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>, <span class="hljs-number">785</span>, <span class="hljs-number">32</span>, <span class="hljs-number">345</span>, <span class="hljs-number">567</span>, <span class="hljs-number">322</span>,<span class="hljs-number">5</span>]

<span class="hljs-built_in">console</span>.log(MergeSort(test, <span class="hljs-number">0</span>, test.length - <span class="hljs-number">1</span>))
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-11">(7).堆排序</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HeapSort</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">const</span> length = arr.length

    <span class="hljs-comment">// 调整初始堆，调整完其实也确定了最大值</span>
    <span class="hljs-comment">// 但此时最大值是在 arr[0] 中</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-built_in">Math</span>.floor(length/<span class="hljs-number">2</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        adjustHeap(arr, i, length)
    }

    <span class="hljs-comment">// 把 arr[0](最大值)换到后面</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = length - <span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--) {
        <span class="hljs-keyword">const</span> temp = arr[<span class="hljs-number">0</span>]
        arr[<span class="hljs-number">0</span>] = arr[i]
        arr[i] = temp
        adjustHeap(arr, <span class="hljs-number">0</span>, i)
    }

    <span class="hljs-keyword">return</span> arr
}

<span class="hljs-comment">// size 是还需要调整的堆的大小</span>
<span class="hljs-comment">// 随着一个个最大值的确定，size 会越来越小</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adjustHeap</span> (<span class="hljs-params">arr, position, size</span>) </span>{
    <span class="hljs-keyword">const</span> left = position * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>
    <span class="hljs-keyword">const</span> right = left + <span class="hljs-number">1</span>
    <span class="hljs-keyword">let</span> maxIndex = position
    <span class="hljs-keyword">if</span> (left &lt; size &amp;&amp; arr[left] &gt; arr[maxIndex]) {
        maxIndex = left
    }
    <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; arr[right] &gt; arr[maxIndex]) {
        maxIndex = right
    }
    <span class="hljs-keyword">if</span> (maxIndex !== position) {
        <span class="hljs-keyword">const</span> temp = arr[position]
        arr[position] = arr[maxIndex]
        arr[maxIndex] = temp
        adjustHeap(arr, maxIndex, size)
    }
    <span class="hljs-keyword">return</span> arr
}
<span class="copy-code-btn">复制代码</span></code></pre><h2 class="heading" data-id="heading-12">二、JS基础</h2>
<h3 class="heading" data-id="heading-13">1.继承</h3>
<ul>
<li>
<p>1、原型链继承，将父类的实例作为子类的原型，他的特点是实例是子类的实例也是父类的实例，父类新增的原型方法/属性，子类都能够访问，并且原型链继承简单易于实现，缺点是来自原型对象的所有属性被所有实例共享，无法实现多继承，无法向父类构造函数传参。</p>
</li>
<li>
<p>2、构造继承，使用父类的构造函数来增强子类实例，即复制父类的实例属性给子类，构造继承可以向父类传递参数，可以实现多继承，通过call多个父类对象。但是构造继承只能继承父类的实例属性和方法，不能继承原型属性和方法，无法实现函数服用，每个子类都有父类实例函数的副本，影响性能</p>
</li>
<li>
<p>3、实例继承，为父类实例添加新特性，作为子类实例返回，实例继承的特点是不限制调用方法，不管是new 子类（）还是子类（）返回的对象具有相同的效果，缺点是实例是父类的实例，不是子类的实例，不支持多继承</p>
</li>
<li>
<p>4、拷贝继承：特点：支持多继承，缺点：效率较低，内存占用高（因为要拷贝父类的属性）无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</p>
</li>
<li>
<p>5、组合继承：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p>
</li>
<li>
<p>6、寄生组合继承：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p>
</li>
</ul>
<h3 class="heading" data-id="heading-14">2.this指向</h3>
<h4 class="heading" data-id="heading-15">(1).this 指向有哪几种</h4>
<ul>
<li>
<p>1.默认绑定：全局环境中，this默认绑定到window。</p>
</li>
<li>
<p>2.隐式绑定：一般地，被直接对象所包含的函数调用时，也称为方法调用，this隐式绑定到该直接对象。</p>
</li>
<li>
<p>3.隐式丢失：隐式丢失是指被隐式绑定的函数丢失绑定对象，从而默认绑定到window。显式绑定：通过call()、apply()、bind()方法把对象绑定到this上，叫做显式绑定。</p>
</li>
<li>
<p>4.new绑定：如果函数或者方法调用之前带有关键字new，它就构成构造函数调用。对于this绑定来说，称为new绑定。</p>
<ul>
<li>构造函数通常不使用return关键字，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。</li>
<li>如果构造函数使用return语句但没有指定返回值，或者返回一个原始值，那么这时将忽略返回值，同时使用这个新对象作为调用结果。</li>
<li>如果构造函数显式地使用return语句返回一个对象，那么调用表达式的值就是这个对象。</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-16">(2).改变函数内部 this 指针的指向函数（bind，apply，call的区别）</h4>
<ul>
<li>
<p>1.apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments);即A对象应用B对象的方法。</p>
</li>
<li>
<p>2.call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2);即A对象调用B对象的方法。</p>
</li>
<li>
<p>3.bind除了返回是函数以外，它的参数和call一样。</p>
</li>
</ul>
<h4 class="heading" data-id="heading-17">(3).箭头函数</h4>
<ul>
<li>1.箭头函数没有this，所以需要通过查找作用域链来确定this的值，这就意味着如果箭头函数被非箭头函数包含，this绑定的就是最近一层非箭头函数的this，</li>
<li>2.箭头函数没有自己的arguments对象，但是可以访问外围函数的arguments对象</li>
<li>3.不能通过new关键字调用，同样也没有new.target值和原型</li>
</ul>
<h3 class="heading" data-id="heading-18">3.数据类型</h3>
<h4 class="heading" data-id="heading-19">(1).基本数据类型</h4>
<p>Undefined、Null、Boolean、Number 、String、Symbol</p>
<h4 class="heading" data-id="heading-20">(2).symbol</h4>
<ul>
<li>
<p>1.语法：</p>
<pre><code class="hljs javascript copyable" lang="javascript"><span class="hljs-comment">// 不能用 new</span>
<span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>()

<span class="hljs-comment">// 可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</span>
<span class="hljs-keyword">let</span> s1 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'foo'</span>);
<span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'bar'</span>);

s1 <span class="hljs-comment">// Symbol(foo)</span>
s2 <span class="hljs-comment">// Symbol(bar)</span>

s1.toString() <span class="hljs-comment">// "Symbol(foo)"</span>
s2.toString() <span class="hljs-comment">// "Symbol(bar)"</span>
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>2.作用：定义一个独一无二的值</p>
<ul>
<li>
<p>1.用作对象的属性名</p>
<ul>
<li>1.不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。</li>
<li>2.<code>Object.getOwnPropertySymbols()</code>方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</li>
<li>3.<code>Reflect.ownKeys()</code>方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。</li>
</ul>
</li>
<li>
<p>2.用于定义一组常量</p>
<pre><code class="hljs javascript copyable" lang="javascript">log.levels = {
  <span class="hljs-attr">DEBUG</span>: <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'debug'</span>),
  <span class="hljs-attr">INFO</span>: <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'info'</span>),
  <span class="hljs-attr">WARN</span>: <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'warn'</span>)
};
<span class="copy-code-btn">复制代码</span></code></pre></li>
</ul>
</li>
<li>
<p>3.类型转换：</p>
<ul>
<li>
<p>1.转成字符串</p>
<pre><code class="hljs javascript copyable" lang="javascript"><span class="hljs-built_in">String</span>(sym) <span class="hljs-comment">// 'Symbol(My symbol)'</span>
sym.toString() <span class="hljs-comment">// 'Symbol(My symbol)'</span>
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>2.转成布尔值</p>
<pre><code class="hljs javascript copyable" lang="javascript"><span class="hljs-built_in">Boolean</span>(sym)
!sym
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>3.不能转成数字</p>
</li>
<li>
<p>4.不能与其他类型的值进行运算</p>
<pre><code class="hljs javascript copyable" lang="javascript"><span class="hljs-keyword">let</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">'My symbol'</span>);

<span class="hljs-string">"your symbol is "</span> + sym
<span class="hljs-comment">// TypeError: can't convert symbol to string</span>
<span class="hljs-string">`your symbol is <span class="hljs-subst">${sym}</span>`</span>
<span class="hljs-comment">// TypeError: can't convert symbol to string</span>
<span class="copy-code-btn">复制代码</span></code></pre></li>
</ul>
</li>
<li>
<p>4.属性：Symbol.prototype.description</p>
</li>
<li>
<p>5.Symbol.for()，Symbol.keyFor()</p>
<ul>
<li>1.在全局环境中登记 Symbol 值。之后不会再重复生成</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-21">(3).如何判断类型</h4>
<p>typeof()，instanceof，Object.prototype.toString.call()</p>
<ul>
<li>
<p>1.<code>typeof</code>操作符</p>
<ul>
<li>1."undefined"——如果这个值未定义;</li>
<li>2."boolean"——如果这个值是布尔值;</li>
<li>3."string"——如果这个值是字符串;</li>
<li>4."number"——如果这个值是数值;</li>
<li>5."object"——如果这个值是对象或 null;</li>
<li>6."function"——如果这个值是函数。</li>
<li>7."symbol"——es6新增的symbol类型</li>
</ul>
</li>
<li>
<p>2.<code>instanceof</code>：用来判断对象是不是某个构造函数的实例。会沿着原型链找的</p>
</li>
<li>
<p>3.<code>Object.prototype.toString.call()</code></p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> toString = <span class="hljs-built_in">Object</span>.prototype.toString;

toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>); <span class="hljs-comment">// [object Date]</span>
toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>); <span class="hljs-comment">// [object String]</span>
toString.call(<span class="hljs-built_in">Math</span>); <span class="hljs-comment">// [object Math]</span>
toString.call([]); <span class="hljs-comment">// [Object Array]</span>
toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>) <span class="hljs-comment">// [object Number]</span>
toString.call(<span class="hljs-literal">true</span>) <span class="hljs-comment">// [object Boolean]</span>
toString.call(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{}) <span class="hljs-comment">// [object Function]</span>
toString.call({}) <span class="hljs-comment">// [object Object]</span>
toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {})) <span class="hljs-comment">// [object Promise]</span>

toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>) <span class="hljs-comment">// [object Map]</span>
toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>) <span class="hljs-comment">// [object RegExp]</span>
toString.call(<span class="hljs-built_in">Symbol</span>()) <span class="hljs-comment">// [object Symbol]</span>
toString.call(<span class="hljs-function"><span class="hljs-keyword">function</span> *<span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>{}) <span class="hljs-comment">// [object GeneratorFunction]</span>
toString.call(<span class="hljs-keyword">new</span> DOMException()) <span class="hljs-comment">// [object DOMException]</span>
toString.call(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>) <span class="hljs-comment">// [object Error]</span>

toString.call(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// [object Undefined]</span>
toString.call(<span class="hljs-literal">null</span>); <span class="hljs-comment">// [object Null]</span>

<span class="hljs-comment">// 还有 WeakMap、 WeakSet、Proxy 等</span>
<span class="copy-code-btn">复制代码</span></code></pre></li>
</ul>
<h4 class="heading" data-id="heading-22">(4).判断是否是数组</h4>
<ul>
<li>1.<code>Array.isArray(arr)</code></li>
<li>2.<code>Object.prototype.toString.call(arr) === '[Object Array]'</code></li>
<li>3.<code>arr instanceof Array</code></li>
<li>4.<code>array.constructor === Array</code></li>
</ul>
<h4 class="heading" data-id="heading-23">(5).字符串转数字</h4>
<p><code>parseInt(string, radix)</code></p>
<h3 class="heading" data-id="heading-24">4.CallBack Hell</h3>
<p>大脑对于事情的计划方式是线性的、阻塞的、单线程的语义，但是回调表达异步流 程的方式是非线性的、非顺序的，这使得正确推导这样的代码难度很大。难于理解的代码 是坏代码，会导致坏 bug。我们需要一种更同步、更顺序、更阻塞的的方式来表达异步，就像我们的大脑一样。</p>
<p>也是更重要的一点，回调会受到控制反转的影响，因为回调暗中把控制权交给第三 方(通常是不受你控制的第三方工具!)来调用你代码中的 continuation。可以发明一些特定逻辑来解决这些信任问题，但是其难度高于应有的水平，可能会产生更 笨重、更难维护的代码，并且缺少足够的保护，其中的损害要直到你受到 bug 的影响才会 被发现。</p>
<p>我们需要一个通用的方案来解决这些信任问题。不管我们创建多少回调，这一方案都应可 以复用，且没有重复代码的开销。</p>
<h4 class="heading" data-id="heading-25">(1).Promise 为什么以及如何用于解决控制反转信任问题</h4>
<p>Promise 的实现可以<a target="_blank" href="https://juejin.im/js-skill/promise.md" rel="nofollow noopener noreferrer">看这里</a></p>
<p>Promise 这种模式通过可信任的语义把回调作为参数传递，使得这种行为更可靠更合理。 通过把回调的控制反转反转回来，我们把控制权放在了一个可信任的系统(Promise)中， 这种系统的设计目的就是为了使异步编码更清晰。Promise 并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其他工具之间的可信任 的中介机制。</p>
<ul>
<li>
<p>调用回调过早;</p>
<ul>
<li>
<p>这个问题主要就是担心代码是否会引入类似 Zalgo 这样的副作用(参见第 2 章)。在这类问 题中，一个任务有时同步完成，有时异步完成，这可能会导致竞态条件。</p>
<p>根据定义，Promise 就不必担心这种问题，因为即使是立即完成的 Promise(类似于 new Promise(function(resolve){ resolve(42); }))也无法被同步观察到。</p>
<p>也就是说，对一个 Promise 调用 then(..) 的时候，即使这个 Promise 已经决议，提供给 then(..) 的回调也总会被异步调用(对此的更多讨论，请参见 1.5 节)。</p>
</li>
</ul>
</li>
<li>
<p>调用回调过晚(或不被调用);</p>
<ul>
<li>和前面一点类似，Promise 创建对象调用 resolve(..) 或 reject(..) 时，这个 Promise 的 then(..) 注册的观察回调就会被自动调度。可以确信，这些被调度的回调在下一个异步事 件点上一定会被触发(参见 1.5 节)。</li>
</ul>
</li>
<li>
<p>回调未调用</p>
<ul>
<li>首先，没有任何东西(甚至 JavaScript 错误)能阻止 Promise 向你通知它的决议(如果它 决议了的话)。如果你对一个 Promise 注册了一个完成回调和一个拒绝回调，那么 Promise 在决议时总是会调用其中的一个。</li>
<li>但是，如果 Promise 本身永远不被决议呢?即使这样，Promise 也提供了解决方案，其使用 了一种称为竞态的高级抽象机制:</li>
</ul>
</li>
<li>
<p>调用回调次数过多;</p>
<ul>
<li>Promise 的定义方式使得它只能被决议一次。如果出于某种 原因，Promise 创建代码试图调用 resolve(..) 或 reject(..) 多次，或者试图两者都调用， 那么这个 Promise 将只会接受第一次决议，并默默地忽略任何后续调用。</li>
<li>由于 Promise 只能被决议一次，所以任何通过 then(..) 注册的(每个)回调就只会被调 用一次。</li>
</ul>
</li>
<li>
<p>未能传递所需的环境和参数;</p>
<ul>
<li>
<p>Promise 至多只能有一个决议值(完成或拒绝)。</p>
<p>如果你没有用任何值显式决议，那么这个值就是 undefined，这是 JavaScript 常见的处理方 式。但不管这个值是什么，无论当前或未来，它都会被传给所有注册的(且适当的完成或 拒绝)回调。</p>
</li>
</ul>
</li>
<li>
<p>吞掉可能出现的错误和异常。</p>
<ul>
<li>如果拒绝一个 Promise 并给出一个理由(也就是一个出错消息)，这个值就会被传给拒绝回调</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-26">(2).promise、generator、async/await</h4>
<ul>
<li>
<p>promise</p>
<ul>
<li>优点：解决了回调地狱的问题</li>
<li>缺点：无法取消 Promise ，错误需要通过回调函数来捕获</li>
</ul>
</li>
<li>
<p>generator</p>
<ul>
<li>生成器内部的代码是以自然的同步 / 顺序方式表达任务的一系列步骤</li>
</ul>
</li>
<li>
<p>async/await</p>
<ul>
<li>
<p>优点：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题</p>
</li>
<li>
<p>缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。</p>
</li>
</ul>
</li>
</ul>
<h3 class="heading" data-id="heading-27">5.加载</h3>
<h4 class="heading" data-id="heading-28">(1).异步加载js的方法</h4>
<ul>
<li>
<p>defer：只支持IE如果您的脚本不会改变文档的内容，可将 defer 属性加入到<code>&lt;script&gt;</code>标签中，以便加快处理文档的速度。因为浏览器知道它将能够安全地读取文档的剩余部分而不用执行脚本，它将推迟对脚本的解释，直到文档已经显示给用户为止。</p>
</li>
<li>
<p>async：HTML5 属性，仅适用于外部脚本；并且如果在IE中，同时存在defer和async，那么defer的优先级比较高；脚本将在页面完成时执行。</p>
</li>
</ul>
<h4 class="heading" data-id="heading-29">(2).图片的懒加载和预加载</h4>
<ul>
<li>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。</li>
<li>懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。</li>
</ul>
<p><strong>两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</strong></p>
<h3 class="heading" data-id="heading-30">6.事件</h3>
<h4 class="heading" data-id="heading-31">(1).事件流</h4>
<p>HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件onclick、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。</p>
<p>什么是事件流：事件流描述的是从页面中接收事件的顺序,DOM2级事件流包括下面几个阶段。</p>
<ul>
<li>事件捕获阶段</li>
<li>处于目标阶段</li>
<li>事件冒泡阶段</li>
</ul>
<p>IE只支持事件冒泡。</p>
<h4 class="heading" data-id="heading-32">(2).什么是事件监听</h4>
<p><code>addEventListener()</code>方法，用于向指定元素添加事件句柄，它可以更简单的控制事件，语法为</p>
<p><code>element.addEventListener(event, function, useCapture)</code>;</p>
<ul>
<li>
<p>第一个参数是事件的类型(如 "click" 或 "mousedown").</p>
</li>
<li>
<p>第二个参数是事件触发后调用的函数。</p>
</li>
<li>
<p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p>
</li>
</ul>
<pre><code class="hljs tsx copyable" lang="tsx">target.addEventListener(type, listener, options: EventListenerOptions);
target.addEventListener(type, listener, useCapture: boolean);
target.addEventListener(type, listener, useCapture: boolean, wantsUntrusted: boolean  );  // Gecko/Mozilla only
<span class="copy-code-btn">复制代码</span></code></pre><pre><code class="hljs typescript copyable" lang="typescript"><span class="hljs-keyword">interface</span> EventListenerOptions {
  capture?: <span class="hljs-built_in">boolean</span> <span class="hljs-comment">// 表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发</span>
  once?: <span class="hljs-built_in">boolean</span> <span class="hljs-comment">// 表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除</span>
  passive?: <span class="hljs-built_in">boolean</span> <span class="hljs-comment">// 设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告</span>
}
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-33">(3). mouseover 和 mouseenter 的区别</h4>
<ul>
<li>mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，冒泡的过程。对应的移除事件是mouseout</li>
<li>mouseenter：当鼠标移除元素本身（不包含元素的子元素）会触发事件，也就是不会冒泡，对应的移除事件是mouseleave</li>
</ul>
<h4 class="heading" data-id="heading-34">(4). 事件委托以及冒泡原理</h4>
<p>简介：事件委托指的是，不在事件的发生地（直接dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素DOM的类型，来做出不同的响应。</p>
<p>举例：最经典的就是ul和li标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在li标签上直接添加，而是在ul父元素上添加。</p>
<p>好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。</p>
<h4 class="heading" data-id="heading-35">(5). 事件代理在捕获阶段的实际应用</h4>
<p>可以在父元素层面阻止事件向子元素传播，也可代替子元素执行某些操作。</p>
<h3 class="heading" data-id="heading-36">7.跨域</h3>
<h4 class="heading" data-id="heading-37">(1).CORS</h4>
<p>CORS(Cross-Origin Resource Sharing，跨源资源共享) 背后的基本思想，就是使用自定义的 HTTP 头部 让浏览器与服务器进行沟通。</p>
<p>比如一个简单的使用 GET 或 POST 发送的请求，它没有自定义的头部，而主体内容是 text/plain。在 发送该请求时，需要给它附加一个额外的 Origin 头部，其中包含请求页面的源信息(协议、域名和端 口)，以便服务器根据这个头部信息来决定是否给予响应。下面是 Origin 头部的一个示例:</p>
<p><code>Origin: http://www.nczonline.net</code>
如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源</p>
<p>信息(如果是公共资源，可以回发"*")。例如:</p>
<p><code>Access-Control-Allow-Origin: http://www.nczonline.net</code></p>
<p>如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器 会处理请求。注意，请求和响应都不包含 cookie 信息。</p>
<h4 class="heading" data-id="heading-38">(2).IE</h4>
<p>微软在 IE8 中引入了 XDR(XDomainRequest)类型。以下是 XDR 与 XHR 的一些不同之 处。</p>
<ol>
<li>cookie 不会随请求发送，也不会随响应返回。</li>
<li>只能设置请求头部信息中的 Content-Type 字段。</li>
<li>不能访问响应头部信息。</li>
<li>只支持GET和POST请求。</li>
</ol>
<h4 class="heading" data-id="heading-39">(3).其他浏览器</h4>
<p>通过 XMLHttpRequest 对象实现了对 CORS 的原生支持</p>
<ol>
<li>不能使用 setRequestHeader()设置自定义头部。</li>
<li>不能发送和接收 cookie。</li>
<li>调用 getAllResponseHeaders()方法总会返回空字符串。</li>
</ol>
<h4 class="heading" data-id="heading-40">(4).JSONP</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleResponse</span>(<span class="hljs-params">response</span>)</span>{
alert(<span class="hljs-string">"You’re at IP address "</span> + response.ip + <span class="hljs-string">", which is in "</span> +
response.city + <span class="hljs-string">", "</span> + response.region_name);
}
<span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"script"</span>);
script.src = <span class="hljs-string">"http://freegeoip.net/json/?callback=handleResponse"</span>; <span class="hljs-built_in">document</span>.body.insertBefore(script, <span class="hljs-built_in">document</span>.body.firstChild);
<span class="copy-code-btn">复制代码</span></code></pre><ul>
<li>JSON只支持get，因为script标签只能使用get请求；</li>
<li>JSONP需要后端配合返回指定格式的数据。</li>
</ul>
<h4 class="heading" data-id="heading-41">(5). 代理</h4>
<p>起一个代理服务器，实现数据的转发</p>
<h4 class="heading" data-id="heading-42">(6).利用 iframe</h4>
<ul>
<li>window.postMessage</li>
<li>Cross Frame(aba)</li>
<li>window.name</li>
</ul>
<p><a target="_blank" href="http://lovelock.coding.me/javascript/2015-08-10-iframe%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/#window-name" rel="nofollow noopener noreferrer">lovelock.coding.me/javascript/…</a></p>
<h4 class="heading" data-id="heading-43">(7).window.postMessage</h4>
<p>只支持到IE8及以上的IE浏览器，其他现代浏览器当然没有问题。</p>
<h4 class="heading" data-id="heading-44">(8). child 与 parent 通信</h4>
<p>不受<a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" rel="nofollow noopener noreferrer">同源策略</a>的限制</p>
<ul>
<li>
<p>给接收数据的一方添加事件绑定：<code>addEventListener('message', receiveMessage);</code></p>
</li>
<li>
<p>发送数据的一方拿到接收数据一方的window：<code>targetWindow.postMessage("Welcome to unixera.com", "http://iframe1.unixera.com");</code></p>
</li>
</ul>
<h4 class="heading" data-id="heading-45">(9).chilid 与 child 通信</h4>
<p>有跨域问题，只适合站内不同子域间的通信（设置document.domain为同一级域名）</p>
<h4 class="heading" data-id="heading-46">(10).Cross Frame</h4>
<p>这是一个通用的方法，简单来说是A iframe包含B iframe，在B iframe中调用了相关的接口，完成调用之后获取到结果，<code>location.href</code>到和A iframe位于同一个域的C iframe，在C iframe中调用A iframe中定义的方法，将B iframe中获取的结果作为参数传到要跳转的url后，在C iframe中通过<code>location.search</code>变量来获取变量。</p>
<p></p><figure><img alt="iframe通信" class="lazyload inited" data-src="https://user-gold-cdn.xitu.io/2020/4/11/17168edb3b5c65ed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" data-width="790" data-height="364" src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;790&quot; height=&quot;364&quot;&gt;&lt;/svg&gt;"><figcaption></figcaption></figure><p></p>
<h4 class="heading" data-id="heading-47">(11).window.name</h4>
<p><code>window</code>对象的<code>name</code>属性是一个很特殊的属性，在设定了<code>window.name</code>之后，执行<code>location.href</code>跳转，<code>window.name</code>属性仍然不会发生变化，可以通过这种方式实现变量的传递。</p>
<h3 class="heading" data-id="heading-48">8.Ajax</h3>
<h4 class="heading" data-id="heading-49">(1).实现一个Ajax</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()
<span class="hljs-comment">// 必须在调用 open()之前指定 onreadystatechange 事件处理程序才能确保跨浏览器兼容性</span>
xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {
    <span class="hljs-keyword">if</span> (xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span> || xhr.status ==== <span class="hljs-number">304</span>) {
      <span class="hljs-built_in">console</span>.log(xhr.responseText)
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Error:'</span> + xhr.status)
    }
  }
}
<span class="hljs-comment">// 第三个参数表示异步发送请求</span>
xhr.open(<span class="hljs-string">'get'</span>, <span class="hljs-string">'/api/getSth'</span>,  <span class="hljs-literal">true</span>)
<span class="hljs-comment">// 参数为作为请求主体发送的数据</span>
xhr.send(<span class="hljs-literal">null</span>)
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-50">(2).Ajax状态</h4>
<ol start="0">
<li>未初始化。尚未调用 open()方法。</li>
<li>启动。已经调用 open()方法，但尚未调用 send()方法。</li>
<li>发送。已经调用 send()方法，但尚未接收到响应。</li>
<li>接收。已经接收到部分响应数据。</li>
<li>完成。已经接收到全部响应数据，而且已经可以在客户端使用了。</li>
</ol>
<h4 class="heading" data-id="heading-51">(3).将原生的 ajax 封装成 promise</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-keyword">const</span> ajax = <span class="hljs-function">(<span class="hljs-params">url, method, <span class="hljs-keyword">async</span>, data</span>) =&gt;</span> {
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()
    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {
      <span class="hljs-comment">// 已经接收到全部响应数据，而且已经可以在客户端使用了</span>
      <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span>) {
        <span class="hljs-keyword">if</span> (xhr.status === <span class="hljs-number">200</span>) {
          resolve(<span class="hljs-built_in">JSON</span>.parse(xhr.responseText))
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.status &gt; <span class="hljs-number">400</span>) {
          reject(<span class="hljs-string">'发生错误'</span>)
        }
      }
    }
    xhr.open(url, method, <span class="hljs-keyword">async</span>)
    xhr.send(data || <span class="hljs-literal">null</span>)
  })
}
<span class="copy-code-btn">复制代码</span></code></pre><h3 class="heading" data-id="heading-52">9.垃圾回收</h3>
<p>找出那些不再继续使用的变 量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔(或代码执行中预定的收集时间)， 周期性地执行这一操作。</p>
<h4 class="heading" data-id="heading-53">(1).标记清除</h4>
<p>先所有都加上标记，再把环境中引用到的变量去除标记。剩下的就是没用的了</p>
<h4 class="heading" data-id="heading-54">(2).引用计数</h4>
<p>跟踪记录每 个值被引用的次数。清除引用次数为0的变量
⚠️<strong>会有循环引用问题</strong>  。循环引用如果大量存在就会导致内存泄露。</p>
<h3 class="heading" data-id="heading-55">10.eval是什么</h3>
<p><strong>eval 方法就像是一个完整的 ECMAScript 解析器，它只接受一个参数，即要执行的 ECMAScript (或JavaScript) 字符串</strong></p>
<ul>
<li>1.性能差：引擎无法在编译时对作用域查找进行优化
<ul>
<li>1.JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的 词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到 标识符。</li>
<li>2.无法在词法分析阶段明确知道 eval(..) 会接收到什么代码，这些代码会 如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底 是什么。最悲观的情况是如果出现了 eval(..) 或 with，所有的优化可能都是无意义的，因此最简 单的做法就是完全不做任何优化。</li>
</ul>
</li>
<li>2.欺骗作用域：但在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其 中的声明无法修改所在的作用域。</li>
</ul>
<h3 class="heading" data-id="heading-56">11.监听对象属性的改变</h3>
<h4 class="heading" data-id="heading-57">(一).ES5 中</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-built_in">Object</span>.defineProperty(user,<span class="hljs-string">'name'</span>,{
  set：<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key,value</span>)</span>{
    <span class="hljs-comment">// 这也是 Vue 的原理</span>
  }
})
<span class="copy-code-btn">复制代码</span></code></pre><h4 class="heading" data-id="heading-58">(二). ES6 中</h4>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-keyword">var</span>  user = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>({}, {
  set：<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target,key,value,receiver</span>)</span>{
    
  }
})
<span class="copy-code-btn">复制代码</span></code></pre><p>可以监听动态增加的属性。例如 <code>user.id = 1</code></p>
<h3 class="heading" data-id="heading-59">12.实现一个私有变量</h3>
<ul>
<li>
<p>1.配置属性</p>
<pre><code class="hljs js copyable" lang="js">obj={
  <span class="hljs-attr">name</span>: <span class="hljs-string">'xujiahui'</span>,
  <span class="hljs-attr">getName</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
  }
}
object.defineProperty(obj,<span class="hljs-string">"name"</span>,{
<span class="hljs-comment">//不可枚举不可配置</span>

});
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>2.代码</p>
</li>
</ul>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">product</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">var</span> name=<span class="hljs-string">'xujiahui'</span>;
    <span class="hljs-keyword">this</span>.getName=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-keyword">return</span> name;
    }
  }
  <span class="hljs-keyword">var</span> obj=<span class="hljs-keyword">new</span> product();
<span class="copy-code-btn">复制代码</span></code></pre><h3 class="heading" data-id="heading-60">13.操作符</h3>
<h4 class="heading" data-id="heading-61">(1).<code>==</code>和<code>===</code>、以及<code>Object.is</code>的区别</h4>
<ul>
<li>
<p>1.<code>==</code></p>
<ul>
<li>
<p>1.会进行强制类型转换（!=也是）</p>
</li>
<li>
<p>2.在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则:</p>
<ul>
<li>
<p>3.如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为 0，而true 转换为 1</p>
</li>
<li>
<p>4.如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值;</p>
</li>
<li>
<p>5.如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法，用得到的基本类型值按照前面的规则进行比较; 这两个操作符在进行比较时则要遵循下列规则。</p>
</li>
<li>
<p>6.null 和 undefined 是相等的。</p>
</li>
<li>
<p>7.要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。</p>
</li>
<li>
<p>8.如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true。重要提示⚠️：即使两个操作数都是 NaN，相等操作符也返回 false;因为按照规则，NaN 不等于 NaN。</p>
</li>
<li>
<p>9.如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true;否则，返回 false。</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>2.<code>===</code>：全等于，不转换</p>
</li>
<li>
<p>3.<code>Object.is</code></p>
<ul>
<li>1.也不会进行强制类型转换。</li>
<li>2.与<code>===</code>有以下几点不同：
<ul>
<li>1.<code>+0===-0</code>，<code>Object.is(+0, -0)</code>为 false</li>
<li>2.<code>NaN !== NaN</code>，<code>Object.is(NaN, NaN)</code>为 true</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-62">(2).new 操作符做了哪些事情</h4>
<p>用 new 操作符调用构造函数实际上会经历以下 4 个步骤:</p>
<ul>
<li>1.创建一个新对象;</li>
<li>2.将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象);</li>
<li>3.执行构造函数中的代码(为这个新对象添加属性);</li>
<li>4.返回新对象。</li>
<li>5.将构造函数的prototype关联到实例的__proto__</li>
</ul>
<h3 class="heading" data-id="heading-63">14.数组</h3>
<h4 class="heading" data-id="heading-64">(1).数组常用方法</h4>
<p>push()，pop()，shift()，unshift()，splice()，sort()，reverse()，map()等</p>
<h4 class="heading" data-id="heading-65">(2).数组去重</h4>
<p>要注意的是对象咋去重</p>
<ul>
<li>
<p>1.双重循环</p>
<p>每次插入一个元素的时候都和前面的每个元素比较一下</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'1'</span>];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-comment">// res用来存储结果</span>
    <span class="hljs-keyword">var</span> res = [];
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, arrayLen = array.length; i &lt; arrayLen; i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>, resLen = res.length; j &lt; resLen; j++ ) {
            <span class="hljs-keyword">if</span> (array[i] === res[j]) {
                <span class="hljs-keyword">break</span>;
            }
        }
        <span class="hljs-comment">// 如果array[i]是唯一的，那么执行完循环，j等于resLen</span>
        <span class="hljs-keyword">if</span> (j === resLen) {
            res.push(array[i])
        }
    }
    <span class="hljs-keyword">return</span> res;
}

<span class="hljs-built_in">console</span>.log(unique(array)); <span class="hljs-comment">// [1, "1"]</span>
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>2.<code>indexOf</code></p>
<p>原理和双重循环是一样的</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1'</span>];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-keyword">var</span> res = [];
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = array.length; i &lt; len; i++) {
        <span class="hljs-keyword">var</span> current = array[i];
        <span class="hljs-keyword">if</span> (res.indexOf(current) === <span class="hljs-number">-1</span>) {
            res.push(current)
        }
    }
    <span class="hljs-keyword">return</span> res;
}

<span class="hljs-built_in">console</span>.log(unique(array));
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>3.排序后去重</p>
<p>对于排好序的数组，可以将每个元素与前一个比较</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1'</span>];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-keyword">var</span> res = [];
    <span class="hljs-keyword">var</span> sortedArray = array.concat().sort();
    <span class="hljs-keyword">var</span> seen;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = sortedArray.length; i &lt; len; i++) {
        <span class="hljs-comment">// 如果是第一个元素或者相邻的元素不相同</span>
        <span class="hljs-keyword">if</span> (!i || seen !== sortedArray[i]) {
            res.push(sortedArray[i])
        }
        seen = sortedArray[i];
    }
    <span class="hljs-keyword">return</span> res;
}

<span class="hljs-built_in">console</span>.log(unique(array));
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>4.Object 键值对</p>
<p>把每一个元素存成 object 的 key。例如 <code>['a']</code>，存成<code>{'a': true}</code></p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1'</span>];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-keyword">var</span> obj = {};
    <span class="hljs-keyword">return</span> array.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)</span>{
        <span class="hljs-keyword">return</span> obj.hasOwnProperty(item) ? <span class="hljs-literal">false</span> : (obj[item] = <span class="hljs-literal">true</span>)
    })
}

<span class="hljs-built_in">console</span>.log(unique(array)); <span class="hljs-comment">// [1, 2]</span>
<span class="copy-code-btn">复制代码</span></code></pre><p>我们可以发现，是有问题的，因为 1 和 '1' 是不同的，但是这种方法会判断为同一个值，这是因为对象的键值只能是字符串，所以我们可以使用 <code>typeof item + item</code> 拼成字符串作为 key 值来避免这个问题：</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'1'</span>];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-keyword">var</span> obj = {};
    <span class="hljs-keyword">return</span> array.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)</span>{
        <span class="hljs-keyword">return</span> obj.hasOwnProperty(<span class="hljs-keyword">typeof</span> item + item) ? <span class="hljs-literal">false</span> : (obj[<span class="hljs-keyword">typeof</span> item + item] = <span class="hljs-literal">true</span>)
    })
}

<span class="hljs-built_in">console</span>.log(unique(array)); <span class="hljs-comment">// [1, 2, "1"]</span>
<span class="copy-code-btn">复制代码</span></code></pre><p>然而，即便如此，我们依然无法正确区分出两个对象，比如 {value: 1} 和 {value: 2}，因为 <code>typeof item + item</code> 的结果都会是 <code>object[object Object]</code>，不过我们可以使用 JSON.stringify 将对象序列化：</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> array = [{<span class="hljs-attr">value</span>: <span class="hljs-number">1</span>}, {<span class="hljs-attr">value</span>: <span class="hljs-number">1</span>}, {<span class="hljs-attr">value</span>: <span class="hljs-number">2</span>}];

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-keyword">var</span> obj = {};
    <span class="hljs-keyword">return</span> array.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)</span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> item + <span class="hljs-built_in">JSON</span>.stringify(item))
        <span class="hljs-keyword">return</span> obj.hasOwnProperty(<span class="hljs-keyword">typeof</span> item + <span class="hljs-built_in">JSON</span>.stringify(item)) ? <span class="hljs-literal">false</span> : (obj[<span class="hljs-keyword">typeof</span> item + <span class="hljs-built_in">JSON</span>.stringify(item)] = <span class="hljs-literal">true</span>)
    })
}

<span class="hljs-built_in">console</span>.log(unique(array)); <span class="hljs-comment">// [{value: 1}, {value: 2}]</span>
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>5.ES6 Set去重</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
   <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.from(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(array));
}
<span class="copy-code-btn">复制代码</span></code></pre><pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span>(<span class="hljs-params">array</span>) </span>{
    <span class="hljs-keyword">return</span> [...new <span class="hljs-built_in">Set</span>(array)];
}
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>6.ES6 Map</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unique</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">const</span> seen = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()
    <span class="hljs-keyword">return</span> arr.filter(<span class="hljs-function">(<span class="hljs-params">a</span>) =&gt;</span> !seen.has(a) &amp;&amp; seen.set(a, <span class="hljs-number">1</span>))
}
<span class="copy-code-btn">复制代码</span></code></pre></li>
</ul>
<h2 class="heading" data-id="heading-66">三、高级技巧</h2>
<h3 class="heading" data-id="heading-67">1.防抖节流</h3>
<h4 class="heading" data-id="heading-68">(1).节流</h4>
<p>在 n 秒内只会执行一次，所以节流会稀释函数的执行频率</p>
<h4 class="heading" data-id="heading-69">(2). 防抖</h4>
<p>按最后一次算。比如说“停止输入5s后才发送请求”</p>
<h3 class="heading" data-id="heading-70">3.数组展开</h3>
<ul>
<li>1.递归</li>
</ul>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat1</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">let</span> result = []
    arr.forEach(<span class="hljs-function"><span class="hljs-params">element</span> =&gt;</span> {
        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(element)) {
            result = result.concat(flat1(element))
        } <span class="hljs-keyword">else</span> {
            result.push(element)
        }
    });
    <span class="hljs-keyword">return</span> result
}
<span class="copy-code-btn">复制代码</span></code></pre><ul>
<li>2.toString</li>
</ul>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat2</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-comment">// 有缺陷，toString 后无法保持之前的类型</span>
    <span class="hljs-keyword">return</span> arr.toString().split(<span class="hljs-string">','</span>)
}
<span class="copy-code-btn">复制代码</span></code></pre><ul>
<li>3.reduce</li>
</ul>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat3</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-comment">// 本质和 flat1 一样的，都是递归</span>
    <span class="hljs-keyword">return</span> arr.reduce(<span class="hljs-function">(<span class="hljs-params">pre, next</span>) =&gt;</span> {
        <span class="hljs-keyword">return</span> pre.concat(<span class="hljs-built_in">Array</span>.isArray(next) ? flat3(next) : next)
    }, [])
}
<span class="copy-code-btn">复制代码</span></code></pre><ul>
<li>4.rest运算符</li>
</ul>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat4</span> (<span class="hljs-params">arr</span>) </span>{
    <span class="hljs-keyword">while</span> (arr.some(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">Array</span>.isArray(item))) {
        <span class="hljs-comment">// 相当于 [].concat('1', 2, [3, 4])</span>
        <span class="hljs-comment">// concat 方法本身就会把参数中的数组展开</span>
        arr = [].concat(...arr);
    }
    <span class="hljs-keyword">return</span> arr;
}
<span class="copy-code-btn">复制代码</span></code></pre><ul>
<li>5.ES6 flat</li>
</ul>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">flat5</span> (<span class="hljs-params">arr: any[]</span>) </span>{
    <span class="hljs-comment">// flat() 方法会移除数组中的空项</span>
    <span class="hljs-keyword">return</span> arr.flat(<span class="hljs-literal">Infinity</span>)
}
<span class="copy-code-btn">复制代码</span></code></pre><h3 class="heading" data-id="heading-71">4.拖放</h3>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-keyword">var</span> DragDrop = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> dragging = <span class="hljs-literal">null</span>; 
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>)</span>{
    
    <span class="hljs-comment">//获取事件和目标</span>
    event = EventUtil.getEvent(event);
    <span class="hljs-keyword">var</span> target = EventUtil.getTarget(event);
    
    <span class="hljs-comment">//确定事件类型 </span>
    <span class="hljs-keyword">switch</span>(event.type){
      <span class="hljs-keyword">case</span> <span class="hljs-string">"mousedown"</span>:
        <span class="hljs-keyword">if</span> (target.className.indexOf(<span class="hljs-string">"draggable"</span>) &gt; <span class="hljs-number">-1</span>){
          dragging = target; 
        }
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-string">"mousemove"</span>:
        <span class="hljs-keyword">if</span> (dragging !== <span class="hljs-literal">null</span>){ 
          <span class="hljs-comment">//指定位置</span>
          dragging.style.left = event.clientX + <span class="hljs-string">"px"</span>;
          dragging.style.top = event.clientY + <span class="hljs-string">"px"</span>;
        }
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-string">"mouseup"</span>: 
        dragging = <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">break</span>; 
    }
  };
  <span class="hljs-comment">//公共接口 </span>
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">enable</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
      EventUtil.addHandler(<span class="hljs-built_in">document</span>, <span class="hljs-string">"mousedown"</span>, handleEvent);
      EventUtil.addHandler(<span class="hljs-built_in">document</span>, <span class="hljs-string">"mousemove"</span>, handleEvent);
      EventUtil.addHandler(<span class="hljs-built_in">document</span>, <span class="hljs-string">"mouseup"</span>, handleEvent);
    },
    <span class="hljs-attr">disable</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
      EventUtil.removeHandler(<span class="hljs-built_in">document</span>, <span class="hljs-string">"mousedown"</span>, handleEvent);
      EventUtil.removeHandler(<span class="hljs-built_in">document</span>, <span class="hljs-string">"mousemove"</span>, handleEvent);
      EventUtil.removeHandler(<span class="hljs-built_in">document</span>, <span class="hljs-string">"mouseup"</span>, handleEvent);
    }
  }
}();
<span class="copy-code-btn">复制代码</span></code></pre><ul>
<li>
<p>1.DragDrop 对象封装了拖放的所有基本功能。这是一个单例对象，并使用了模块模式来隐藏某些实 现细节。dragging 变量起初是 null，将会存放被拖动的元素，所以当该变量不为 null 时，就知道正 在拖动某个东西。handleEvent()函数处理拖放功能中的所有的三个鼠标事件。它首先获取 event 对 象和事件目标的引用。之后，用一个 switch 语句确定要触发哪个事件样式。当 mousedown 事件发生 时，会检查 target 的 class 是否包含"draggable"类，如果是，那么将 target 存放到 dragging 中。这个技巧可以很方便地通过标记语言而非 JavaScript 脚本来确定可拖动的元素。</p>
</li>
<li>
<p>2.handleEvent()的 mousemove 情况和前面的代码一样，不过要检查 dragging 是否为 null。当 它不是 null，就知道 dragging 就是要拖动的元素，这样就会把它放到恰当的位置上。mouseup 情况 就仅仅是将 dragging 重置为 null，让 mousemove 事件中的判断失效。</p>
</li>
<li>
<p>3.DragDrop 还有两个公共方法:enable()和 disable()，它们只是相应添加和删除所有的事件处 理程序。这两个函数提供了额外的对拖放功能的控制手段。</p>
</li>
<li>
<p>4.要使用 DragDrop 对象，只要在页面上包含这些代码并调用 enable()。拖放会自动针对所有包含 "draggable"类的元素启用，如下例所示:</p>
<pre><code class="hljs html copyable" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"draggable"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position:absolute; background:red"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="copy-code-btn">复制代码</span></code></pre><p>注意为了元素能被拖放，它必须是绝对定位的。</p>
</li>
</ul>
<h3 class="heading" data-id="heading-72">5.once</h3>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">once</span> (<span class="hljs-params">func</span>) </span>{
  <span class="hljs-keyword">var</span> done;
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (!done) {
      func.apply(<span class="hljs-literal">null</span>, <span class="hljs-built_in">arguments</span>)
      done = <span class="hljs-literal">true</span>
    }
  }
}
<span class="copy-code-btn">复制代码</span></code></pre><pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onlyDoOne</span> = <span class="hljs-title">once</span>(<span class="hljs-params">function(</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'1'</span>)
})
<span class="copy-code-btn">复制代码</span></code></pre><h3 class="heading" data-id="heading-73">6.promise</h3>
<p><code>Promise</code> 是一个对象，保存着未来将要结束的事件，她有两个特征:</p>
<ul>
<li>
<p>1.对象的状态不受外部影响，<code>Promise</code> 对象代表一个异步操作，有三种状态，pending进行中，fulfilled已成功，rejected已失败，只有异步操作的结果，才可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也就是promise名字的由来</p>
</li>
<li>
<p>2.一旦状态改变，就不会再变，<code>Promise</code>对象状态改变只有两种可能，从pending改到fulfilled或者从pending改到rejected，只要这两种情况发生，状态就凝固了，不会再改变，这个时候就称为定型resolved</p>
</li>
</ul>
<h3 class="heading" data-id="heading-74">7.sleep</h3>
<p>用 <code>Promise</code></p>
<ol>
<li>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span> (<span class="hljs-params">ms</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
    <span class="hljs-built_in">window</span>.setTimeout(resolve, ms)
  })
}

sleep(<span class="hljs-number">1000</span>).then(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'已经 sleep 1000ms'</span>)
})
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sleep</span> (<span class="hljs-params">ms</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
    <span class="hljs-built_in">window</span>.setTimeout(resolve, ms)
  })
}

<span class="hljs-comment">// 使用async/await调用</span>
<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> example = <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">1000</span>)
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'已经 sleep 1000ms'</span>)
}
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-comment">// 使用 generator 定义 sleep 函数</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> *<span class="hljs-title">sleep</span> (<span class="hljs-params">ms</span>) </span>{
  <span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {
    <span class="hljs-built_in">window</span>.setTimeout(resolve, ms)
  })
}
sleep(<span class="hljs-number">1000</span>).next().value.then(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'已经 sleep 1000ms'</span>)
})
<span class="copy-code-btn">复制代码</span></code></pre></li>
</ol>
<h2 class="heading" data-id="heading-75">四、浏览器</h2>
<h3 class="heading" data-id="heading-76">1.缓存</h3>
<p></p><figure><img alt="cache.png" class="lazyload inited" data-src="https://user-gold-cdn.xitu.io/2020/4/11/17168fa9fe83e22b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" data-width="1240" data-height="1006" src="data:image/svg+xml;utf8,&lt;?xml version=&quot;1.0&quot;?&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; width=&quot;1240&quot; height=&quot;1006&quot;&gt;&lt;/svg&gt;"><figcaption></figcaption></figure><p></p>
<h4 class="heading" data-id="heading-77">(1).按缓存位置分</h4>
<ul>
<li>1.Service Worker
<ul>
<li>1.有两种情况会导致这个缓存中的资源被清除：手动调用 API <code>cache.delete(resource)</code> 或者容量超过限制，被浏览器全部清空。</li>
<li>2.如果 Service Worker 没能命中缓存，一般情况会使用 <code>fetch()</code> 方法继续获取资源。这时候，浏览器就去 memory cache 或者 disk cache 进行下一次找缓存的工作了。注意：经过 Service Worker 的 <code>fetch()</code> 方法获取的资源，即便它并没有命中 Service Worker 缓存，甚至实际走了网络请求，也会标注为 <code>from ServiceWorker</code>。</li>
</ul>
</li>
<li>2.Memory Cache：tab关闭则失效
<ul>
<li>1.memory cache 机制保证了一个页面中如果有两个相同的请求 (例如两个 <code>src</code> 相同的 <code>image</code>，两个 <code>href</code> 相同的 <code>link</code>)都实际只会被请求最多一次，避免浪费。</li>
<li>2.在从 memory cache 获取缓存内容时，浏览器会忽视例如 <code>max-age=0</code>, <code>no-cache</code> 等头部配置。例如页面上存在几个相同 <code>src</code> 的图片，即便它们可能被设置为不缓存，但依然会从 memory cache 中读取。这是因为 memory cache 只是短期使用，大部分情况生命周期只有一次浏览而已。而 <code>max-age=0</code> 在语义上普遍被解读为“不要在下次浏览时使用”，所以和 memory cache 并不冲突。</li>
<li>3.但如果站长是真心不想让一个资源进入缓存，就连短期也不行，那就需要使用 <code>no-store</code>。存在这个头部配置的话，即便是 memory cache 也不会存储，自然也不会从中读取了。</li>
</ul>
</li>
<li>3.Disk Cache：disk cache 会严格根据 HTTP 头信息中的各类字段来判定哪些资源可以缓存，哪些资源不可以缓存；哪些资源是仍然可用的，哪些资源是过时需要重新请求的。当命中缓存之后，浏览器会从硬盘中读取资源，虽然比起从内存中读取慢了一些，但比起网络请求还是快了不少的。<strong>绝大部分的缓存都来自 disk cache</strong>。</li>
<li>4.网络请求：如果一个请求在上述 3 个位置都没有找到缓存，那么浏览器会正式发送网络请求去获取内容。之后容易想到，为了提升之后请求的缓存命中率，自然要把这个资源添加到缓存中去。具体来说：
<ul>
<li>1.根据 Service Worker 中的 handler 决定是否存入 Cache Storage (额外的缓存位置)。</li>
<li>2.根据 HTTP 头部的相关字段(<code>Cache-control</code>, <code>Pragma</code> 等)决定是否存入 disk cache</li>
<li>3.memory cache 保存一份资源 <strong>的引用</strong>，以备下次使用。</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-78">(2).按失效策略分</h4>
<blockquote>
<p>memory cache 是浏览器为了加快读取缓存速度而进行的自身的优化行为，不受开发者控制，也不受 HTTP 协议头的约束，算是一个黑盒。Service Worker 是由开发者编写的额外的脚本，且缓存位置独立，出现也较晚，使用还不算太广泛。所以我们平时最为熟悉的其实是 <strong>disk cache</strong>，也叫 <strong>HTTP cache</strong> (因为不像 memory cache，它遵守 HTTP 协议头中的字段)。平时所说的<strong>强制缓存（强缓存），对比缓存（协商缓存）</strong>，以及 <code>Cache-Control</code> 等，也都归于此类。</p>
</blockquote>
<h3 class="heading" data-id="heading-79">强制缓存 (也叫强缓存)</h3>
<p><strong>强制缓存直接减少请求数，是提升最大的缓存策略。</strong> 它的优化覆盖了请求、处理、响应三个阶段</p>
<p>可以造成强制缓存的字段是 <code>Cache-control</code> 和 <code>Expires</code>。</p>
<ul>
<li>
<p>Expires：</p>
<ul>
<li>HTTP1.0</li>
<li>由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑自信修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。</li>
<li>写法太复杂了。表示时间的字符串多个空格，少个字母，都会导致非法属性从而设置失效</li>
</ul>
</li>
<li>
<p>Cache-control</p>
<ul>
<li>
<p>HTTP1.1</p>
</li>
<li>
<p>优先级高</p>
</li>
<li>
<p><code>max-age</code>：即最大有效时间</p>
<p><code>must-revalidate</code>：如果超过了 <code>max-age</code> 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。</p>
<p><code>no-cache</code>：虽然字面意思是“不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。</p>
<p><code>no-store</code>: 真正意义上的“不要缓存”。所有内容都不走缓存，包括强制和对比。</p>
<p><code>public</code>：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)</p>
<p><code>private</code>：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。</p>
</li>
</ul>
</li>
</ul>
<h3 class="heading" data-id="heading-80">对比缓存 (协商缓存)</h3>
<p><strong>对比缓存在请求数上和没有缓存是一致的</strong>，但如果是 304 的话，返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 <strong>在响应体体积上的节省是它的优化点</strong>。</p>
<ul>
<li>Last-Modified &amp; If-Modified-Since
<ul>
<li>服务器通过 <code>Last-Modified</code> 字段告知客户端，资源最后一次被修改的时间</li>
<li>浏览器将这个值和内容一起记录在缓存数据库中。</li>
<li>下一次请求相同资源时时，浏览器从自己的缓存中找出“不确定是否过期的”缓存。因此在请求头中将上次的 <code>Last-Modified</code> 的值写入到请求头的 <code>If-Modified-Since</code> 字段</li>
<li>服务器会将 <code>If-Modified-Since</code> 的值与 <code>Last-Modified</code> 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。</li>
<li>如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。</li>
<li>如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。</li>
</ul>
</li>
<li>Etag &amp; If-None-Match
<ul>
<li><strong>Etag 的优先级高于 Last-Modified</strong></li>
<li><code>Etag</code> 存储的是文件的特殊标识(一般都是 hash 生成的)，服务器存储着文件的 <code>Etag</code> 字段。</li>
<li>之后的流程和 <code>Last-Modified</code> 一致，只是 <code>Last-Modified</code> 字段和它所表示的更新时间改变成了 <code>Etag</code> 字段和它所表示的文件 hash，把 <code>If-Modified-Since</code> 变成了 <code>If-None-Match</code>。</li>
<li>服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-81">(3).Ajax 解决浏览器缓存问题</h4>
<ul>
<li>
<p>1.在ajax发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。</p>
</li>
<li>
<p>2.在ajax发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。</p>
</li>
<li>
<p>3.在URL后面加上一个随机数： "fresh=" + Math.random()。</p>
</li>
<li>
<p>4.在URL后面加上时间搓："nowtime=" + new Date().getTime()。</p>
</li>
<li>
<p>5.如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。</p>
</li>
</ul>
<h3 class="heading" data-id="heading-82">2.浏览器渲染原理</h3>
<h4 class="heading" data-id="heading-83">(1).Render Tree</h4>
<ul>
<li>不显示（<code>display: none</code>）的元素不会被生成</li>
<li>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置（布局），最后把节点绘制到页面上（绘制）。</li>
<li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，<strong>但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用<code>table</code>布局的原因之一</strong>。</li>
</ul>
<h4 class="heading" data-id="heading-84">(2).重绘</h4>
<p>由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如<code>outline</code>, <code>visibility</code>, <code>color</code>、<code>background-color</code>等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。</p>
<h4 class="heading" data-id="heading-85">(3)回流</h4>
<p>回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。</p>
<h4 class="heading" data-id="heading-86">(4).浏览器优化</h4>
<p>现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你<strong>获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值</strong>。</p>
<p>主要包括以下属性或方法：</p>
<ul>
<li><code>offsetTop</code>、<code>offsetLeft</code>、<code>offsetWidth</code>、<code>offsetHeight</code></li>
<li><code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code></li>
<li><code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></li>
<li><code>width</code>、<code>height</code></li>
<li><code>getComputedStyle()</code></li>
<li><code>getBoundingClientRect()</code></li>
</ul>
<p>所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列。</p>
<h4 class="heading" data-id="heading-87">(5).减少重绘与回流</h4>
<ul>
<li>
<p>1.CSS</p>
<ul>
<li>
<p>2.<strong>使用 <code>transform</code> 替代 <code>top</code></strong></p>
</li>
<li>
<p>3.<strong>使用 <code>visibility</code> 替换 <code>display: none</code></strong> ，因为前者只会引起重绘，后者会引发回流（改变了布局</p>
</li>
<li>
<p>4.<strong>避免使用<code>table</code>布局</strong>，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局。</p>
</li>
<li>
<p>5.<strong>尽可能在<code>DOM</code>树的最末端改变<code>class</code></strong>，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。</p>
</li>
<li>
<p>6.<strong>避免设置多层内联样式</strong>，CSS 选择符<strong>从右往左</strong>匹配查找，避免节点层级过多。</p>
<pre><code class="hljs html copyable" lang="html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css">
  <span class="hljs-selector-tag">span</span> {
    <span class="hljs-attribute">color</span>: red;
  }
  <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">span</span> {
    <span class="hljs-attribute">color</span>: red;
  }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="copy-code-btn">复制代码</span></code></pre><p>对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 <code>span</code> 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 <code>span</code> 标签，然后找到 <code>span</code> 标签上的 <code>a</code> 标签，最后再去找到 <code>div</code> 标签，然后给符合这种条件的 <code>span</code> 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写<strong>过于具体</strong>的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证<strong>层级扁平</strong>。</p>
</li>
<li>
<p>7.<strong>将动画效果应用到<code>position</code>属性为<code>absolute</code>或<code>fixed</code>的元素上</strong>，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 <code>requestAnimationFrame</code>，详见<a target="_blank" href="https://github.com/LuNaHaiJiao/blog/issues/30" rel="nofollow noopener noreferrer">探讨 requestAnimationFrame</a>。</p>
</li>
<li>
<p>8.<strong>避免使用<code>CSS</code>表达式</strong>，可能会引发回流。</p>
</li>
<li>
<p>9.<strong>将频繁重绘或者回流的节点设置为图层</strong>，图层能够阻止该节点的渲染行为影响别的节点，例如<code>will-change</code>、<code>video</code>、<code>iframe</code>等标签，浏览器会自动将该节点变为图层。</p>
</li>
<li>
<p>10.<strong>CSS3 硬件加速（GPU加速）</strong>，使用css3硬件加速，可以让<code>transform</code>、<code>opacity</code>、<code>filters</code>这些动画不会引起回流重绘 。但是对于动画的其它属性，比如<code>background-color</code>这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</p>
</li>
</ul>
</li>
<li>
<p>2.JavaScript</p>
<ul>
<li>1.<strong>避免频繁操作样式</strong>，最好一次性重写<code>style</code>属性，或者将样式列表定义为<code>class</code>并一次性更改<code>class</code>属性。</li>
<li>2.<strong>避免频繁操作<code>DOM</code></strong>，创建一个<code>documentFragment</code>，在它上面应用所有<code>DOM操作</code>，最后再把它添加到文档中。</li>
<li>3.<strong>避免频繁读取会引发回流/重绘的属性</strong>，如果确实需要多次使用，就用一个变量缓存起来。</li>
<li>4.<strong>对具有复杂动画的元素使用绝对定位</strong>，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-88">(6).JS 什么时候解析？</h4>
<ol>
<li>
<p><code>&lt;script&gt;</code></p>
<ul>
<li>
<p>渲染过程中，如果遇到 JS 就停止渲染，执行 JS 代码。</p>
</li>
<li>
<p>如果 JS 需要操作CSSOM，则会先让CSSOM构建完，再执行JS，最后构建DOM</p>
</li>
</ul>
</li>
<li>
<p><code>&lt;script async&gt;</code></p>
<ul>
<li>异步执行引入的 JavaScript，加载完成后就执行 JS，阻塞DOM</li>
</ul>
</li>
<li>
<p><code>&lt;script defer&gt;</code></p>
<ul>
<li>延迟执行。<strong>载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。</strong></li>
</ul>
</li>
</ol>
<h2 class="heading" data-id="heading-89">五、计算机基础</h2>
<h3 class="heading" data-id="heading-90">1.计算机网络</h3>
<h4 class="heading" data-id="heading-91">(1).TCP 三次握手</h4>
<ul>
<li>
<p>1.第一次握手：起初两端都处于CLOSED关闭状态，Client将标志位SYN置为1，随机产生一个值seq=x，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认；</p>
</li>
<li>
<p>2.第二次握手：Server收到数据包后由标志位SYN=1得知Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=x+1，随机产生一个值seq=y，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态，此时操作系统为该TCP连接分配TCP缓存和变量；</p>
</li>
<li>
<p>3.第三次握手：Client收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=y+1，并且此时操作系统为该TCP连接分配TCP缓存和变量，并将该数据包发送给Server，Server检查ack是否为y+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。</p>
</li>
</ul>
<h4 class="heading" data-id="heading-92">(2).CDN 原理</h4>
<p>CDN的全称是Content Delivery Network，即内容分发网络。CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应</p>
<h4 class="heading" data-id="heading-93">(4).DNS 解析</h4>
<ul>
<li>浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。</li>
<li>操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。</li>
<li>路由缓存：路由器也有 DNS 缓存。</li>
<li>ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。</li>
<li>根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器.com 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）</li>
</ul>
<h4 class="heading" data-id="heading-94">(5).HTTP 常用请求头</h4>
<p>可以将http首部分为通用首部，请求首部，响应首部，实体首部</p>
<table>
<thead>
<tr>
<th>协议头</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept</td>
<td>可接受的响应内容类型（Content-Types）。</td>
</tr>
<tr>
<td>Accept-Charset</td>
<td>可接受的字符集</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>可接受的响应内容的编码方式。</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>可接受的响应内容语言列表。</td>
</tr>
<tr>
<td>Accept-Datetime</td>
<td>可接受的按照时间来表示的响应内容版本</td>
</tr>
<tr>
<td>Authorization</td>
<td>用于表示HTTP协议中需要认证资源的认证信息</td>
</tr>
<tr>
<td>Cache-Control</td>
<td>用来指定当前的请求/回复中的，是否使用缓存机制。</td>
</tr>
<tr>
<td>Connection</td>
<td>客户端（浏览器）想要优先使用的连接类型</td>
</tr>
<tr>
<td>Cookie</td>
<td>由之前服务器通过Set-Cookie（见下文）设置的一个HTTP协议Cookie</td>
</tr>
<tr>
<td>Content-Length</td>
<td>以8进制表示的请求体的长度</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>请求体的内容的二进制 MD5 散列值（数字签名），以 Base64 编码的结果</td>
</tr>
<tr>
<td>Content-Type</td>
<td>请求体的MIME类型 （用于POST和PUT请求中）</td>
</tr>
<tr>
<td>Date</td>
<td>发送该消息的日期和时间（以<a target="_blank" href="https://www.nowcoder.com/tutorial/96/24304825a0c04ea9a53cdb09cb664834#section-7.1.1.1" rel="nofollow noopener noreferrer">RFC 7231</a>中定义的"HTTP日期"格式来发送）</td>
</tr>
<tr>
<td>Expect</td>
<td>表示客户端要求服务器做出特定的行为</td>
</tr>
<tr>
<td>From</td>
<td>发起此请求的用户的邮件地址</td>
</tr>
<tr>
<td>Host</td>
<td>表示服务器的域名以及服务器所监听的端口号。如果所请求的端口是对应的服务的标准端口（80），则端口号可以省略。</td>
</tr>
<tr>
<td>If-Match</td>
<td>仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要用于像 PUT 这样的方法中，仅当从用户上次更新某个资源后，该资源未被修改的情况下，才更新该资源。</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>允许在对应的资源未被修改的情况下返回304未修改</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>允许在对应的内容未被修改的情况下返回304未修改（ 304 Not Modified ），参考 超文本传输协议 的实体标记</td>
</tr>
<tr>
<td>If-Range</td>
<td>如果该实体未被修改过，则向返回所缺少的那一个或多个部分。否则，返回整个新的实体</td>
</tr>
<tr>
<td>If-Unmodified-Since</td>
<td>仅当该实体自某个特定时间以来未被修改的情况下，才发送回应。</td>
</tr>
<tr>
<td>Max-Forwards</td>
<td>限制该消息可被代理及网关转发的次数。</td>
</tr>
<tr>
<td>Origin</td>
<td>发起一个针对<a target="_blank" href="http://itbilu.com/javascript/js/VkiXuUcC.html" rel="nofollow noopener noreferrer">跨域资源共享</a>的请求（该请求要求服务器在响应中加入一个Access-Control-Allow-Origin的消息头，表示访问控制所允许的来源）。</td>
</tr>
<tr>
<td>Pragma</td>
<td>与具体的实现相关，这些字段可能在请求/回应链中的任何时候产生。</td>
</tr>
<tr>
<td>Proxy-Authorization</td>
<td>用于向代理进行认证的认证信息。</td>
</tr>
<tr>
<td>Range</td>
<td>表示请求某个实体的一部分，字节偏移以0开始。</td>
</tr>
<tr>
<td>Referer</td>
<td>表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏览器带到了当前页面。Referer其实是Referrer这个单词，但RFC制作标准时给拼错了，后来也就将错就错使用Referer了。</td>
</tr>
<tr>
<td>TE</td>
<td>浏览器预期接受的传输时的编码方式：可使用回应协议头Transfer-Encoding中的值（还可以使用"trailers"表示数据传输时的分块方式）用来表示浏览器希望在最后一个大小为0的块之后还接收到一些额外的字段。</td>
</tr>
<tr>
<td>User-Agent</td>
<td>浏览器的身份标识字符串</td>
</tr>
<tr>
<td>Upgrade</td>
<td>要求服务器升级到一个高版本协议。</td>
</tr>
<tr>
<td>Via</td>
<td>告诉服务器，这个请求是由哪些代理发出的。</td>
</tr>
<tr>
<td>Warning</td>
<td>一个一般性的警告，表示在实体内容体中可能存在错误。</td>
</tr>
</tbody>
</table>
<h4 class="heading" data-id="heading-95">(5).OSI 七层模型</h4>
<p>应用层：文件传输，常用协议HTTP，snmp,FTP ,</p>
<p>表示层：数据格式化，代码转换，数据加密，</p>
<p>会话层：建立，解除会话</p>
<p>传输层：提供端对端的接口，tcp,udp</p>
<p>网络层：为数据包选择路由，IP，icmp</p>
<p>数据链路层：传输有地址的帧</p>
<p>物理层：二进制的数据形式在物理媒体上传输数据</p>
<h4 class="heading" data-id="heading-96">(5).TCP和UDP的区别</h4>
<ul>
<li>1.UDP
<ul>
<li>1.无连接</li>
<li>2.面向报文，只是报文的搬运工</li>
<li>3.不可靠，没有拥塞控制</li>
<li>4.高效，头部开销只有8字节</li>
<li>5.支持一对一、一对多、多对多、多对一</li>
<li>6.适合直播、视频、语音、会议等实时性要求高的</li>
</ul>
</li>
<li>2.TCP
<ul>
<li>1.面向连接：传输前需要先连接</li>
<li>2.可靠的传输</li>
<li>3.流量控制：发送方不会发送速度过快，超过接收方的处理能力</li>
<li>4.拥塞控制：当网络负载过多时能限制发送方的发送速率</li>
<li>5.不提供时延保障</li>
<li>6.不提供最小带宽保障</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-97">(6).为什么三次握手四次挥手</h4>
<ul>
<li>1.四次挥手
<ul>
<li>1.因为是双方彼此都建立了连接，因此双方都要释放自己的连接，A向B发出一个释放连接请求，他要释放链接表明不再向B发送数据了，此时B收到了A发送的释放链接请求之后，给A发送一个确认，A不能再向B发送数据了，它处于FIN-WAIT-2的状态，但是此时B还可以向A进行数据的传送。此时B向A 发送一个断开连接的请求，A收到之后给B发送一个确认。此时B关闭连接。A也关闭连接。</li>
<li>2.为什么要有TIME-WAIT这个状态呢，这是因为有可能最后一次确认丢失，如果B此时继续向A发送一个我要断开连接的请求等待A发送确认，但此时A已经关闭连接了，那么B永远也关不掉了，所以我们要有TIME-WAIT这个状态。</li>
<li>当然TCP也并不是100%可靠的。</li>
</ul>
</li>
<li>1.三次握手：<strong>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误</strong></li>
</ul>
<h4 class="heading" data-id="heading-98">(7).websocket和ajax的区别是什么，websocket的应用场景有哪些</h4>
<p>WebSocket的诞生本质上就是为了解决HTTP协议本身的单向性问题：请求必须由客户端向服务端发起，然后服务端进行响应。这个Request-Response的关系是无法改变的。对于一般的网页浏览和访问当然没问题，一旦我们需要服务端主动向客户端发送消息时就麻烦了，因为此前的TCP连接已经释放，根本找不到客户端在哪。
为了能及时从服务器获取数据，程序员们煞费苦心研究出来的各种解决方案其实都是在HTTP框架下做的妥协，没法子，浏览器这东西只支持HTTP，我们有什么办法。所以大家要么定时去轮询，要么就靠长连接——客户端发起请求，服务端把这个连接攥在手里不回复，等有消息了再回，如果超时了客户端就再请求一次——其实大家也懂，这只是个减少了请求次数、实时性更好的轮询，本质没变。</p>
<p>WebSocket就是从技术根本上解决这个问题的：看名字就知道，它借用了Web的端口和消息头来创建连接，后续的数据传输又和基于TCP的Socket几乎完全一样，但封装了好多原本在Socket开发时需要我们手动去做的功能。比如原生支持wss安全访问（跟https共用端口和证书）、创建连接时的校验、从数据帧中自动拆分消息包等等。</p>
<p>换句话说，原本我们在浏览器里只能使用HTTP协议，现在有了Socket，还是个更好用的Socket。</p>
<p>了解了WebSocket的背景和特性之后，就可以回答它能不能取代AJAX这个问题了：</p>
<p>对于服务器与客户端的双向通信，WebSocket简直是不二之选。如果不是还有少数旧版浏览器尚在服役的话，所有的轮询、长连接等方式早就该废弃掉。那些整合多种双向推送消息方式的库（如http://Socket.IO、SignalR）当初最大的卖点就是兼容所有浏览器版本，自动识别旧版浏览器并采取不同的连接方式，现在也渐渐失去了优势——所有新版浏览器都兼容WebSocket，直接用原生的就行了。说句题外话，这点很像jQuery，在原生js难用时迅速崛起，当其他库和原生js都吸收了它的很多优势时，慢慢就不那么重要了。但是，很大一部分AJAX的使用场景仍然是传统的请求-响应形式，比如获取json数据、post表单之类。这些功能虽然靠WebSocket也能实现，但就像在原本传输数据流的TCP之上定义了基于请求的HTTP协议一样，我们也要在WebSocket之上重新定义一种新的协议，最少也要加个request id用来区分每次响应数据对应的请求吧。</p>
<p>……但是，何苦一层叠一层地造个新轮子呢？直接使用AJAX不是更简单、更成熟吗？</p>
<p>另外还有一种情况，也就是传输大文件、图片、媒体流的时候，最好还是老老实实用HTTP来传。如果一定要用WebSocket的话，至少也专门为这些数据专门开辟个新通道，而别去占用那条用于推送消息、对实时性要求很强的连接。否则会把串行的WebSocket彻底堵死的。</p>
<p>所以说，WebSocket在用于双向传输、推送消息方面能够做到灵活、简便、高效，但在普通的Request-Response过程中并没有太大用武之地，比起普通的HTTP请求来反倒麻烦了许多，甚至更为低效。</p>
<p>每项技术都有自身的优缺点，在适合它的地方能发挥出最大长处，而看到它的几个优点就不分场合地全方位推广的话，可能会适得其反。</p>
<p>我们自己在开发能与手机通信的互联网机器人时就使用了WebSocket，效果很好。但并不是用它取代HTTP，而是取代了原先用于通信的基于TCP的Socket。</p>
<p>优点是：</p>
<p>原先在Socket连接后还要进行一些复杂的身份验证，同时要阻止未验证的连接发送控制指令。现在不需要了，在建立WebSocket连接的url里就能携带身份验证参数，验证不通过可以直接拒绝，不用设置状态；</p>
<p>原先自己实现了一套类似SSL的非对称加密机制，现在完全不需要了，直接通过wss加密，还能顺便保证证书的可信性；</p>
<p>原先要自己定义Socket数据格式，设置长度与标志，处理粘包、分包等问题，现在WebSocket收到的直接就是完整的数据包，完全不用自己处理；</p>
<p>前端的nginx可以直接进行转发与负载均衡，部署简单多了</p>
<h4 class="heading" data-id="heading-99">(8).TCP/IP的网络模型</h4>
<ul>
<li>
<p>1.TCP/IP模型是一系列网络协议的总称，这些协议的目的是使得计算机之间可以进行信息交换，</p>
</li>
<li>
<p>2.TCP/IP模型四层架构从下到上分别是链路层，网络层，传输层，应用层</p>
</li>
<li>
<p>3.链路层的作用是负责建立电路连接，是整个网络的物理基础，典型的协议包括以太网，ADSL等，</p>
</li>
<li>
<p>4.网络层负责分配地址和传送二进制数据，主要协议是IP协议，</p>
</li>
<li>
<p>5.传输层负责传送文本数据，主要协议是TCP</p>
</li>
<li>
<p>7.应用层负责传送各种最终形态的数据，是直接与用户信息打交道的层，主要协议是http，ftp等</p>
</li>
</ul>
<h3 class="heading" data-id="heading-100">2.HTTP协议</h3>
<h4 class="heading" data-id="heading-101">(1).常见的请求方法</h4>
<p>HTTP 1.0</p>
<ul>
<li>1.GET：从指定的资源请求数据</li>
<li>2.POST：向指定的资源提交要被处理的数据，例如
<ul>
<li>1.提交表单</li>
<li>2.将消息发布到公告板，新闻组，邮件列表，博客或类似的文章组；</li>
</ul>
</li>
<li>3.HEAD
<ul>
<li>1.类似于get请求，只不过返回的响应中没有具体的内容，只有头部</li>
<li>2.只请求资源的首部</li>
<li>3.检查超链接的有效性</li>
<li>4.检查网页是否被修改</li>
</ul>
</li>
</ul>
<p>HTTP1.1</p>
<ul>
<li>1.PUT：替换或创建指定资源</li>
<li>2.DELETE：对指定资源进行删除</li>
</ul>
<p>HTTP2.0</p>
<ul>
<li>
<p>1.OPTIONS： 用于获取目的资源所支持的通信选项，比如说服务器支持的请求方式等等。</p>
</li>
<li>
<p>2.TRACE：实现沿通向目标资源的路径的消息环回（loop-back）测试 ，提供了一种实用的 debug 机制。</p>
</li>
<li>
<p>3.CONNECT</p>
<ul>
<li>
<p>1.为代理服务器准备的</p>
</li>
<li>
<p>2.在 HTTP 协议中，<strong><code>CONNECT</code></strong> 方法可以开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）。例如，<strong><code>CONNECT</code></strong> 可以用来访问采用了 <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/SSL" rel="nofollow noopener noreferrer">SSL</a> (<a target="_blank" href="https://developer.mozilla.org/zh-CN/docs/Glossary/https" rel="nofollow noopener noreferrer">HTTPS</a>) 协议的站点。客户端要求代理服务器将 TCP 连接作为通往目的主机隧道。之后该服务器会代替客户端与目的主机建立连接。连接建立好之后，代理服务器会面向客户端发送或接收 TCP 消息流。</p>
</li>
</ul>
</li>
</ul>
<p>所有通用服务器必须支持GET和HEAD方法。所有其他方法都是可选的。</p>
<ul>
<li>1.安全性：在<a target="_blank" href="https://tools.ietf.org/html/rfc7231#section-4.1" rel="nofollow noopener noreferrer">此规范</a>定义的请求方法中，GET，HEAD，OPTIONS和TRACE方法被定义为安全的</li>
<li>2.幂等性：PUT，DELETE和安全Method是幂等的。</li>
<li>3.可缓存性：GET, HEAD, and POST。但大多数是只实现GET和HEAD可缓存
<ul>
<li>1.表示浏览器是会自动缓存的，以应用于后续请求。除非response中有相关策略</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-102">(2).GET 和 POST 的区别</h4>
<ul>
<li>
<p>1.get参数通过url传递，post放在request body中。</p>
</li>
<li>
<p>2.get请求在url中传递的参数是有长度限制的，而post没有。</p>
</li>
<li>
<p>3.get比post更不安全，因为参数直接暴露在url中，所以不能用来传递敏感信息。</p>
</li>
<li>
<p>4.get请求只能进行url编码，而post支持多种编码方式</p>
</li>
<li>
<p>5.get请求会浏览器主动cache，而post支持多种编码方式。</p>
</li>
<li>
<p>6.get请求参数会被完整保留在浏览历史记录里，而post中的参数不会被保留。</p>
</li>
<li>
<p>7.GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</p>
</li>
</ul>
<h4 class="heading" data-id="heading-103">(3).HTTP  状态码</h4>
<ul>
<li>1xx (Informational): 收到请求，正在处理</li>
<li>2xx (Successful): 该请求已成功收到，理解并接受</li>
<li>3xx (Redirection): 重定向</li>
<li>4xx (Client Error): 该请求包含错误的语法或不能为完成</li>
<li>5xx (Server Error): 服务器错误</li>
</ul>
<h4 class="heading" data-id="heading-104">(4).301 和 302 有什么具体区别</h4>
<ul>
<li>
<p>301：永久移动，请求的网页已永久移动到新的位置，服务器返回此响应，会自动将请求者转到新位置</p>
</li>
<li>
<p>302：历史移动，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来继续以后的请求，</p>
</li>
</ul>
<h3 class="heading" data-id="heading-105">3.操作系统</h3>
<h4 class="heading" data-id="heading-106">(1).进程和线程的区别</h4>
<ul>
<li>
<p>1.进程，是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统<strong>资源</strong>的基本单位。</p>
</li>
<li>
<p>2.线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。线程有时又被称为轻权进程或轻量级进程，也是 <strong>CPU 调度</strong>的一个基本单位。</p>
</li>
</ul>
<p>一个程序至少有一个进程，一个进程至少有一个线程，资源分配给进程，同一个进程下所有线程共享该进程的资源</p>
<h4 class="heading" data-id="heading-107">(2).线程的哪些资源共享，哪些资源不共享</h4>
<ul>
<li>
<p>1.共享的资源有</p>
<ul>
<li>1.堆：由于堆是在进程空间中开辟出来的，所以它是理所当然地被共享的；因此new出来的都是共享的（16位平台上分全局堆和局部堆，局部堆是独享的）</li>
<li>2.全局变量：它是与具体某一函数无关的，所以也与特定线程无关；因此也是共享的</li>
<li>3.静态变量：虽然对于局部变量来说，它在代码中是“放”在某一函数中的，但是其存放位置和全局变量一样，存于堆中开辟的.bss和.data段，是共享的</li>
<li>4.文件等公用资源：这个是共享的，使用这些公共资源的线程必须同步。Win32 提供了几种同步资源的方式，包括信号、临界区、事件和互斥体。</li>
</ul>
</li>
<li>
<p>2.独享的资源有</p>
<ul>
<li>1.栈：栈是独享的</li>
<li>2寄存器：这个可能会误解，因为电脑的寄存器是物理的，每个线程去取值难道不一样吗？其实线程里存放的是副本，包括程序计数器PC</li>
</ul>
</li>
</ul>
<h4 class="heading" data-id="heading-108">(3).进程间的通信方式有哪些</h4>
<ul>
<li>1.无名管道：半双工的通信方式，数据只能单向流动且只能在具有亲缘关系的进程间使用</li>
<li>2.高级管道：将另一个程序当作一个新的进程在当前程序进程中启动，则这个进程算是当前程序的子进程，</li>
<li>3.有名管道，：也是半双工的通信方式，但是允许没有亲缘进程之间的通信</li>
<li>4.消息队列：消息队列是有消息的链表，存放在内核中，并由消息队列标识符标识，消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限的缺点</li>
<li>5.信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问，它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源，</li>
<li>6.信号：用于通知接受进程某个事件已经发生</li>
<li>7.共享内存：共享内存就是映射一段能被其他进程所访问的内存。这段共享内存由一个进程创建，但是多个进程可以访问，共享内存是最快的IPC 方式，往往与其他通信机制配合使用</li>
<li>8.套接字：可用于不同机器之间的进程通信</li>
</ul>
<h2 class="heading" data-id="heading-109">六、前端进阶</h2>
<h3 class="heading" data-id="heading-110">1.VUE</h3>
<h4 class="heading" data-id="heading-111">(1).vue的生命周期</h4>
<p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p>
<p>每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行中、销毁。</p>
<ul>
<li>
<p>1.实例、组件通过new Vue() 创建出来之后会初始化事件和生命周期，然后就会执行beforeCreate钩子函数，这个时候，数据还没有挂载呢，只是一个空壳，无法访问到数据和真实的dom，一般不做操作</p>
</li>
<li>
<p>2.挂载数据，绑定事件等等，然后执行created函数，这个时候已经可以使用到数据，也可以更改数据,在这里更改数据不会触发updated函数，在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取</p>
</li>
<li>
<p>3.接下来开始找实例或者组件对应的模板，编译模板为虚拟dom放入到render函数中准备渲染，然后执行beforeMount钩子函数，在这个函数中虚拟dom已经创建完成，马上就要渲染,在这里也可以更改数据，不会触发updated，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取</p>
</li>
<li>
<p>4.接下来开始render，渲染出真实dom，然后执行mounted钩子函数，此时，组件已经出现在页面中，数据、真实dom都已经处理好了,事件都已经挂载好了，可以在这里操作真实dom等事情...</p>
</li>
<li>
<p>5.当组件或实例的数据更改之后，会立即执行beforeUpdate，然后vue的虚拟dom机制会重新构建虚拟dom与上一次的虚拟dom树利用diff算法进行对比之后重新渲染，一般不做什么事儿</p>
</li>
<li>
<p>6.当更新完成后，执行updated，数据已经更改完成，dom也重新render完成，可以操作更新后的虚拟dom</p>
</li>
<li>
<p>7.当经过某种途径调用$destroy方法后，立即执行beforeDestroy，一般在这里做一些善后工作，例如清除计时器、清除非指令绑定的事件等等</p>
</li>
<li>
<p>8.组件的数据绑定、监听...去掉后只剩下dom空壳，这个时候，执行destroyed，在这里做善后工作也可以</p>
</li>
</ul>
<h4 class="heading" data-id="heading-112">(2).Vue 双向绑定原理</h4>
<p>vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)。</p>
<h3 class="heading" data-id="heading-113">2.Webpack</h3>
<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。</p>
<h4 class="heading" data-id="heading-114">(1).webpack 和 gulp 区别</h4>
<p>gulp强调的是前端开发的工作流程，我们可以通过配置一系列的task，定义task处理的事务（例如文件压缩合并、雪碧图、启动server、版本控制等），然后定义执行顺序，来让gulp执行这些task，从而构建项目的整个前端开发流程。</p>
<p>webpack是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。</p>
<h3 class="heading" data-id="heading-115">3.模块化</h3>
<h4 class="heading" data-id="heading-116">(1).如何理解前端模块化</h4>
<p>前端模块化就是复杂的文件编程一个一个独立的模块，比如js文件等等，分成独立的模块有利于重用（复用性）和维护（版本迭代），这样会引来模块之间相互依赖的问题，所以有了commonJS 规范，AMD，CMD规范等等，以及用于js打包（编译等处理）的工具 webpack</p>
<h4 class="heading" data-id="heading-117">(2).说一下 Commonjs、AMD 和 CMD</h4>
<p>一个模块是能实现特定功能的文件，有了模块就可以方便的使用别人的代码，想要什么功能就能加载什么模块。</p>
<ul>
<li>
<p>1.Commonjs：开始于服务器端的模块化，同步定义的模块化，每个模块都是一个单独的作用域，模块输出，modules.exports，模块加载require()引入模块。</p>
</li>
<li>
<p>2.AMD：中文名异步模块定义的意思。</p>
<ul>
<li>
<p>1.require JS 实现了 AMD 规范</p>
<ul>
<li>
<p>1.主要用于解决下述两个问题。</p>
<ul>
<li>1.多个文件有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器</li>
<li>2.加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应的时间越长。</li>
</ul>
</li>
<li>
<p>2.语法：requireJS 定义了一个函数 define，它是全局变量，用来定义模块。</p>
</li>
</ul>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-comment">//定义模块</span>
define([<span class="hljs-string">'dependency'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> name = <span class="hljs-string">'Byron'</span>;
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printName</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(name);
  }
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">printName</span>: printName
  };
});

<span class="copy-code-btn">复制代码</span></code></pre><pre><code class="hljs js copyable" lang="js"><span class="hljs-comment">//加载模块</span>
<span class="hljs-built_in">require</span>([<span class="hljs-string">'myModule'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">my</span>)</span>{
  my.printName();
}
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>2.总结 AMD 规范：require()函数在加载依赖函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块加载成功，才会去执行。因为网页在加载js的时候会停止渲染，因此我们可以通过异步的方式去加载js,而如果需要依赖某些，也是异步去依赖，依赖后再执行某些方法。</p>
</li>
</ul>
</li>
</ul>
<h3 class="heading" data-id="heading-118">4.简单实现Node的Events模块</h3>
<p>简介：观察者模式或者说订阅模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p>
<p>node中的Events模块就是通过观察者模式来实现的：</p>
<pre><code class="hljs js copyable" lang="js">微信公众号：世界上有意思的事

<span class="hljs-keyword">var</span> events=<span class="hljs-built_in">require</span>(<span class="hljs-string">'events'</span>);
<span class="hljs-keyword">var</span> eventEmitter=<span class="hljs-keyword">new</span> events.EventEmitter();
eventEmitter.on(<span class="hljs-string">'say'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>,name);
})
eventEmitter.emit(<span class="hljs-string">'say'</span>,<span class="hljs-string">'Jony yu'</span>);
<span class="copy-code-btn">复制代码</span></code></pre><p>这样，eventEmitter发出say事件，通过On接收，并且输出结果，这就是一个订阅模式的实现，下面我们来简单的实现一个Events模块的EventEmitter。</p>
<ul>
<li>
<p>1.实现简单的Event模块的emit和on方法</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Events</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">this</span>.on=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">eventName,callBack</span>)</span>{
        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.handles){
            <span class="hljs-keyword">this</span>.handles={};
        }
        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">this</span>.handles[eventName]){
            <span class="hljs-keyword">this</span>.handles[eventName]=[];
        }
        <span class="hljs-keyword">this</span>.handles[eventName].push(callBack);
    }
    <span class="hljs-keyword">this</span>.emit=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">eventName,obj</span>)</span>{
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.handles[eventName]){
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;o&lt;<span class="hljs-keyword">this</span>.handles[eventName].length;i++){
                <span class="hljs-keyword">this</span>.handles[eventName][i](obj);
            }
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
}
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>2.这样我们就定义了Events，现在我们可以开始来调用：</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> events=<span class="hljs-keyword">new</span> Events();
events.on(<span class="hljs-string">'say'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>,nama)
});

<span class="hljs-comment">//结果就是通过emit调用之后，输出了Jony yu</span>
events.emit(<span class="hljs-string">'say'</span>,<span class="hljs-string">'Jony yu'</span>);
<span class="copy-code-btn">复制代码</span></code></pre></li>
<li>
<p>3.每个对象是独立的</p>
<p>因为是通过new的方式，每次生成的对象都是不相同的，因此：</p>
<pre><code class="hljs js copyable" lang="js"><span class="hljs-keyword">var</span> event1=<span class="hljs-keyword">new</span> Events();
<span class="hljs-keyword">var</span> event2=<span class="hljs-keyword">new</span> Events();
event1.on(<span class="hljs-string">'say'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Jony event1'</span>);
});
event2.on(<span class="hljs-string">'say'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Jony event2'</span>);
})

<span class="hljs-comment">//event1、event2之间的事件监听互相不影响</span>
<span class="hljs-comment">//输出结果为'Jony event1' 'Jony event2'</span>
event1.emit(<span class="hljs-string">'say'</span>);
event2.emit(<span class="hljs-string">'say'</span>);
<span class="copy-code-btn">复制代码</span></code></pre></li>
</ul>
<h3 class="heading" data-id="heading-119">5.性能优化</h3>
<ul>
<li>
<p>1.降低请求量：合并资源，减少HTTP 请求数，minify / gzip 压缩，webP，图片lazyLoad。</p>
</li>
<li>
<p>2.加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</p>
</li>
<li>
<p>3.缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。</p>
</li>
<li>
<p>4.渲染：JS/CSS优化（避免使用CSS表达式），加载顺序（将CSS样式表放在顶部，把javascript放在底部），服务端渲染，pipeline。</p>
</li>
</ul>
<h2 class="heading" data-id="heading-120">七、尾巴</h2>
<p><strong>看到这里，是不是惊叹于小姐姐的实力了？赶紧点赞、评论、关注、分享吧！！</strong></p>
</div></article><div data-v-7407bc26="" data-v-23c7d456="" class="tag-list-box"><div data-v-7407bc26="" data-v-23c7d456="" class="tag-list-title">关注下面的标签，发现更多相似文章</div><div data-v-7407bc26="" data-v-23c7d456="" st:block="tagList" class="tag-list"><a data-v-7407bc26="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" class="item" data-v-23c7d456=""><div data-v-292b3648="" data-v-4d895a49="" data-v-7407bc26="" data-src="https://lc-gold-cdn.xitu.io/85dd1ce8008458ac220c.png?imageView2/2/w/42/h/42/q/85/format/webp/interlace/1" class="lazy thumb tag-icon" style="background-image: none; background-size: contain;"></div><div data-v-7407bc26="" class="tag-title">面试</div></a></div></div><a data-v-7407bc26="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" data-v-23c7d456=""><div data-v-7407bc26="" class="footer-author-block"><div data-v-60bba1f2="" data-v-7407bc26="" itemscope="itemscope" itemtype="http://schema.org/Person" class="author"><meta itemprop="url" content="https://juejin.im/user/5a74437bf265da4e896aa1ed"><meta itemprop="image" content="https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?w=362&amp;h=338&amp;f=png&amp;s=186990"><meta itemprop="name" content="何时夕"><meta itemprop="jobTitle" content="改变世界的工程师"><div itemprop="memberOf" itemscope="itemscope" itemtype="http://schema.org/Organization"><meta itemprop="name" content="有意思有限公司"></div><div data-v-60bba1f2="" class="author-info-block"><a data-v-60bba1f2="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="avatar-link"><div data-v-292b3648="" data-v-11331c20="" data-v-60bba1f2="" data-src="https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a><div data-v-60bba1f2="" class="author-info-box"><div data-v-60bba1f2="" class="profile-box"><a data-v-44e95489="" data-v-60bba1f2="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="username username ellipsis">何时夕<a data-v-00e1e43c="" data-v-44e95489="" href="https://juejin.im/book/5c90640c5188252d7941f5bb/section/5c9065385188252da6320022" target="_blank" rel="" class="rank"><img data-v-00e1e43c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/lv-3.e108c68.svg" alt="lv-3"></a></a><span data-v-60bba1f2="" class="position ellipsis">改变世界的工程师 @ 有意思有限公司</span></div><div data-v-60bba1f2="" class="meta-box"><a data-v-60bba1f2="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed/posts" target="_blank" rel="" class="posts"><span data-v-60bba1f2="" class="count post-count">发布了 41 篇专栏 · </span></a><span data-v-60bba1f2="" class="count">获得点赞 3,157 · </span><span data-v-60bba1f2="" class="count">获得阅读 143,053</span></div></div><button data-v-fa88a374="" data-v-60bba1f2="" class="follow-button follow">关注</button></div></div></div></a><div data-v-7407bc26="" data-v-23c7d456="" st:block="banner" class="article-banner"><a data-v-7407bc26="" data-v-23c7d456="" st:name="link" st:state="https://juejin.im/extension/?utm_source=juejin.im&amp;utm_medium=post&amp;utm_campaign=extension_promotion" class="banner-title" href="https://juejin.im/extension/?utm_source=juejin.im&amp;utm_medium=post&amp;utm_campaign=extension_promotion" target="_blank">安装掘金浏览器插件</a><div data-v-7407bc26="" data-v-23c7d456="" class="banner-content">打开新标签页发现好内容，掘金、GitHub、Dribbble、ProductHunt 等站点内容轻松获取。快来安装掘金浏览器插件获取高质量内容吧！</div></div><!----><!----><div data-v-4b46f152="" data-v-7407bc26="" class="comment-list-box" id="comment-box" data-v-23c7d456="" manual="true"><div data-v-4b46f152="" class="title">评论</div><div data-v-5d62a384="" data-v-4b46f152="" class="comment-form comment-form"><div data-v-5d62a384="" class="avatar-box"><div data-v-292b3648="" data-v-11331c20="" data-v-5d62a384="" data-src="https://mirror-gold-cdn.xitu.io/168e08d6d9e8b3febec?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar loaded" style="background-image: url(&quot;https://mirror-gold-cdn.xitu.io/168e08d6d9e8b3febec?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1&quot;);"></div></div><div data-v-5d62a384="" class="form-box"><div data-v-5d62a384="" class="input-box"><div data-v-8f167968="" data-v-5d62a384="" class="auth-card"><!----><div data-v-5d62a384="" data-v-8f167968="" contenteditable="true" spellcheck="false" placeholder="输入评论..." class="rich-input empty"><br data-v-5d62a384="" data-v-8f167968=""></div></div><!----></div><!----></div><input data-v-5d62a384="" type="file" class="hidden"></div><div data-v-1d85495c="" data-v-4b46f152="" class="comment-list comment-list"><div data-v-5db6962e="" data-v-1d85495c="" class="image-viewer-box"><!----></div><div data-v-1d85495c="" class="item"><div data-v-c3a00e66="" data-v-1d85495c="" class="comment comment"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="58d72f99ac502e0058d03162" class="user-popover-box popover"><!----><a data-v-c3a00e66="" href="https://juejin.im/user/58d72f99ac502e0058d03162" target="_blank" rel="" class="user-link" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-c3a00e66="" data-src="https://user-gold-cdn.xitu.io/2020/4/1/17133a1c47476e6f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-c3a00e66="" class="content-box comment-divider-line"><div data-v-c3a00e66="" class="meta-box"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="58d72f99ac502e0058d03162" class="user-popover-box"><!----><a data-v-44e95489="" data-v-c3a00e66="" href="https://juejin.im/user/58d72f99ac502e0058d03162" target="_blank" rel="" class="username username ellipsis" data-v-0f4ef93c="">尤小小<a data-v-00e1e43c="" data-v-44e95489="" href="https://juejin.im/book/5c90640c5188252d7941f5bb/section/5c9065385188252da6320022" target="_blank" rel="" class="rank"><img data-v-00e1e43c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/lv-2.f597b88.svg" alt="lv-2"></a></a></div><div data-v-c3a00e66="" class="position">前端开发工程师 @ 轻松筹</div></div><div data-v-c3a00e66="" class="content">小姐姐找到工作了吗</div><div data-v-c3a00e66="" class="limit-ctl-box"><!----><!----></div><!----><div data-v-c3a00e66="" class="reply-stat"><time data-v-c3a00e66="" datetime="2020-04-16T11:03:50.468Z" title="Thu Apr 16 2020 19:03:50 GMT+0800 (中国标准时间)" class="time">2小时前</time><div data-v-c3a00e66="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-c3a00e66="" class="action-box"><div data-v-c3a00e66="" class="like-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><!----></div><div data-v-c3a00e66="" class="comment-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-c3a00e66="" class="action-title">回复</span></div></div></div><!----><div data-v-39f2ce6a="" data-v-c3a00e66="" class="sub-comment-list sub-comment-list"><!----></div></div><!----></div></div><div data-v-1d85495c="" class="item"><div data-v-c3a00e66="" data-v-1d85495c="" class="comment comment"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5e2072ace51d4577794c0877" class="user-popover-box popover"><!----><a data-v-c3a00e66="" href="https://juejin.im/user/5e2072ace51d4577794c0877" target="_blank" rel="" class="user-link" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-c3a00e66="" data-src="https://mirror-gold-cdn.xitu.io/16faebff8fa70e00615?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-c3a00e66="" class="content-box comment-divider-line"><div data-v-c3a00e66="" class="meta-box"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5e2072ace51d4577794c0877" class="user-popover-box"><!----><a data-v-44e95489="" data-v-c3a00e66="" href="https://juejin.im/user/5e2072ace51d4577794c0877" target="_blank" rel="" class="username username ellipsis" data-v-0f4ef93c="">艳骨<!----></a></div><div data-v-c3a00e66="" class="position"></div></div><div data-v-c3a00e66="" class="content">强得令人头秃<img class="emoji" draggable="false" alt="👍" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f44d.svg"><img class="emoji" draggable="false" alt="👍" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f44d.svg"></div><div data-v-c3a00e66="" class="limit-ctl-box"><!----><!----></div><!----><div data-v-c3a00e66="" class="reply-stat"><time data-v-c3a00e66="" datetime="2020-04-16T07:32:35.114Z" title="Thu Apr 16 2020 15:32:35 GMT+0800 (中国标准时间)" class="time">6小时前</time><div data-v-c3a00e66="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-c3a00e66="" class="action-box"><div data-v-c3a00e66="" class="like-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><!----></div><div data-v-c3a00e66="" class="comment-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-c3a00e66="" class="action-title">回复</span></div></div></div><!----><div data-v-39f2ce6a="" data-v-c3a00e66="" class="sub-comment-list sub-comment-list"><!----></div></div><!----></div></div><div data-v-1d85495c="" class="item"><div data-v-c3a00e66="" data-v-1d85495c="" class="comment comment"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5da8f7efe51d4524a131b1c1" class="user-popover-box popover"><!----><a data-v-c3a00e66="" href="https://juejin.im/user/5da8f7efe51d4524a131b1c1" target="_blank" rel="" class="user-link" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-c3a00e66="" data-src="https://user-gold-cdn.xitu.io/2019/10/30/16e1a30c2bf7f610?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-c3a00e66="" class="content-box comment-divider-line"><div data-v-c3a00e66="" class="meta-box"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5da8f7efe51d4524a131b1c1" class="user-popover-box"><!----><a data-v-44e95489="" data-v-c3a00e66="" href="https://juejin.im/user/5da8f7efe51d4524a131b1c1" target="_blank" rel="" class="username username ellipsis" data-v-0f4ef93c="">hugeannex<!----></a></div><div data-v-c3a00e66="" class="position">扫地 @ 地球修理</div></div><div data-v-c3a00e66="" class="content">全背完了吗？背完了？然并卵，人家只选漂亮的！</div><div data-v-c3a00e66="" class="limit-ctl-box"><!----><!----></div><!----><div data-v-c3a00e66="" class="reply-stat"><time data-v-c3a00e66="" datetime="2020-04-16T05:01:25.735Z" title="Thu Apr 16 2020 13:01:25 GMT+0800 (中国标准时间)" class="time">8小时前</time><div data-v-c3a00e66="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-c3a00e66="" class="action-box"><div data-v-c3a00e66="" class="like-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><span data-v-c3a00e66="" class="action-title">1</span></div><div data-v-c3a00e66="" class="comment-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-c3a00e66="" class="action-title">回复</span></div></div></div><!----><div data-v-39f2ce6a="" data-v-c3a00e66="" class="sub-comment-list sub-comment-list"><div data-v-39f2ce6a="" class="item"><div data-v-17ea9b53="" data-v-39f2ce6a="" class="sub-comment sub-comment"><div data-v-17ea9b53="" class="sub-comment-content-row"><div data-v-17ea9b53="" class="sub-comment-content-box"><div data-v-0f4ef93c="" data-v-17ea9b53="" st:block="userPopover" st:state="5a74437bf265da4e896aa1ed" class="user-popover-box popover"><!----><a data-v-17ea9b53="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="username" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-17ea9b53="" data-src="https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-17ea9b53="" class="user-content-box"><div data-v-17ea9b53="" class="profie"><div data-v-0f4ef93c="" data-v-17ea9b53="" st:block="userPopover" st:state="5a74437bf265da4e896aa1ed" class="user-popover-box"><!----><a data-v-44e95489="" data-v-17ea9b53="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="username" data-v-0f4ef93c="">何时夕<a data-v-00e1e43c="" data-v-44e95489="" href="https://juejin.im/book/5c90640c5188252d7941f5bb/section/5c9065385188252da6320022" target="_blank" rel="" class="rank"><img data-v-00e1e43c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/lv-3.e108c68.svg" alt="lv-3"></a><span data-v-17ea9b53="" class="author-badge-text">(作者)</span></a></div><div data-v-17ea9b53="" class="position">改变世界的工程师 @ 有意思有限公司</div></div><div data-v-17ea9b53="" class="content-box"><span data-v-17ea9b53=""> 回复 </span><div data-v-0f4ef93c="" data-v-17ea9b53="" st:block="userPopover" st:state="5da8f7efe51d4524a131b1c1" class="user-popover-box"><!----><a data-v-44e95489="" data-v-17ea9b53="" href="https://juejin.im/user/5da8f7efe51d4524a131b1c1" target="_blank" rel="" class="username username be-replied" data-v-0f4ef93c="">hugeannex<!----></a></div><!----><span data-v-17ea9b53="">: </span><span data-v-17ea9b53="" class="content">你这样心里阴暗的人别在我的文章上面评论，污染了文章，脏了眼睛。<img class="emoji" draggable="false" alt="👎" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f44e.svg"></span></div><!----><!----><div data-v-17ea9b53="" class="limit-all-box"><!----></div><div data-v-17ea9b53="" class="sub-comment-stat-box"><time data-v-17ea9b53="" datetime="2020-04-16T05:02:42.971Z" title="Thu Apr 16 2020 13:02:42 GMT+0800 (中国标准时间)" class="time">8小时前</time><div data-v-17ea9b53="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-17ea9b53="" class="sub-comment-action-box"><div data-v-17ea9b53="" class="like-action action"><svg data-v-17ea9b53="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-17ea9b53="" fill="none" fill-rule="evenodd"><path data-v-17ea9b53="" d="M0 0h20v20H0z"></path> <path data-v-17ea9b53="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><!----></div><div data-v-17ea9b53="" class="comment-action action"><svg data-v-17ea9b53="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-17ea9b53="" fill="none" fill-rule="evenodd"><path data-v-17ea9b53="" d="M0 0h20v20H0z"></path> <path data-v-17ea9b53="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-17ea9b53="">回复</span></div></div></div><!----></div></div></div><!----></div></div><div data-v-39f2ce6a="" class="item"><div data-v-17ea9b53="" data-v-39f2ce6a="" class="sub-comment sub-comment"><div data-v-17ea9b53="" class="sub-comment-content-row"><div data-v-17ea9b53="" class="sub-comment-content-box"><div data-v-0f4ef93c="" data-v-17ea9b53="" st:block="userPopover" st:state="5b49e58af265da0f48610724" class="user-popover-box popover"><!----><a data-v-17ea9b53="" href="https://juejin.im/user/5b49e58af265da0f48610724" target="_blank" rel="" class="username" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-17ea9b53="" data-src="https://mirror-gold-cdn.xitu.io/168e091f531a66cb188?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-17ea9b53="" class="user-content-box"><div data-v-17ea9b53="" class="profie"><div data-v-0f4ef93c="" data-v-17ea9b53="" st:block="userPopover" st:state="5b49e58af265da0f48610724" class="user-popover-box"><!----><a data-v-44e95489="" data-v-17ea9b53="" href="https://juejin.im/user/5b49e58af265da0f48610724" target="_blank" rel="" class="username" data-v-0f4ef93c="">JackyM06<!----></a></div><div data-v-17ea9b53="" class="position">前端届小辣鸡 @ d</div></div><div data-v-17ea9b53="" class="content-box"><span data-v-17ea9b53=""> 回复 </span><div data-v-0f4ef93c="" data-v-17ea9b53="" st:block="userPopover" st:state="5da8f7efe51d4524a131b1c1" class="user-popover-box"><!----><a data-v-44e95489="" data-v-17ea9b53="" href="https://juejin.im/user/5da8f7efe51d4524a131b1c1" target="_blank" rel="" class="username username be-replied" data-v-0f4ef93c="">hugeannex<!----></a></div><!----><span data-v-17ea9b53="">: </span><span data-v-17ea9b53="" class="content"><img class="emoji" draggable="false" alt="👿" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f47f.svg"></span></div><!----><!----><div data-v-17ea9b53="" class="limit-all-box"><!----></div><div data-v-17ea9b53="" class="sub-comment-stat-box"><time data-v-17ea9b53="" datetime="2020-04-16T06:29:31.466Z" title="Thu Apr 16 2020 14:29:31 GMT+0800 (中国标准时间)" class="time">7小时前</time><div data-v-17ea9b53="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-17ea9b53="" class="sub-comment-action-box"><div data-v-17ea9b53="" class="like-action action"><svg data-v-17ea9b53="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-17ea9b53="" fill="none" fill-rule="evenodd"><path data-v-17ea9b53="" d="M0 0h20v20H0z"></path> <path data-v-17ea9b53="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><!----></div><div data-v-17ea9b53="" class="comment-action action"><svg data-v-17ea9b53="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-17ea9b53="" fill="none" fill-rule="evenodd"><path data-v-17ea9b53="" d="M0 0h20v20H0z"></path> <path data-v-17ea9b53="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-17ea9b53="">回复</span></div></div></div><!----></div></div></div><!----></div></div><div data-v-39f2ce6a="" class="item fetch-more"><div data-v-39f2ce6a="" class="fetch-more-comment">加载更多</div></div></div></div><!----></div></div><div data-v-1d85495c="" class="item"><div data-v-c3a00e66="" data-v-1d85495c="" class="comment comment"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5cc29e9e6fb9a032265101fc" class="user-popover-box popover"><!----><a data-v-c3a00e66="" href="https://juejin.im/user/5cc29e9e6fb9a032265101fc" target="_blank" rel="" class="user-link" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-c3a00e66="" data-src="https://user-gold-cdn.xitu.io/2019/4/26/16a5864b0cf303c5?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-c3a00e66="" class="content-box comment-divider-line"><div data-v-c3a00e66="" class="meta-box"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5cc29e9e6fb9a032265101fc" class="user-popover-box"><!----><a data-v-44e95489="" data-v-c3a00e66="" href="https://juejin.im/user/5cc29e9e6fb9a032265101fc" target="_blank" rel="" class="username username ellipsis" data-v-0f4ef93c="">r603282621<a data-v-00e1e43c="" data-v-44e95489="" href="https://juejin.im/book/5c90640c5188252d7941f5bb/section/5c9065385188252da6320022" target="_blank" rel="" class="rank"><img data-v-00e1e43c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/lv-1.636691c.svg" alt="lv-1"></a></a></div><div data-v-c3a00e66="" class="position"></div></div><div data-v-c3a00e66="" class="content">马克下</div><div data-v-c3a00e66="" class="limit-ctl-box"><!----><!----></div><!----><div data-v-c3a00e66="" class="reply-stat"><time data-v-c3a00e66="" datetime="2020-04-16T01:52:41.962Z" title="Thu Apr 16 2020 09:52:41 GMT+0800 (中国标准时间)" class="time">11小时前</time><div data-v-c3a00e66="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-c3a00e66="" class="action-box"><div data-v-c3a00e66="" class="like-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><!----></div><div data-v-c3a00e66="" class="comment-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-c3a00e66="" class="action-title">回复</span></div></div></div><!----><div data-v-39f2ce6a="" data-v-c3a00e66="" class="sub-comment-list sub-comment-list"><!----></div></div><!----></div></div><div data-v-1d85495c="" class="item"><div data-v-c3a00e66="" data-v-1d85495c="" class="comment comment"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5e97b3eae51d45471a1cd232" class="user-popover-box popover"><!----><a data-v-c3a00e66="" href="https://juejin.im/user/5e97b3eae51d45471a1cd232" target="_blank" rel="" class="user-link" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-c3a00e66="" data-src="https://user-gold-cdn.xitu.io/2020/4/16/171809c0ca3f1094?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-c3a00e66="" class="content-box comment-divider-line"><div data-v-c3a00e66="" class="meta-box"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5e97b3eae51d45471a1cd232" class="user-popover-box"><!----><a data-v-44e95489="" data-v-c3a00e66="" href="https://juejin.im/user/5e97b3eae51d45471a1cd232" target="_blank" rel="" class="username username ellipsis" data-v-0f4ef93c="">奔跑的潘大<!----></a></div><div data-v-c3a00e66="" class="position">非物质能量空间转移工程师</div></div><div data-v-c3a00e66="" class="content">啊~哒~~~  去我收藏夹里吃灰吧</div><div data-v-c3a00e66="" class="limit-ctl-box"><!----><!----></div><!----><div data-v-c3a00e66="" class="reply-stat"><time data-v-c3a00e66="" datetime="2020-04-16T01:26:14.782Z" title="Thu Apr 16 2020 09:26:14 GMT+0800 (中国标准时间)" class="time">12小时前</time><div data-v-c3a00e66="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-c3a00e66="" class="action-box"><div data-v-c3a00e66="" class="like-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><span data-v-c3a00e66="" class="action-title">2</span></div><div data-v-c3a00e66="" class="comment-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-c3a00e66="" class="action-title">回复</span></div></div></div><!----><div data-v-39f2ce6a="" data-v-c3a00e66="" class="sub-comment-list sub-comment-list"><!----></div></div><!----></div></div><div data-v-1d85495c="" class="item"><div data-v-c3a00e66="" data-v-1d85495c="" class="comment comment"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5ca341bae51d45556106a5bd" class="user-popover-box popover"><!----><a data-v-c3a00e66="" href="https://juejin.im/user/5ca341bae51d45556106a5bd" target="_blank" rel="" class="user-link" data-v-0f4ef93c=""><div data-v-292b3648="" data-v-11331c20="" data-v-c3a00e66="" data-src="https://user-gold-cdn.xitu.io/2019/12/1/16ec1b3d21887082?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar" style="background-image: none;"></div></a></div><div data-v-c3a00e66="" class="content-box comment-divider-line"><div data-v-c3a00e66="" class="meta-box"><div data-v-0f4ef93c="" data-v-c3a00e66="" st:block="userPopover" st:state="5ca341bae51d45556106a5bd" class="user-popover-box"><!----><a data-v-44e95489="" data-v-c3a00e66="" href="https://juejin.im/user/5ca341bae51d45556106a5bd" target="_blank" rel="" class="username username ellipsis" data-v-0f4ef93c="">我写的代码全是bug<!----></a></div><div data-v-c3a00e66="" class="position">web前端开发工程师 @ 😏😏😏</div></div><div data-v-c3a00e66="" class="content">收藏点赞<img class="emoji" draggable="false" alt="😃" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f603.svg"><img class="emoji" draggable="false" alt="😃" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f603.svg"><img class="emoji" draggable="false" alt="😃" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1f603.svg"></div><div data-v-c3a00e66="" class="limit-ctl-box"><!----><!----></div><!----><div data-v-c3a00e66="" class="reply-stat"><time data-v-c3a00e66="" datetime="2020-04-16T00:21:59.689Z" title="Thu Apr 16 2020 08:21:59 GMT+0800 (中国标准时间)" class="time">13小时前</time><div data-v-c3a00e66="" class="delete"> &nbsp;·&nbsp;删除</div><div data-v-c3a00e66="" class="action-box"><div data-v-c3a00e66="" class="like-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon like-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M4.58 8.25V17h-1.4C2.53 17 2 16.382 2 15.624V9.735c0-.79.552-1.485 1.18-1.485h1.4zM11.322 2c1.011.019 1.614.833 1.823 1.235.382.735.392 1.946.13 2.724-.236.704-.785 1.629-.785 1.629h4.11c.434 0 .838.206 1.107.563.273.365.363.84.24 1.272l-1.86 6.513A1.425 1.425 0 0 1 14.724 17H6.645V7.898C8.502 7.51 9.643 4.59 9.852 3.249A1.47 1.47 0 0 1 11.322 2z"></path></g></svg><!----></div><div data-v-c3a00e66="" class="comment-action action"><svg data-v-c3a00e66="" aria-hidden="true" width="16" height="16" viewBox="0 0 20 20" class="icon comment-icon"><g data-v-c3a00e66="" fill="none" fill-rule="evenodd"><path data-v-c3a00e66="" d="M0 0h20v20H0z"></path> <path data-v-c3a00e66="" stroke="#8A93A0" stroke-linejoin="round" d="M10 17c-4.142 0-7.5-2.91-7.5-6.5S5.858 4 10 4c4.142 0 7.5 2.91 7.5 6.5 0 1.416-.522 2.726-1.41 3.794-.129.156.41 3.206.41 3.206l-3.265-1.134c-.998.369-2.077.634-3.235.634z"></path></g></svg> <span data-v-c3a00e66="" class="action-title">回复</span></div></div></div><!----><div data-v-39f2ce6a="" data-v-c3a00e66="" class="sub-comment-list sub-comment-list"><!----></div></div><!----></div></div></div><div data-v-4b46f152="" class="fetch-more-comment">查看更多 &gt;</div></div></div><!----><div data-v-7407bc26="" data-v-23c7d456="" st:block="recommended" class="main-area recommended-area shadow"><div data-v-7407bc26="" data-v-23c7d456="" class="recommended-entry-list-title">相关推荐</div><!----><ul data-v-158dab7e="" data-v-7407bc26="" st:block="entryList" class="entry-list recommended-entry-list" data-v-23c7d456=""><!----><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e97ba085188256bdf72bd5f|1" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e97b94651882573680f3802" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="5e93fafae51d4546e5570dc5" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/5e93fafae51d4546e5570dc5" target="_blank" rel="" st:name="user" st:state="5e93fafae51d4546e5570dc5" data-v-0f4ef93c="">小杰要吃蛋</a></div></li><li data-v-2d360bea="" class="item">11小时前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e97b94651882573680f3802" target="_blank" rel="" st:name="title" class="title">一个00后的中专生是怎么在深圳拿到15K（Java后端开发）</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">34</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e97b94651882573680f3802#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">64</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><!----></div></a></div></div></li><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e97ff21e51d4546c72e1d6a|2" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e97fe876fb9a03c2e542c1e" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="5874526761ff4b006d4fd9a4" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/5874526761ff4b006d4fd9a4" target="_blank" rel="" st:name="user" st:state="5874526761ff4b006d4fd9a4" data-v-0f4ef93c="">winty</a></div></li><li data-v-2d360bea="" class="item">6小时前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a><a data-v-2d360bea="" href="https://juejin.im/tag/%E5%89%8D%E7%AB%AF" target="_blank" rel="" st:name="tag" st:state="5597a05ae4b08a686ce56f6f" class="tag">前端</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e97fe876fb9a03c2e542c1e" target="_blank" rel="" st:name="title" class="title">十道大厂面试题(含答案)总结</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">21</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e97fe876fb9a03c2e542c1e#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><!----></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><div data-v-292b3648="" data-v-4d895a49="" data-v-2d360bea="" data-src="https://user-gold-cdn.xitu.io/2020/4/16/17181bc1b6dae6d8?imageView2/1/w/120/h/120/q/85/format/webp/interlace/1" class="lazy thumb thumb" style="background-image: none; background-size: cover;"></div></div></a></div></div></li><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e9803b2e51d4546e8576f97|3" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e98032bf265da47ed17febe" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="5814c73f5bbb500059a33944" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/5814c73f5bbb500059a33944" target="_blank" rel="" st:name="user" st:state="5814c73f5bbb500059a33944" data-v-0f4ef93c="">儿儿菜</a></div></li><li data-v-2d360bea="" class="item">6小时前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e98032bf265da47ed17febe" target="_blank" rel="" st:name="title" class="title">前端新手的初级前端面试学习笔记(有答案,有些我自己觉得可以)</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">7</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e98032bf265da47ed17febe#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">10</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><!----></div></a></div></div></li><!----><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e91b13d6fb9a03c860b773f|4" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e91b01651882573716a9b23" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="5a74437bf265da4e896aa1ed" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" st:name="user" st:state="5a74437bf265da4e896aa1ed" data-v-0f4ef93c="">何时夕</a></div></li><li data-v-2d360bea="" class="item">5天前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e91b01651882573716a9b23" target="_blank" rel="" st:name="title" class="title">一位前端小姐姐的五万字面试宝典</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">791</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e91b01651882573716a9b23#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">79</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><!----></div></a></div></div></li><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e97ef20f265da47c06ed3b8|5" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e9102f9e51d4546d6357fde" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="59a38791f265da24744d94dc" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/59a38791f265da24744d94dc" target="_blank" rel="" st:name="user" st:state="59a38791f265da24744d94dc" data-v-0f4ef93c="">Jensen95</a></div></li><li data-v-2d360bea="" class="item">8小时前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a><a data-v-2d360bea="" href="https://juejin.im/tag/Android" target="_blank" rel="" st:name="tag" st:state="5597838ee4b08a686ce2319d" class="tag">Android</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e9102f9e51d4546d6357fde" target="_blank" rel="" st:name="title" class="title">快手，字节跳动，百度，美团Offer之旅(Android面经分享)| 掘金技术征文</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">17</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e9102f9e51d4546d6357fde#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">8</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><!----></div></a></div></div></li><!----><!----><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e93b5a26fb9a03c53518c88|4" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e92d863f265da47e57fe065" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="5b13f11d5188257da1245183" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/5b13f11d5188257da1245183" target="_blank" rel="" st:name="user" st:state="5b13f11d5188257da1245183" data-v-0f4ef93c="">晨曦时梦见兮</a></div></li><li data-v-2d360bea="" class="item">3天前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/Vue.js" target="_blank" rel="" st:name="tag" st:state="555e9a98e4b00c57d9955f68" class="tag">Vue.js</a><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e92d863f265da47e57fe065" target="_blank" rel="" st:name="title" class="title">Vue3 的响应式和以前有什么区别，Proxy 无敌？</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">396</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e92d863f265da47e57fe065#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">45</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><!----></div></a></div></div></li><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e8b5d1f51882573834ec793|5" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e8b261ae51d4546c0382ab4" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><li data-v-2d360bea="" class="item hot">热</li><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="5d194f8151882517de2ae188" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/5d194f8151882517de2ae188" target="_blank" rel="" st:name="user" st:state="5d194f8151882517de2ae188" data-v-0f4ef93c="">写代码像蔡徐抻</a></div></li><li data-v-2d360bea="" class="item">9天前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e8b261ae51d4546c0382ab4" target="_blank" rel="" st:name="title" class="title">2万字 | 前端基础拾遗90问</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">1356</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e8b261ae51d4546c0382ab4#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">108</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><div data-v-292b3648="" data-v-4d895a49="" data-v-2d360bea="" data-src="https://user-gold-cdn.xitu.io/2020/4/7/171505cf0c883a6e?imageView2/1/w/120/h/120/q/85/format/webp/interlace/1" class="lazy thumb thumb" style="background-image: none; background-size: cover;"></div></div></a></div></div></li><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e8b24b7e51d45471655081a|6" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e8b163ff265da47ee3f54a6" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><li data-v-2d360bea="" class="item hot">热</li><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="574f910b207703005cd8686a" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/574f910b207703005cd8686a" target="_blank" rel="" st:name="user" st:state="574f910b207703005cd8686a" data-v-0f4ef93c="">axuebin</a></div></li><li data-v-2d360bea="" class="item">10天前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e8b163ff265da47ee3f54a6" target="_blank" rel="" st:name="title" class="title">2020年前端面试复习必读文章【超百篇文章/赠复习导图】</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">1700</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e8b163ff265da47ee3f54a6#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">137</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><div data-v-292b3648="" data-v-4d895a49="" data-v-2d360bea="" data-src="https://user-gold-cdn.xitu.io/2020/4/6/1714f6e26d3ebb87?imageView2/1/w/120/h/120/q/85/format/webp/interlace/1" class="lazy thumb thumb" style="background-image: none; background-size: cover;"></div></div></a></div></div></li><li data-v-158dab7e="" data-growing-container="true" data-growing-title="entryList" class="item"><div data-v-45a8407d="" data-v-158dab7e="" class="entry-box"><div data-v-2d360bea="" data-v-45a8407d="" st:block="entry" st:state="5e95091151882573c15ee276|7" class="entry"><a data-v-2d360bea="" href="https://juejin.im/post/5e9473f5e51d454702460323" target="_blank" rel="" st:name="link" class="entry-link"><div data-v-2d360bea="" class="content-box"><div data-v-2d360bea="" class="info-box"><div data-v-2d360bea="" class="info-row meta-row"><ul data-v-2d360bea="" class="meta-list"><!----><!----><li data-v-2d360bea="" class="item post">专栏</li><li data-v-2d360bea="" class="item username clickable"><div data-v-0f4ef93c="" data-v-2d360bea="" st:block="userPopover" st:state="59b416065188257e671b670a" class="user-popover-box"><!----><a data-v-2d360bea="" href="https://juejin.im/user/59b416065188257e671b670a" target="_blank" rel="" st:name="user" st:state="59b416065188257e671b670a" data-v-0f4ef93c="">敖丙</a></div></li><li data-v-2d360bea="" class="item">2天前</li><li data-v-2d360bea="" class="item tag"><a data-v-2d360bea="" href="https://juejin.im/tag/%E9%9D%A2%E8%AF%95" target="_blank" rel="" st:name="tag" st:state="55979fe6e4b08a686ce562fe" class="tag">面试</a><a data-v-2d360bea="" href="https://juejin.im/tag/Java" target="_blank" rel="" st:name="tag" st:state="559a7207e4b08a686d25703e" class="tag">Java</a></li><!----></ul></div><div data-v-2d360bea="" class="info-row title-row"><!----><!----><a data-v-2d360bea="" href="https://juejin.im/post/5e9473f5e51d454702460323" target="_blank" rel="" st:name="title" class="title">面试官：如何用Redis实现分布式锁？</a></div><div data-v-2d360bea="" class="info-row action-row"><ul data-v-2d360bea="" class="action-list"><li data-v-2d360bea="" st:name="likeBtn" class="item like clickable"><a data-v-2d360bea="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-2d360bea="" class="count">99</span></a></li><li data-v-2d360bea="" st:name="commentBtn" class="item comment clickable"><a data-v-2d360bea="" href="https://juejin.im/post/5e9473f5e51d454702460323#comment" target="_blank" rel="" class="title-box"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.4d5744f.svg" class="icon"><span data-v-2d360bea="" class="count">21</span></a></li><li data-v-2d360bea="" st:name="shareBtn" title="分享" class="item share clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/share.1d55e69.svg" class="icon"><div data-v-2d360bea="" class="share-panel"><div data-v-2d360bea="" st:name="shareItem" st:state="weibo" class="share-item weibo"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/weibo.8e2f5d6.svg" class="icon">微博</div><div data-v-2d360bea="" st:name="shareItem" st:state="wechat" class="share-item wechat"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/wechat.844402c.svg" class="icon">微信扫一扫<div data-v-2d360bea="" class="qr-code-box"><img data-v-2d360bea="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="qr-code"></div></div></div></li><li data-v-2d360bea="" title="收藏" st:name="collectBtn" class="item collect clickable hover"><img data-v-2d360bea="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/collect.02e2979.svg" class="icon"><!----></li><!----></ul></div></div><div data-v-292b3648="" data-v-4d895a49="" data-v-2d360bea="" data-src="https://user-gold-cdn.xitu.io/2020/4/13/17173e5a5f96b980?imageView2/1/w/120/h/120/q/85/format/webp/interlace/1" class="lazy thumb thumb" style="background-image: none; background-size: cover;"></div></div></a></div></div></li><li data-v-158dab7e="" class="item"><!----></li><!----></ul></div><div data-v-7286dda2="" data-v-7407bc26="" st:block="sidebar" class="sidebar sidebar top sticky" data-v-23c7d456=""><div data-v-200fbf1c="" data-v-625baef0="" data-v-7286dda2="" class="sidebar-block author-block shadow"><div data-v-200fbf1c="" class="block-title">关于作者</div><div data-v-200fbf1c="" class="block-body"><a data-v-625baef0="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="user-item item" data-v-200fbf1c=""><div data-v-292b3648="" data-v-11331c20="" data-v-625baef0="" data-src="https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1" class="lazy avatar avatar loaded" style="background-image: url(&quot;https://user-gold-cdn.xitu.io/2018/2/2/161563555e77a22f?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1&quot;);"></div><div data-v-625baef0="" class="info-box"><a data-v-44e95489="" data-v-625baef0="" href="https://juejin.im/user/5a74437bf265da4e896aa1ed" target="_blank" rel="" class="username">何时夕<a data-v-00e1e43c="" data-v-44e95489="" href="https://juejin.im/book/5c90640c5188252d7941f5bb/section/5c9065385188252da6320022" target="_blank" rel="" class="rank"><img data-v-00e1e43c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/lv-3.e108c68.svg" alt="lv-3"></a></a><div data-v-625baef0="" title="改变世界的工程师 @ 有意思有限公司" class="position">改变世界的工程师 @ 有意思有限公司</div></div></a><div data-v-625baef0="" data-v-200fbf1c="" class="stat-item item"><svg data-v-625baef0="" data-v-200fbf1c="" xmlns="http://www.w3.org/2000/svg" width="25" height="26" viewBox="0 0 25 26" class="zan"><g data-v-625baef0="" data-v-200fbf1c="" fill="none" fill-rule="evenodd" transform="translate(0 .57)"><ellipse data-v-625baef0="" data-v-200fbf1c="" cx="12.5" cy="12.57" fill="#E1EFFF" rx="12.5" ry="12.57"></ellipse> <path data-v-625baef0="" data-v-200fbf1c="" fill="#7BB9FF" d="M8.596 11.238V19H7.033C6.463 19 6 18.465 6 17.807v-5.282c0-.685.483-1.287 1.033-1.287h1.563zm4.275-4.156A1.284 1.284 0 0 1 14.156 6c.885.016 1.412.722 1.595 1.07.334.638.343 1.687.114 2.361-.207.61-.687 1.412-.687 1.412h3.596c.38 0 .733.178.969.488.239.317.318.728.21 1.102l-1.628 5.645a1.245 1.245 0 0 1-1.192.922h-7.068v-7.889c1.624-.336 2.623-2.866 2.806-4.029z"></path></g></svg> <span data-v-625baef0="" data-v-200fbf1c="" class="content">获得点赞<span data-v-625baef0="" data-v-200fbf1c="" class="count">3,157</span></span></div><div data-v-625baef0="" data-v-200fbf1c="" class="stat-item item"><svg data-v-625baef0="" data-v-200fbf1c="" width="25" height="25" viewBox="0 0 25 25" class="icon stat-view-icon"><g data-v-625baef0="" data-v-200fbf1c="" fill="none" fill-rule="evenodd"><circle data-v-625baef0="" data-v-200fbf1c="" cx="12.5" cy="12.5" r="12.5" fill="#E1EFFF"></circle> <path data-v-625baef0="" data-v-200fbf1c="" fill="#7BB9FF" d="M4 12.5S6.917 7 12.75 7s8.75 5.5 8.75 5.5-2.917 5.5-8.75 5.5S4 12.5 4 12.5zm8.75 2.292c1.208 0 2.188-1.026 2.188-2.292 0-1.266-.98-2.292-2.188-2.292-1.208 0-2.188 1.026-2.188 2.292 0 1.266.98 2.292 2.188 2.292z"></path></g></svg> <span data-v-625baef0="" data-v-200fbf1c="" class="content">文章被阅读<span data-v-625baef0="" data-v-200fbf1c="" class="count">143,053</span></span></div><!----></div></div><!----><div data-v-200fbf1c="" data-v-4f1025eb="" data-v-548ff166="" data-v-7286dda2="" class="sidebar-block recommend recommend-index shadow"><div data-v-200fbf1c="" class="block-title">你可能感兴趣的小册</div><div data-v-200fbf1c="" class="block-body"><div data-v-4f1025eb="" data-v-200fbf1c="" class="book-list"><div data-v-4f1025eb="" data-v-200fbf1c="" class="book"><div data-v-4f1025eb="" data-v-200fbf1c="" class="poster"><div data-v-292b3648="" data-v-4d895a49="" data-v-4f1025eb="" data-src="https://user-gold-cdn.xitu.io/2017/11/20/15fd7937bfca9d71?imageView2/1/w/200/h/280/q/95/format/webp/interlace/1" class="lazy thumb poster-img loaded" data-v-200fbf1c="" style="background-image: url(&quot;https://user-gold-cdn.xitu.io/2017/11/20/15fd7937bfca9d71?imageView2/1/w/200/h/280/q/95/format/webp/interlace/1&quot;); background-size: cover;"></div></div><div data-v-4f1025eb="" data-v-200fbf1c="" class="info"><div data-v-4f1025eb="" data-v-200fbf1c="" class="title">如何写一本掘金小册</div><div data-v-4f1025eb="" data-v-200fbf1c="" class="bought"><span data-v-4f1025eb="" data-v-200fbf1c="" class="num">7272人已购买</span><span data-v-4f1025eb="" data-v-200fbf1c="" class="try-read">试读</span></div></div></div><div data-v-4f1025eb="" data-v-200fbf1c="" class="book"><div data-v-4f1025eb="" data-v-200fbf1c="" class="poster"><div data-v-292b3648="" data-v-4d895a49="" data-v-4f1025eb="" data-src="https://user-gold-cdn.xitu.io/2017/11/20/15fd79417e955d9a?imageView2/1/w/200/h/280/q/95/format/webp/interlace/1" class="lazy thumb poster-img loaded" data-v-200fbf1c="" style="background-image: url(&quot;https://user-gold-cdn.xitu.io/2017/11/20/15fd79417e955d9a?imageView2/1/w/200/h/280/q/95/format/webp/interlace/1&quot;); background-size: cover;"></div></div><div data-v-4f1025eb="" data-v-200fbf1c="" class="info"><div data-v-4f1025eb="" data-v-200fbf1c="" class="title">数字货币与区块链原理</div><div data-v-4f1025eb="" data-v-200fbf1c="" class="bought"><span data-v-4f1025eb="" data-v-200fbf1c="" class="num">1083人已购买</span><span data-v-4f1025eb="" data-v-200fbf1c="" class="try-read">试读</span></div></div></div></div></div></div><div data-v-200fbf1c="" data-v-5bce0790="" data-v-7286dda2="" class="sidebar-block app-download-sidebar-block shadow"><!----><div data-v-200fbf1c="" class="block-body"><a data-v-5bce0790="" data-v-200fbf1c="" class="app-link" href="https://juejin.im/app" target="_blank"><img data-v-5bce0790="" data-v-200fbf1c="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/post.7cb7332.png" class="qr-img"><div data-v-5bce0790="" data-v-200fbf1c="" class="content-box"><div data-v-5bce0790="" data-v-200fbf1c="" class="headline">下载掘金客户端</div><div data-v-5bce0790="" data-v-200fbf1c="" class="desc">一个帮助开发者成长的社区</div></div><div data-v-5bce0790="" data-v-200fbf1c="" title="关闭" class="close-btn ion-close-round"></div></a></div></div><div data-v-200fbf1c="" data-v-4f3bf316="" data-v-7286dda2="" class="sidebar-block wechat-sidebar-block pure"><div data-v-32276d48="" data-v-4f3bf316="" class="wechat-banner" data-v-200fbf1c=""><img data-v-32276d48="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/frontend.1dae74a.png" class="wechat-img"></div><div data-v-4f3bf316="" data-v-200fbf1c="" title="关闭" class="close-btn ion-close-round"></div></div><div data-v-200fbf1c="" data-v-64a8a8ac="" data-v-7286dda2="" class="sidebar-block related-entry-sidebar-block shadow" st:block="relatedEntrySidebarBlock"><div data-v-200fbf1c="" class="block-title">相关文章</div><div data-v-200fbf1c="" class="block-body"><div data-v-64a8a8ac="" data-v-200fbf1c="" class="entry-list"><a data-v-64a8a8ac="" href="https://juejin.im/post/5b9e9bf1e51d450e6b0dba92" target="_blank" rel="" st:name="link" class="item" data-v-200fbf1c=""><div data-v-64a8a8ac="" class="entry-title">从零开始仿写一个抖音App——日志和埋点以及后端初步架构</div><div data-v-64a8a8ac="" class="entry-meta-box"><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-64a8a8ac="" class="count">371</span></div><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.a7c8341.svg" class="icon"><span data-v-64a8a8ac="" class="count">28</span></div></div></a><a data-v-64a8a8ac="" href="https://juejin.im/post/5bba0f525188255c72285dd8" target="_blank" rel="" st:name="link" class="item" data-v-200fbf1c=""><div data-v-64a8a8ac="" class="entry-title">从零开始仿写一个抖音App——app架构更新与网络层定制</div><div data-v-64a8a8ac="" class="entry-meta-box"><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-64a8a8ac="" class="count">215</span></div><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.a7c8341.svg" class="icon"><span data-v-64a8a8ac="" class="count">23</span></div></div></a><a data-v-64a8a8ac="" href="https://juejin.im/post/5be9084d6fb9a049f153b94c" target="_blank" rel="" st:name="link" class="item" data-v-200fbf1c=""><div data-v-64a8a8ac="" class="entry-title">从零开始仿写一个抖音App——音视频开篇</div><div data-v-64a8a8ac="" class="entry-meta-box"><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-64a8a8ac="" class="count">186</span></div><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.a7c8341.svg" class="icon"><span data-v-64a8a8ac="" class="count">29</span></div></div></a><a data-v-64a8a8ac="" href="https://juejin.im/post/5d5a207851882541082a92b0" target="_blank" rel="" st:name="link" class="item" data-v-200fbf1c=""><div data-v-64a8a8ac="" class="entry-title">成熟项目的Flutter快速引入以及Flutter、Native混合开发探究</div><div data-v-64a8a8ac="" class="entry-meta-box"><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-64a8a8ac="" class="count">175</span></div><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.a7c8341.svg" class="icon"><span data-v-64a8a8ac="" class="count">49</span></div></div></a><a data-v-64a8a8ac="" href="https://juejin.im/post/5dd22ecd5188252a091e9b47" target="_blank" rel="" st:name="link" class="item" data-v-200fbf1c=""><div data-v-64a8a8ac="" class="entry-title">从零开始仿写一个抖音App——视频编辑SDK开发(一)</div><div data-v-64a8a8ac="" class="entry-meta-box"><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/zan.e9d7698.svg" class="icon"><span data-v-64a8a8ac="" class="count">123</span></div><div data-v-64a8a8ac="" class="entry-meta"><img data-v-64a8a8ac="" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/comment.a7c8341.svg" class="icon"><span data-v-64a8a8ac="" class="count">23</span></div></div></a></div></div></div><div data-v-7286dda2="" class="sticky-block-box"><div data-v-200fbf1c="" data-v-26763b8a="" data-v-7286dda2="" class="sidebar-block catalog-block pure"><nav data-v-311d93ec="" data-v-26763b8a="" class="article-catalog" data-v-200fbf1c="" style=""><div data-v-311d93ec="" class="catalog-title">目录</div><div data-v-311d93ec="" class="catalog-body"><ul data-v-311d93ec="" class="catalog-list" style="margin-top: 0px;"><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-0" title="另外小姐姐最近在看机会 base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。">另外小姐姐最近在看机会 base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。</a><!----></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-1" title="一、算法">一、算法</a><ul class="sub-list"><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-2" title="1.全排列">1.全排列</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-3" title="2.二分搜索">2.二分搜索</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-4" title="3.排序">3.排序</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-5" title="(1).冒泡排序">(1).冒泡排序</a><!----></li><li class="item d3 active"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-6" title="(2).快速排序">(2).快速排序</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-7" title="(3).选择排序">(3).选择排序</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-8" title="(4).插入排序">(4).插入排序</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-9" title="(5).希尔排序">(5).希尔排序</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-10" title="(6).归并排序">(6).归并排序</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-11" title="(7).堆排序">(7).堆排序</a><!----></li></ul></li></ul></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-12" title="二、JS基础">二、JS基础</a><ul class="sub-list"><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-13" title="1.继承">1.继承</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-14" title="2.this指向">2.this指向</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-15" title="(1).this 指向有哪几种">(1).this 指向有哪几种</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-16" title="(2).改变函数内部 this 指针的指向函数（bind，apply，call的区别）">(2).改变函数内部 this 指针的指向函数（bind，apply，call的区别）</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-17" title="(3).箭头函数">(3).箭头函数</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-18" title="3.数据类型">3.数据类型</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-19" title="(1).基本数据类型">(1).基本数据类型</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-20" title="(2).symbol">(2).symbol</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-21" title="(3).如何判断类型">(3).如何判断类型</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-22" title="(4).判断是否是数组">(4).判断是否是数组</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-23" title="(5).字符串转数字">(5).字符串转数字</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-24" title="4.CallBack Hell">4.CallBack Hell</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-25" title="(1).Promise 为什么以及如何用于解决控制反转信任问题">(1).Promise 为什么以及如何用于解决控制反转信任问题</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-26" title="(2).promise、generator、async/await">(2).promise、generator、async/await</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-27" title="5.加载">5.加载</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-28" title="(1).异步加载js的方法">(1).异步加载js的方法</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-29" title="(2).图片的懒加载和预加载">(2).图片的懒加载和预加载</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-30" title="6.事件">6.事件</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-31" title="(1).事件流">(1).事件流</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-32" title="(2).什么是事件监听">(2).什么是事件监听</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-33" title="(3). mouseover 和 mouseenter 的区别">(3). mouseover 和 mouseenter 的区别</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-34" title="(4). 事件委托以及冒泡原理">(4). 事件委托以及冒泡原理</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-35" title="(5). 事件代理在捕获阶段的实际应用">(5). 事件代理在捕获阶段的实际应用</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-36" title="7.跨域">7.跨域</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-37" title="(1).CORS">(1).CORS</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-38" title="(2).IE">(2).IE</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-39" title="(3).其他浏览器">(3).其他浏览器</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-40" title="(4).JSONP">(4).JSONP</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-41" title="(5). 代理">(5). 代理</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-42" title="(6).利用 iframe">(6).利用 iframe</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-43" title="(7).window.postMessage">(7).window.postMessage</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-44" title="(8). child 与 parent 通信">(8). child 与 parent 通信</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-45" title="(9).chilid 与 child 通信">(9).chilid 与 child 通信</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-46" title="(10).Cross Frame">(10).Cross Frame</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-47" title="(11).window.name">(11).window.name</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-48" title="8.Ajax">8.Ajax</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-49" title="(1).实现一个Ajax">(1).实现一个Ajax</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-50" title="(2).Ajax状态">(2).Ajax状态</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-51" title="(3).将原生的 ajax 封装成 promise">(3).将原生的 ajax 封装成 promise</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-52" title="9.垃圾回收">9.垃圾回收</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-53" title="(1).标记清除">(1).标记清除</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-54" title="(2).引用计数">(2).引用计数</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-55" title="10.eval是什么">10.eval是什么</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-56" title="11.监听对象属性的改变">11.监听对象属性的改变</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-57" title="(一).ES5 中">(一).ES5 中</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-58" title="(二). ES6 中">(二). ES6 中</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-59" title="12.实现一个私有变量">12.实现一个私有变量</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-60" title="13.操作符">13.操作符</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-61" title="(1).==和===、以及Object.is的区别">(1).==和===、以及Object.is的区别</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-62" title="(2).new 操作符做了哪些事情">(2).new 操作符做了哪些事情</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-63" title="14.数组">14.数组</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-64" title="(1).数组常用方法">(1).数组常用方法</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-65" title="(2).数组去重">(2).数组去重</a><!----></li></ul></li></ul></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-66" title="三、高级技巧">三、高级技巧</a><ul class="sub-list"><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-67" title="1.防抖节流">1.防抖节流</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-68" title="(1).节流">(1).节流</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-69" title="(2). 防抖">(2). 防抖</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-70" title="3.数组展开">3.数组展开</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-71" title="4.拖放">4.拖放</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-72" title="5.once">5.once</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-73" title="6.promise">6.promise</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-74" title="7.sleep">7.sleep</a><!----></li></ul></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-75" title="四、浏览器">四、浏览器</a><ul class="sub-list"><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-76" title="1.缓存">1.缓存</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-77" title="(1).按缓存位置分">(1).按缓存位置分</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-78" title="(2).按失效策略分">(2).按失效策略分</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-79" title="强制缓存 (也叫强缓存)">强制缓存 (也叫强缓存)</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-80" title="对比缓存 (协商缓存)">对比缓存 (协商缓存)</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-81" title="(3).Ajax 解决浏览器缓存问题">(3).Ajax 解决浏览器缓存问题</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-82" title="2.浏览器渲染原理">2.浏览器渲染原理</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-83" title="(1).Render Tree">(1).Render Tree</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-84" title="(2).重绘">(2).重绘</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-85" title="(3)回流">(3)回流</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-86" title="(4).浏览器优化">(4).浏览器优化</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-87" title="(5).减少重绘与回流">(5).减少重绘与回流</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-88" title="(6).JS 什么时候解析？">(6).JS 什么时候解析？</a><!----></li></ul></li></ul></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-89" title="五、计算机基础">五、计算机基础</a><ul class="sub-list"><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-90" title="1.计算机网络">1.计算机网络</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-91" title="(1).TCP 三次握手">(1).TCP 三次握手</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-92" title="(2).CDN 原理">(2).CDN 原理</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-93" title="(4).DNS 解析">(4).DNS 解析</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-94" title="(5).HTTP 常用请求头">(5).HTTP 常用请求头</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-95" title="(5).OSI 七层模型">(5).OSI 七层模型</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-96" title="(5).TCP和UDP的区别">(5).TCP和UDP的区别</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-97" title="(6).为什么三次握手四次挥手">(6).为什么三次握手四次挥手</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-98" title="(7).websocket和ajax的区别是什么，websocket的应用场景有哪些">(7).websocket和ajax的区别是什么，websocket的应用场景有哪些</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-99" title="(8).TCP/IP的网络模型">(8).TCP/IP的网络模型</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-100" title="2.HTTP协议">2.HTTP协议</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-101" title="(1).常见的请求方法">(1).常见的请求方法</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-102" title="(2).GET 和 POST 的区别">(2).GET 和 POST 的区别</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-103" title="(3).HTTP  状态码">(3).HTTP  状态码</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-104" title="(4).301 和 302 有什么具体区别">(4).301 和 302 有什么具体区别</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-105" title="3.操作系统">3.操作系统</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-106" title="(1).进程和线程的区别">(1).进程和线程的区别</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-107" title="(2).线程的哪些资源共享，哪些资源不共享">(2).线程的哪些资源共享，哪些资源不共享</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-108" title="(3).进程间的通信方式有哪些">(3).进程间的通信方式有哪些</a><!----></li></ul></li></ul></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-109" title="六、前端进阶">六、前端进阶</a><ul class="sub-list"><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-110" title="1.VUE">1.VUE</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-111" title="(1).vue的生命周期">(1).vue的生命周期</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-112" title="(2).Vue 双向绑定原理">(2).Vue 双向绑定原理</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-113" title="2.Webpack">2.Webpack</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-114" title="(1).webpack 和 gulp 区别">(1).webpack 和 gulp 区别</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-115" title="3.模块化">3.模块化</a><ul class="sub-list"><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-116" title="(1).如何理解前端模块化">(1).如何理解前端模块化</a><!----></li><li class="item d3"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-117" title="(2).说一下 Commonjs、AMD 和 CMD">(2).说一下 Commonjs、AMD 和 CMD</a><!----></li></ul></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-118" title="4.简单实现Node的Events模块">4.简单实现Node的Events模块</a><!----></li><li class="item d2"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-119" title="5.性能优化">5.性能优化</a><!----></li></ul></li><li data-v-311d93ec="" class="item d1"><a href="https://juejin.im/post/5e91b01651882573716a9b23#heading-120" title="七、尾巴">七、尾巴</a><!----></li></ul></div></nav></div></div></div><div data-v-18c05c07="" data-v-7407bc26="" class="article-suspended-panel article-suspended-panel" data-v-23c7d456=""><div data-v-18c05c07="" class="like-btn panel-btn like-adjust with-badge" badge="791"></div><div data-v-18c05c07="" class="comment-btn panel-btn comment-adjust with-badge" badge="79"></div><div data-v-18c05c07="" class="collect-btn panel-btn"><!----></div><div data-v-18c05c07="" class="share-title">分享</div><div data-v-18c05c07="" class="weibo-btn share-btn panel-btn"></div><div data-v-18c05c07="" class="qq-btn share-btn panel-btn"></div><div data-v-18c05c07="" class="wechat-btn share-btn panel-btn"><img data-v-18c05c07="" src="https://juejin.im/post/5e91b01651882573716a9b23" class="wechat-qr-code-img shadow" style="display: none;"></div></div><div data-v-5db6962e="" data-v-7407bc26="" class="image-viewer-box" data-v-23c7d456=""><!----></div><!----></div></main></div><!----></div>
      
      
      
      <script type="text/javascript" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/runtime.cc2b750c14e4e98c0e3a.js"></script><script type="text/javascript" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/0.38bbdc24de2d86d47ad6.js"></script><script type="text/javascript" src="./一位前端小姐姐的五万字面试宝典 - 掘金_files/1.b6186216ae7d3a6e6750.js"></script>
    </body></html>